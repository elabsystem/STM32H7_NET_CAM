
ex10_w5300_tcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008740  08008740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008748  08008748  00018748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000cc  24000000  08008750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000940  240000cc  0800881c  000200cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a0c  0800881c  00020a0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014886  00000000  00000000  000200fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b12  00000000  00000000  00034980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec0  00000000  00000000  00037498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000dc0  00000000  00000000  00038358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037ee3  00000000  00000000  00039118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012a5b  00000000  00000000  00070ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160243  00000000  00000000  00083a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e3c99  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004430  00000000  00000000  001e3cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000cc 	.word	0x240000cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008448 	.word	0x08008448

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d0 	.word	0x240000d0
 80002dc:	08008448 	.word	0x08008448

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <WIZCHIP_WRITE+0x38>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <WIZCHIP_WRITE+0x38>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <WIZCHIP_WRITE+0x38>)
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	887a      	ldrh	r2, [r7, #2]
 80006a2:	4611      	mov	r1, r2
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <WIZCHIP_WRITE+0x38>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006ae:	4b03      	ldr	r3, [pc, #12]	; (80006bc <WIZCHIP_WRITE+0x38>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	4798      	blx	r3
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	24000004 	.word	0x24000004

080006c0 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <WIZCHIP_READ+0x38>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <WIZCHIP_READ+0x38>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <WIZCHIP_READ+0x38>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	4798      	blx	r3
 80006dc:	4603      	mov	r3, r0
 80006de:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <WIZCHIP_READ+0x38>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <WIZCHIP_READ+0x38>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	4798      	blx	r3
   return ret;
 80006ec:	89fb      	ldrh	r3, [r7, #14]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24000004 	.word	0x24000004

080006fc <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <setTMSR+0x78>)
 8000714:	4413      	add	r3, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffd2 	bl	80006c0 <WIZCHIP_READ>
 800071c:	4603      	mov	r3, r0
 800071e:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00a      	beq.n	8000740 <setTMSR+0x44>
 800072a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800072e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000732:	b21a      	sxth	r2, r3
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	b21b      	sxth	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b21b      	sxth	r3, r3
 800073c:	81fb      	strh	r3, [r7, #14]
 800073e:	e009      	b.n	8000754 <setTMSR+0x58>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 8000740:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	b21a      	sxth	r2, r3
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <setTMSR+0x78>)
 800075c:	4413      	add	r3, r2
 800075e:	461a      	mov	r2, r3
 8000760:	89fb      	ldrh	r3, [r7, #14]
 8000762:	4619      	mov	r1, r3
 8000764:	4610      	mov	r0, r2
 8000766:	f7ff ff8d 	bl	8000684 <WIZCHIP_WRITE>
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	68000020 	.word	0x68000020

08000778 <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00a      	beq.n	80007a2 <getTMSR+0x2a>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <getTMSR+0x4c>)
 8000794:	4413      	add	r3, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff92 	bl	80006c0 <WIZCHIP_READ>
 800079c:	4603      	mov	r3, r0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	e00b      	b.n	80007ba <getTMSR+0x42>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <getTMSR+0x4c>)
 80007aa:	4413      	add	r3, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff87 	bl	80006c0 <WIZCHIP_READ>
 80007b2:	4603      	mov	r3, r0
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2db      	uxtb	r3, r3
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	68000020 	.word	0x68000020

080007c8 <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	460a      	mov	r2, r1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	4613      	mov	r3, r2
 80007d6:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <setRMSR+0x78>)
 80007e0:	4413      	add	r3, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff6c 	bl	80006c0 <WIZCHIP_READ>
 80007e8:	4603      	mov	r3, r0
 80007ea:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00a      	beq.n	800080c <setRMSR+0x44>
 80007f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007fe:	b21a      	sxth	r2, r3
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	b21b      	sxth	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b21b      	sxth	r3, r3
 8000808:	81fb      	strh	r3, [r7, #14]
 800080a:	e009      	b.n	8000820 <setRMSR+0x58>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 800080c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	b21a      	sxth	r2, r3
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21b      	sxth	r3, r3
 800081e:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <setRMSR+0x78>)
 8000828:	4413      	add	r3, r2
 800082a:	461a      	mov	r2, r3
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	4619      	mov	r1, r3
 8000830:	4610      	mov	r0, r2
 8000832:	f7ff ff27 	bl	8000684 <WIZCHIP_WRITE>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	68000028 	.word	0x68000028

08000844 <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00a      	beq.n	800086e <getRMSR+0x2a>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <getRMSR+0x4c>)
 8000860:	4413      	add	r3, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff2c 	bl	80006c0 <WIZCHIP_READ>
 8000868:	4603      	mov	r3, r0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	e00b      	b.n	8000886 <getRMSR+0x42>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <getRMSR+0x4c>)
 8000876:	4413      	add	r3, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff21 	bl	80006c0 <WIZCHIP_READ>
 800087e:	4603      	mov	r3, r0
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b29b      	uxth	r3, r3
 8000884:	b2db      	uxtb	r3, r3
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	68000028 	.word	0x68000028

08000894 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <getSn_TX_FSR+0x58>)
 80008aa:	4413      	add	r3, r2
 80008ac:	019b      	lsls	r3, r3, #6
 80008ae:	3324      	adds	r3, #36	; 0x24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff05 	bl	80006c0 <WIZCHIP_READ>
 80008b6:	4603      	mov	r3, r0
 80008b8:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <getSn_TX_FSR+0x58>)
 80008be:	4413      	add	r3, r2
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	3326      	adds	r3, #38	; 0x26
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fefb 	bl	80006c0 <WIZCHIP_READ>
 80008ca:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80008cc:	4323      	orrs	r3, r4
 80008ce:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d002      	beq.n	80008de <getSn_TX_FSR+0x4a>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80008dc:	e7e3      	b.n	80008a6 <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80008de:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 80008e0:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	01a00008 	.word	0x01a00008

080008f0 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 80008fe:	2301      	movs	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <getSn_RX_RSR+0x64>)
 8000906:	4413      	add	r3, r2
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	3328      	adds	r3, #40	; 0x28
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fed7 	bl	80006c0 <WIZCHIP_READ>
 8000912:	4603      	mov	r3, r0
 8000914:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <getSn_RX_RSR+0x64>)
 800091a:	4413      	add	r3, r2
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	332a      	adds	r3, #42	; 0x2a
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fecd 	bl	80006c0 <WIZCHIP_READ>
 8000926:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8000928:	4323      	orrs	r3, r4
 800092a:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d002      	beq.n	800093a <getSn_RX_RSR+0x4a>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8000938:	e7e3      	b.n	8000902 <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 800093a:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4a06      	ldr	r2, [pc, #24]	; (8000958 <getSn_RX_RSR+0x68>)
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	105b      	asrs	r3, r3, #1
 8000944:	f003 0201 	and.w	r2, r3, #1
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4413      	add	r3, r2
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	01a00008 	.word	0x01a00008
 8000958:	240000fc 	.word	0x240000fc

0800095c <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d022      	beq.n	80009ba <wiz_send_data+0x5e>
   
   for(i = 0; i < len ; i += 2)
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	e01a      	b.n	80009b0 <wiz_send_data+0x54>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <wiz_send_data+0x68>)
 800097e:	4413      	add	r3, r2
 8000980:	019b      	lsls	r3, r3, #6
 8000982:	332e      	adds	r3, #46	; 0x2e
 8000984:	4618      	mov	r0, r3
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	440b      	add	r3, r1
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b21b      	sxth	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	4619      	mov	r1, r3
 80009a6:	f7ff fe6d 	bl	8000684 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3302      	adds	r3, #2
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3e0      	bcc.n	800097a <wiz_send_data+0x1e>
 80009b8:	e000      	b.n	80009bc <wiz_send_data+0x60>
   if(len == 0)  return;
 80009ba:	bf00      	nop
}
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	01a00008 	.word	0x01a00008

080009c8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d02d      	beq.n	8000a40 <wiz_recv_data+0x78>
      
   for(i = 0; i < len; i++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	e020      	b.n	8000a2c <wiz_recv_data+0x64>
   {
      if((i & 0x01)==0)
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d112      	bne.n	8000a1a <wiz_recv_data+0x52>
      {
         rd = getSn_RX_FIFOR(sn);
 80009f4:	7bfa      	ldrb	r2, [r7, #15]
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <wiz_recv_data+0x80>)
 80009f8:	4413      	add	r3, r2
 80009fa:	019b      	lsls	r3, r3, #6
 80009fc:	3330      	adds	r3, #48	; 0x30
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe5e 	bl	80006c0 <WIZCHIP_READ>
 8000a04:	4603      	mov	r3, r0
 8000a06:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8000a08:	8afb      	ldrh	r3, [r7, #22]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	b299      	uxth	r1, r3
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4413      	add	r3, r2
 8000a14:	b2ca      	uxtb	r2, r1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e005      	b.n	8000a26 <wiz_recv_data+0x5e>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4413      	add	r3, r2
 8000a20:	8afa      	ldrh	r2, [r7, #22]
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3da      	bcc.n	80009ea <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	8afa      	ldrh	r2, [r7, #22]
 8000a38:	b2d1      	uxtb	r1, r2
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <wiz_recv_data+0x84>)
 8000a3c:	54d1      	strb	r1, [r2, r3]
 8000a3e:	e000      	b.n	8000a42 <wiz_recv_data+0x7a>
   if(len == 0) return;
 8000a40:	bf00      	nop
}
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	01a00008 	.word	0x01a00008
 8000a4c:	24000104 	.word	0x24000104

08000a50 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4604      	mov	r4, r0
 8000a58:	4608      	mov	r0, r1
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4623      	mov	r3, r4
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	4603      	mov	r3, r0
 8000a64:	71bb      	strb	r3, [r7, #6]
 8000a66:	460b      	mov	r3, r1
 8000a68:	80bb      	strh	r3, [r7, #4]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d902      	bls.n	8000a7a <socket+0x2a>
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	e0fd      	b.n	8000c76 <socket+0x226>
	switch(protocol)
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d005      	beq.n	8000a8c <socket+0x3c>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dd32      	ble.n	8000aea <socket+0x9a>
 8000a84:	3b02      	subs	r3, #2
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d82f      	bhi.n	8000aea <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000a8a:	e032      	b.n	8000af2 <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8000a8c:	487c      	ldr	r0, [pc, #496]	; (8000c80 <socket+0x230>)
 8000a8e:	f7ff fe17 	bl	80006c0 <WIZCHIP_READ>
 8000a92:	4603      	mov	r3, r0
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	4877      	ldr	r0, [pc, #476]	; (8000c80 <socket+0x230>)
 8000aa2:	f7ff fe0d 	bl	80006c0 <WIZCHIP_READ>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	4873      	ldr	r0, [pc, #460]	; (8000c84 <socket+0x234>)
 8000ab6:	f7ff fe03 	bl	80006c0 <WIZCHIP_READ>
 8000aba:	4603      	mov	r3, r0
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	486e      	ldr	r0, [pc, #440]	; (8000c84 <socket+0x234>)
 8000acc:	f7ff fdf8 	bl	80006c0 <WIZCHIP_READ>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	3303      	adds	r3, #3
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d105      	bne.n	8000af0 <socket+0xa0>
 8000ae4:	f06f 0302 	mvn.w	r3, #2
 8000ae8:	e0c5      	b.n	8000c76 <socket+0x226>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000aea:	f06f 0304 	mvn.w	r3, #4
 8000aee:	e0c2      	b.n	8000c76 <socket+0x226>
	    break;
 8000af0:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <socket+0xb2>
 8000afc:	f06f 0305 	mvn.w	r3, #5
 8000b00:	e0b9      	b.n	8000c76 <socket+0x226>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d019      	beq.n	8000b3c <socket+0xec>
	{
   	switch(protocol)
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d002      	beq.n	8000b14 <socket+0xc4>
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d008      	beq.n	8000b24 <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000b12:	e018      	b.n	8000b46 <socket+0xf6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d110      	bne.n	8000b40 <socket+0xf0>
 8000b1e:	f06f 0305 	mvn.w	r3, #5
 8000b22:	e0a8      	b.n	8000c76 <socket+0x226>
   	      if(flag & SF_IGMP_VER2)
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	f003 0320 	and.w	r3, r3, #32
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00a      	beq.n	8000b44 <socket+0xf4>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db06      	blt.n	8000b44 <socket+0xf4>
 8000b36:	f06f 0305 	mvn.w	r3, #5
 8000b3a:	e09c      	b.n	8000c76 <socket+0x226>
   	}
   }
 8000b3c:	bf00      	nop
 8000b3e:	e002      	b.n	8000b46 <socket+0xf6>
   	      break;
 8000b40:	bf00      	nop
 8000b42:	e000      	b.n	8000b46 <socket+0xf6>
   	      break;
 8000b44:	bf00      	nop
	close(sn);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f8a9 	bl	8000ca0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <socket+0x238>)
 8000b52:	4413      	add	r3, r2
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	4618      	mov	r0, r3
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21a      	sxth	r2, r3
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	01db      	lsls	r3, r3, #7
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f7ff fd81 	bl	8000684 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d110      	bne.n	8000baa <socket+0x15a>
	{
	   port = sock_any_port++;
 8000b88:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <socket+0x23c>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	b291      	uxth	r1, r2
 8000b90:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <socket+0x23c>)
 8000b92:	8011      	strh	r1, [r2, #0]
 8000b94:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000b96:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <socket+0x23c>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d103      	bne.n	8000baa <socket+0x15a>
 8000ba2:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <socket+0x23c>)
 8000ba4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000ba8:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <socket+0x238>)
 8000bae:	4413      	add	r3, r2
 8000bb0:	019b      	lsls	r3, r3, #6
 8000bb2:	330a      	adds	r3, #10
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4610      	mov	r0, r2
 8000bbc:	f7ff fd62 	bl	8000684 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <socket+0x238>)
 8000bc4:	4413      	add	r3, r2
 8000bc6:	019b      	lsls	r3, r3, #6
 8000bc8:	3302      	adds	r3, #2
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fd59 	bl	8000684 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000bd2:	bf00      	nop
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <socket+0x238>)
 8000bd8:	4413      	add	r3, r2
 8000bda:	019b      	lsls	r3, r3, #6
 8000bdc:	3302      	adds	r3, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fd6e 	bl	80006c0 <WIZCHIP_READ>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f3      	bne.n	8000bd4 <socket+0x184>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <socket+0x240>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4013      	ands	r3, r2
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <socket+0x240>)
 8000c08:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000c0a:	78fb      	ldrb	r3, [r7, #3]
 8000c0c:	f003 0201 	and.w	r2, r3, #1
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <socket+0x240>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <socket+0x240>)
 8000c26:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <socket+0x244>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <socket+0x244>)
 8000c44:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <socket+0x248>)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <socket+0x24c>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000c58:	bf00      	nop
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <socket+0x238>)
 8000c5e:	4413      	add	r3, r2
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	3308      	adds	r3, #8
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd2b 	bl	80006c0 <WIZCHIP_READ>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f3      	beq.n	8000c5a <socket+0x20a>
   return (int8_t)sn;
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	68000018 	.word	0x68000018
 8000c84:	6800001a 	.word	0x6800001a
 8000c88:	01a00008 	.word	0x01a00008
 8000c8c:	24000000 	.word	0x24000000
 8000c90:	240000e8 	.word	0x240000e8
 8000c94:	240000ea 	.word	0x240000ea
 8000c98:	240000ec 	.word	0x240000ec
 8000c9c:	240000fc 	.word	0x240000fc

08000ca0 <close>:

int8_t close(uint8_t sn)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d902      	bls.n	8000cb6 <close+0x16>
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	e0af      	b.n	8000e16 <close+0x176>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <close+0x180>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	019b      	lsls	r3, r3, #6
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fcfe 	bl	80006c0 <WIZCHIP_READ>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d14f      	bne.n	8000d6e <close+0xce>
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fddf 	bl	8000894 <getSn_TX_FSR>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd4c 	bl	8000778 <getTMSR>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	029b      	lsls	r3, r3, #10
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	d042      	beq.n	8000d6e <close+0xce>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8000ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cec:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	4b4b      	ldr	r3, [pc, #300]	; (8000e20 <close+0x180>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcc3 	bl	8000684 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <close+0x180>)
 8000d02:	4413      	add	r3, r2
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	330a      	adds	r3, #10
 8000d08:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fcb9 	bl	8000684 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <close+0x180>)
 8000d16:	4413      	add	r3, r2
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fcb0 	bl	8000684 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8000d24:	bf00      	nop
 8000d26:	79fa      	ldrb	r2, [r7, #7]
 8000d28:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <close+0x180>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	019b      	lsls	r3, r3, #6
 8000d2e:	3302      	adds	r3, #2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fcc5 	bl	80006c0 <WIZCHIP_READ>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f3      	bne.n	8000d26 <close+0x86>
      while(getSn_SR(sn) != SOCK_UDP);
 8000d3e:	bf00      	nop
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <close+0x180>)
 8000d44:	4413      	add	r3, r2
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	3308      	adds	r3, #8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fcb8 	bl	80006c0 <WIZCHIP_READ>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b22      	cmp	r3, #34	; 0x22
 8000d56:	d1f3      	bne.n	8000d40 <close+0xa0>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	f107 010c 	add.w	r1, r7, #12
 8000d60:	79f8      	ldrb	r0, [r7, #7]
 8000d62:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000d66:	9200      	str	r2, [sp, #0]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f000 fbaf 	bl	80014cc <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000d6e:	79fa      	ldrb	r2, [r7, #7]
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <close+0x180>)
 8000d72:	4413      	add	r3, r2
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	3302      	adds	r3, #2
 8000d78:	2110      	movs	r1, #16
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fc82 	bl	8000684 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000d80:	bf00      	nop
 8000d82:	79fa      	ldrb	r2, [r7, #7]
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <close+0x180>)
 8000d86:	4413      	add	r3, r2
 8000d88:	019b      	lsls	r3, r3, #6
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fc97 	bl	80006c0 <WIZCHIP_READ>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f3      	bne.n	8000d82 <close+0xe2>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <close+0x180>)
 8000d9e:	4413      	add	r3, r2
 8000da0:	019b      	lsls	r3, r3, #6
 8000da2:	3306      	adds	r3, #6
 8000da4:	21ff      	movs	r1, #255	; 0xff
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc6c 	bl	8000684 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2201      	movs	r2, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <close+0x184>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <close+0x184>)
 8000dc8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <close+0x188>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	4013      	ands	r3, r2
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <close+0x188>)
 8000de6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <close+0x18c>)
 8000dec:	2100      	movs	r1, #0
 8000dee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <close+0x190>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000dfa:	bf00      	nop
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <close+0x180>)
 8000e00:	4413      	add	r3, r2
 8000e02:	019b      	lsls	r3, r3, #6
 8000e04:	3308      	adds	r3, #8
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc5a 	bl	80006c0 <WIZCHIP_READ>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f3      	bne.n	8000dfc <close+0x15c>
	return SOCK_OK;
 8000e14:	2301      	movs	r3, #1
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd90      	pop	{r4, r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	01a00008 	.word	0x01a00008
 8000e24:	240000e8 	.word	0x240000e8
 8000e28:	240000ea 	.word	0x240000ea
 8000e2c:	240000ec 	.word	0x240000ec
 8000e30:	240000fc 	.word	0x240000fc

08000e34 <listen>:

int8_t listen(uint8_t sn)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d902      	bls.n	8000e4a <listen+0x16>
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	e048      	b.n	8000edc <listen+0xa8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000e4a:	79fa      	ldrb	r2, [r7, #7]
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <listen+0xb0>)
 8000e4e:	4413      	add	r3, r2
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fc34 	bl	80006c0 <WIZCHIP_READ>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d002      	beq.n	8000e68 <listen+0x34>
 8000e62:	f06f 0304 	mvn.w	r3, #4
 8000e66:	e039      	b.n	8000edc <listen+0xa8>
	CHECK_SOCKINIT();
 8000e68:	79fa      	ldrb	r2, [r7, #7]
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <listen+0xb0>)
 8000e6c:	4413      	add	r3, r2
 8000e6e:	019b      	lsls	r3, r3, #6
 8000e70:	3308      	adds	r3, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc24 	bl	80006c0 <WIZCHIP_READ>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b13      	cmp	r3, #19
 8000e7e:	d002      	beq.n	8000e86 <listen+0x52>
 8000e80:	f06f 0302 	mvn.w	r3, #2
 8000e84:	e02a      	b.n	8000edc <listen+0xa8>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000e86:	79fa      	ldrb	r2, [r7, #7]
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <listen+0xb0>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	3302      	adds	r3, #2
 8000e90:	2102      	movs	r1, #2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fbf6 	bl	8000684 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000e98:	bf00      	nop
 8000e9a:	79fa      	ldrb	r2, [r7, #7]
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <listen+0xb0>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	019b      	lsls	r3, r3, #6
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc0b 	bl	80006c0 <WIZCHIP_READ>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1f3      	bne.n	8000e9a <listen+0x66>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000eb2:	e006      	b.n	8000ec2 <listen+0x8e>
   {
         close(sn);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fef2 	bl	8000ca0 <close>
         return SOCKERR_SOCKCLOSED;
 8000ebc:	f06f 0303 	mvn.w	r3, #3
 8000ec0:	e00c      	b.n	8000edc <listen+0xa8>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000ec2:	79fa      	ldrb	r2, [r7, #7]
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <listen+0xb0>)
 8000ec6:	4413      	add	r3, r2
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	3308      	adds	r3, #8
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fbf7 	bl	80006c0 <WIZCHIP_READ>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b14      	cmp	r3, #20
 8000ed8:	d1ec      	bne.n	8000eb4 <listen+0x80>
   }
   return SOCK_OK;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	01a00008 	.word	0x01a00008

08000ee8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d902      	bls.n	8000efe <disconnect+0x16>
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	e061      	b.n	8000fc2 <disconnect+0xda>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <disconnect+0xe4>)
 8000f02:	4413      	add	r3, r2
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fbda 	bl	80006c0 <WIZCHIP_READ>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d002      	beq.n	8000f1c <disconnect+0x34>
 8000f16:	f06f 0304 	mvn.w	r3, #4
 8000f1a:	e052      	b.n	8000fc2 <disconnect+0xda>
	setSn_CR(sn,Sn_CR_DISCON);
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <disconnect+0xe4>)
 8000f20:	4413      	add	r3, r2
 8000f22:	019b      	lsls	r3, r3, #6
 8000f24:	3302      	adds	r3, #2
 8000f26:	2108      	movs	r1, #8
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fbab 	bl	8000684 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000f2e:	bf00      	nop
 8000f30:	79fa      	ldrb	r2, [r7, #7]
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <disconnect+0xe4>)
 8000f34:	4413      	add	r3, r2
 8000f36:	019b      	lsls	r3, r3, #6
 8000f38:	3302      	adds	r3, #2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fbc0 	bl	80006c0 <WIZCHIP_READ>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f3      	bne.n	8000f30 <disconnect+0x48>
	sock_is_sending &= ~(1<<sn);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <disconnect+0xe8>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <disconnect+0xe8>)
 8000f64:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <disconnect+0xec>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	fa42 f303 	asr.w	r3, r2, r3
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d016      	beq.n	8000fa8 <disconnect+0xc0>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e021      	b.n	8000fc2 <disconnect+0xda>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <disconnect+0xe4>)
 8000f82:	4413      	add	r3, r2
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	3306      	adds	r3, #6
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fb99 	bl	80006c0 <WIZCHIP_READ>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <disconnect+0xc0>
	   {
	      close(sn);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe7f 	bl	8000ca0 <close>
	      return SOCKERR_TIMEOUT;
 8000fa2:	f06f 030c 	mvn.w	r3, #12
 8000fa6:	e00c      	b.n	8000fc2 <disconnect+0xda>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <disconnect+0xe4>)
 8000fac:	4413      	add	r3, r2
 8000fae:	019b      	lsls	r3, r3, #6
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fb84 	bl	80006c0 <WIZCHIP_READ>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1de      	bne.n	8000f7e <disconnect+0x96>
	   }
	}
	return SOCK_OK;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	01a00008 	.word	0x01a00008
 8000fd0:	240000ea 	.word	0x240000ea
 8000fd4:	240000e8 	.word	0x240000e8

08000fd8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d902      	bls.n	8000ffc <send+0x24>
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e0ea      	b.n	80011d2 <send+0x1fa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	4b77      	ldr	r3, [pc, #476]	; (80011dc <send+0x204>)
 8001000:	4413      	add	r3, r2
 8001002:	019b      	lsls	r3, r3, #6
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fb5b 	bl	80006c0 <WIZCHIP_READ>
 800100a:	4603      	mov	r3, r0
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	2b01      	cmp	r3, #1
 8001012:	d002      	beq.n	800101a <send+0x42>
 8001014:	f06f 0304 	mvn.w	r3, #4
 8001018:	e0db      	b.n	80011d2 <send+0x1fa>
   CHECK_SOCKDATA();
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <send+0x4e>
 8001020:	f06f 030d 	mvn.w	r3, #13
 8001024:	e0d5      	b.n	80011d2 <send+0x1fa>
   tmp = getSn_SR(sn);
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	4b6c      	ldr	r3, [pc, #432]	; (80011dc <send+0x204>)
 800102a:	4413      	add	r3, r2
 800102c:	019b      	lsls	r3, r3, #6
 800102e:	3308      	adds	r3, #8
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fb45 	bl	80006c0 <WIZCHIP_READ>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b17      	cmp	r3, #23
 800103e:	d005      	beq.n	800104c <send+0x74>
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b1c      	cmp	r3, #28
 8001044:	d002      	beq.n	800104c <send+0x74>
 8001046:	f06f 0306 	mvn.w	r3, #6
 800104a:	e0c2      	b.n	80011d2 <send+0x1fa>
   if( sock_is_sending & (1<<sn) )
 800104c:	4b64      	ldr	r3, [pc, #400]	; (80011e0 <send+0x208>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	fa42 f303 	asr.w	r3, r2, r3
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d035      	beq.n	80010cc <send+0xf4>
   {
      tmp = getSn_IR(sn);
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <send+0x204>)
 8001064:	4413      	add	r3, r2
 8001066:	019b      	lsls	r3, r3, #6
 8001068:	3306      	adds	r3, #6
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fb28 	bl	80006c0 <WIZCHIP_READ>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	d018      	beq.n	80010b0 <send+0xd8>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	4b56      	ldr	r3, [pc, #344]	; (80011dc <send+0x204>)
 8001082:	4413      	add	r3, r2
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	3306      	adds	r3, #6
 8001088:	2110      	movs	r1, #16
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fafa 	bl	8000684 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2201      	movs	r2, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	b21b      	sxth	r3, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b50      	ldr	r3, [pc, #320]	; (80011e0 <send+0x208>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <send+0x208>)
 80010ac:	801a      	strh	r2, [r3, #0]
 80010ae:	e00d      	b.n	80010cc <send+0xf4>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <send+0xf0>
      {
         close(sn);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fdef 	bl	8000ca0 <close>
         return SOCKERR_TIMEOUT;
 80010c2:	f06f 030c 	mvn.w	r3, #12
 80010c6:	e084      	b.n	80011d2 <send+0x1fa>
      }
      else return SOCK_BUSY;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e082      	b.n	80011d2 <send+0x1fa>
   }
   freesize = getSn_TxMAX(sn);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fb52 	bl	8000778 <getTMSR>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	029b      	lsls	r3, r3, #10
 80010da:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80010dc:	88ba      	ldrh	r2, [r7, #4]
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d901      	bls.n	80010e8 <send+0x110>
 80010e4:	89bb      	ldrh	r3, [r7, #12]
 80010e6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fbd2 	bl	8000894 <getSn_TX_FSR>
 80010f0:	4603      	mov	r3, r0
 80010f2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	4b39      	ldr	r3, [pc, #228]	; (80011dc <send+0x204>)
 80010f8:	4413      	add	r3, r2
 80010fa:	019b      	lsls	r3, r3, #6
 80010fc:	3308      	adds	r3, #8
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fade 	bl	80006c0 <WIZCHIP_READ>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b17      	cmp	r3, #23
 800110c:	d009      	beq.n	8001122 <send+0x14a>
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2b1c      	cmp	r3, #28
 8001112:	d006      	beq.n	8001122 <send+0x14a>
      {
         close(sn);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fdc2 	bl	8000ca0 <close>
         return SOCKERR_SOCKSTATUS;
 800111c:	f06f 0306 	mvn.w	r3, #6
 8001120:	e057      	b.n	80011d2 <send+0x1fa>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <send+0x20c>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	fa42 f303 	asr.w	r3, r2, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <send+0x16a>
 8001136:	88ba      	ldrh	r2, [r7, #4]
 8001138:	89bb      	ldrh	r3, [r7, #12]
 800113a:	429a      	cmp	r2, r3
 800113c:	d901      	bls.n	8001142 <send+0x16a>
 800113e:	2300      	movs	r3, #0
 8001140:	e047      	b.n	80011d2 <send+0x1fa>
      if(len <= freesize) break;
 8001142:	88ba      	ldrh	r2, [r7, #4]
 8001144:	89bb      	ldrh	r3, [r7, #12]
 8001146:	429a      	cmp	r2, r3
 8001148:	d900      	bls.n	800114c <send+0x174>
      freesize = getSn_TX_FSR(sn);
 800114a:	e7cd      	b.n	80010e8 <send+0x110>
      if(len <= freesize) break;
 800114c:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800114e:	88ba      	ldrh	r2, [r7, #4]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fc01 	bl	800095c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <send+0x204>)
 800115e:	4413      	add	r3, r2
 8001160:	019b      	lsls	r3, r3, #6
 8001162:	3320      	adds	r3, #32
 8001164:	461a      	mov	r2, r3
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	b29b      	uxth	r3, r3
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f7ff fa88 	bl	8000684 <WIZCHIP_WRITE>
 8001174:	79fa      	ldrb	r2, [r7, #7]
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <send+0x204>)
 8001178:	4413      	add	r3, r2
 800117a:	019b      	lsls	r3, r3, #6
 800117c:	3322      	adds	r3, #34	; 0x22
 800117e:	461a      	mov	r2, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f7ff fa7d 	bl	8000684 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <send+0x204>)
 800118e:	4413      	add	r3, r2
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	3302      	adds	r3, #2
 8001194:	2120      	movs	r1, #32
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fa74 	bl	8000684 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800119c:	bf00      	nop
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <send+0x204>)
 80011a2:	4413      	add	r3, r2
 80011a4:	019b      	lsls	r3, r3, #6
 80011a6:	3302      	adds	r3, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fa89 	bl	80006c0 <WIZCHIP_READ>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f3      	bne.n	800119e <send+0x1c6>
   sock_is_sending |= (1 << sn);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2201      	movs	r2, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <send+0x208>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <send+0x208>)
 80011ce:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80011d0:	88bb      	ldrh	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	01a00008 	.word	0x01a00008
 80011e0:	240000ea 	.word	0x240000ea
 80011e4:	240000e8 	.word	0x240000e8

080011e8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b08      	cmp	r3, #8
 8001204:	d902      	bls.n	800120c <recv+0x24>
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e155      	b.n	80014b8 <recv+0x2d0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	4b9a      	ldr	r3, [pc, #616]	; (8001478 <recv+0x290>)
 8001210:	4413      	add	r3, r2
 8001212:	019b      	lsls	r3, r3, #6
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fa53 	bl	80006c0 <WIZCHIP_READ>
 800121a:	4603      	mov	r3, r0
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	2b01      	cmp	r3, #1
 8001222:	d002      	beq.n	800122a <recv+0x42>
 8001224:	f06f 0304 	mvn.w	r3, #4
 8001228:	e146      	b.n	80014b8 <recv+0x2d0>
   CHECK_SOCKDATA();
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <recv+0x4e>
 8001230:	f06f 030d 	mvn.w	r3, #13
 8001234:	e140      	b.n	80014b8 <recv+0x2d0>
   
   recvsize = getSn_RxMAX(sn);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fb03 	bl	8000844 <getRMSR>
 800123e:	4603      	mov	r3, r0
 8001240:	b29b      	uxth	r3, r3
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 8001246:	89fa      	ldrh	r2, [r7, #14]
 8001248:	88bb      	ldrh	r3, [r7, #4]
 800124a:	429a      	cmp	r2, r3
 800124c:	d201      	bcs.n	8001252 <recv+0x6a>
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4a89      	ldr	r2, [pc, #548]	; (800147c <recv+0x294>)
 8001256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d149      	bne.n	80012f2 <recv+0x10a>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fb45 	bl	80008f0 <getSn_RX_RSR>
 8001266:	4603      	mov	r3, r0
 8001268:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4b82      	ldr	r3, [pc, #520]	; (8001478 <recv+0x290>)
 800126e:	4413      	add	r3, r2
 8001270:	019b      	lsls	r3, r3, #6
 8001272:	3308      	adds	r3, #8
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fa23 	bl	80006c0 <WIZCHIP_READ>
 800127a:	4603      	mov	r3, r0
 800127c:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 800127e:	7b7b      	ldrb	r3, [r7, #13]
 8001280:	2b17      	cmp	r3, #23
 8001282:	d020      	beq.n	80012c6 <recv+0xde>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001284:	7b7b      	ldrb	r3, [r7, #13]
 8001286:	2b1c      	cmp	r3, #28
 8001288:	d116      	bne.n	80012b8 <recv+0xd0>
            {
               if(recvsize != 0) break;
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d12d      	bne.n	80012ec <recv+0x104>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fafe 	bl	8000894 <getSn_TX_FSR>
 8001298:	4604      	mov	r4, r0
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fa6b 	bl	8000778 <getTMSR>
 80012a2:	4603      	mov	r3, r0
 80012a4:	029b      	lsls	r3, r3, #10
 80012a6:	429c      	cmp	r4, r3
 80012a8:	d10d      	bne.n	80012c6 <recv+0xde>
               {
                  close(sn);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fcf7 	bl	8000ca0 <close>
                  return SOCKERR_SOCKSTATUS;
 80012b2:	f06f 0306 	mvn.w	r3, #6
 80012b6:	e0ff      	b.n	80014b8 <recv+0x2d0>
               }
            }
            else
            {
               close(sn);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fcf0 	bl	8000ca0 <close>
               return SOCKERR_SOCKSTATUS;
 80012c0:	f06f 0306 	mvn.w	r3, #6
 80012c4:	e0f8      	b.n	80014b8 <recv+0x2d0>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80012c6:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <recv+0x298>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	fa42 f303 	asr.w	r3, r2, r3
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <recv+0xfc>
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <recv+0xfc>
 80012e0:	2300      	movs	r3, #0
 80012e2:	e0e9      	b.n	80014b8 <recv+0x2d0>
         if(recvsize != 0) break;
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <recv+0x108>
         recvsize = getSn_RX_RSR(sn);
 80012ea:	e7b8      	b.n	800125e <recv+0x76>
               if(recvsize != 0) break;
 80012ec:	bf00      	nop
 80012ee:	e000      	b.n	80012f2 <recv+0x10a>
         if(recvsize != 0) break;
 80012f0:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a61      	ldr	r2, [pc, #388]	; (800147c <recv+0x294>)
 80012f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <recv+0x12e>
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <recv+0x290>)
 8001302:	4413      	add	r3, r2
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f9da 	bl	80006c0 <WIZCHIP_READ>
 800130c:	4603      	mov	r3, r0
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d035      	beq.n	8001382 <recv+0x19a>
   {
      mr = getMR();
 8001316:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <recv+0x290>)
 8001322:	4413      	add	r3, r2
 8001324:	019b      	lsls	r3, r3, #6
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f9ca 	bl	80006c0 <WIZCHIP_READ>
 800132c:	4603      	mov	r3, r0
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d120      	bne.n	8001378 <recv+0x190>
      {
         wiz_recv_data(sn,head,2);
 8001336:	f107 0108 	add.w	r1, r7, #8
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2202      	movs	r2, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb42 	bl	80009c8 <wiz_recv_data>
         if(mr & MR_FS)
 8001344:	897b      	ldrh	r3, [r7, #10]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d008      	beq.n	8001360 <recv+0x178>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 800134e:	7a7b      	ldrb	r3, [r7, #9]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	7a3b      	ldrb	r3, [r7, #8]
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21b      	sxth	r3, r3
 800135c:	81fb      	strh	r3, [r7, #14]
 800135e:	e007      	b.n	8001370 <recv+0x188>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 8001360:	7a3b      	ldrb	r3, [r7, #8]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	7a7b      	ldrb	r3, [r7, #9]
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21b      	sxth	r3, r3
 800136e:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4a44      	ldr	r2, [pc, #272]	; (8001484 <recv+0x29c>)
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4940      	ldr	r1, [pc, #256]	; (800147c <recv+0x294>)
 800137c:	89fa      	ldrh	r2, [r7, #14]
 800137e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4a3d      	ldr	r2, [pc, #244]	; (800147c <recv+0x294>)
 8001386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800138a:	88ba      	ldrh	r2, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	d904      	bls.n	800139a <recv+0x1b2>
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4a3a      	ldr	r2, [pc, #232]	; (800147c <recv+0x294>)
 8001394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001398:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4a38      	ldr	r2, [pc, #224]	; (8001484 <recv+0x29c>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01d      	beq.n	80013e8 <recv+0x200>
   {
      *buf = sock_remained_byte[sn];
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4a36      	ldr	r2, [pc, #216]	; (8001488 <recv+0x2a0>)
 80013b0:	5cd2      	ldrb	r2, [r2, r3]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	701a      	strb	r2, [r3, #0]
      buf++;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4a31      	ldr	r2, [pc, #196]	; (8001484 <recv+0x29c>)
 80013c0:	5cd2      	ldrb	r2, [r2, r3]
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f022 0202 	bic.w	r2, r2, #2
 80013c8:	b2d1      	uxtb	r1, r2
 80013ca:	4a2e      	ldr	r2, [pc, #184]	; (8001484 <recv+0x29c>)
 80013cc:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4a29      	ldr	r2, [pc, #164]	; (800147c <recv+0x294>)
 80013d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3a01      	subs	r2, #1
 80013e0:	b291      	uxth	r1, r2
 80013e2:	4a26      	ldr	r2, [pc, #152]	; (800147c <recv+0x294>)
 80013e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01b      	beq.n	8001426 <recv+0x23e>
   {
      wiz_recv_data(sn, buf, recvsize);
 80013ee:	89fa      	ldrh	r2, [r7, #14]
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fae7 	bl	80009c8 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 80013fa:	79fa      	ldrb	r2, [r7, #7]
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <recv+0x290>)
 80013fe:	4413      	add	r3, r2
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	3302      	adds	r3, #2
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f93c 	bl	8000684 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 800140c:	bf00      	nop
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <recv+0x290>)
 8001412:	4413      	add	r3, r2
 8001414:	019b      	lsls	r3, r3, #6
 8001416:	3302      	adds	r3, #2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f951 	bl	80006c0 <WIZCHIP_READ>
 800141e:	4603      	mov	r3, r0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f3      	bne.n	800140e <recv+0x226>
   }
   sock_remained_size[sn] -= recvsize;
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <recv+0x294>)
 800142a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	89fa      	ldrh	r2, [r7, #14]
 8001432:	1a8a      	subs	r2, r1, r2
 8001434:	b291      	uxth	r1, r2
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <recv+0x294>)
 8001438:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <recv+0x294>)
 8001440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d021      	beq.n	800148c <recv+0x2a4>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <recv+0x29c>)
 800144c:	5cd2      	ldrb	r2, [r2, r3]
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	b2d1      	uxtb	r1, r2
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <recv+0x29c>)
 8001458:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d017      	beq.n	8001494 <recv+0x2ac>
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <recv+0x29c>)
 8001468:	5cd2      	ldrb	r2, [r2, r3]
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f042 0202 	orr.w	r2, r2, #2
 8001470:	b2d1      	uxtb	r1, r2
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <recv+0x29c>)
 8001474:	54d1      	strb	r1, [r2, r3]
 8001476:	e00d      	b.n	8001494 <recv+0x2ac>
 8001478:	01a00008 	.word	0x01a00008
 800147c:	240000ec 	.word	0x240000ec
 8001480:	240000e8 	.word	0x240000e8
 8001484:	240000fc 	.word	0x240000fc
 8001488:	24000104 	.word	0x24000104
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <recv+0x2d8>)
 8001490:	2100      	movs	r1, #0
 8001492:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 8001494:	79fa      	ldrb	r2, [r7, #7]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <recv+0x2dc>)
 8001498:	4413      	add	r3, r2
 800149a:	019b      	lsls	r3, r3, #6
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f90f 	bl	80006c0 <WIZCHIP_READ>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <recv+0x2ce>
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <recv+0x2e0>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80014b6:	88bb      	ldrh	r3, [r7, #4]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	240000fc 	.word	0x240000fc
 80014c4:	01a00008 	.word	0x01a00008
 80014c8:	240000ec 	.word	0x240000ec

080014cc <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4603      	mov	r3, r0
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	4613      	mov	r3, r2
 80014dc:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d902      	bls.n	80014f2 <sendto+0x26>
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	e20a      	b.n	8001908 <sendto+0x43c>
   switch(getSn_MR(sn) & 0x0F)
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	4ba6      	ldr	r3, [pc, #664]	; (8001790 <sendto+0x2c4>)
 80014f6:	4413      	add	r3, r2
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f8e0 	bl	80006c0 <WIZCHIP_READ>
 8001500:	4603      	mov	r3, r0
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b02      	subs	r3, #2
 8001508:	2b02      	cmp	r3, #2
 800150a:	d902      	bls.n	8001512 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800150c:	f06f 0304 	mvn.w	r3, #4
 8001510:	e1fa      	b.n	8001908 <sendto+0x43c>
         break;
 8001512:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <sendto+0x54>
 800151a:	f06f 030d 	mvn.w	r3, #13
 800151e:	e1f3      	b.n	8001908 <sendto+0x43c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	3201      	adds	r2, #1
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4413      	add	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	3202      	adds	r2, #2
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	4413      	add	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	3203      	adds	r2, #3
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	4413      	add	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10e      	bne.n	8001574 <sendto+0xa8>
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	4b8d      	ldr	r3, [pc, #564]	; (8001790 <sendto+0x2c4>)
 800155a:	4413      	add	r3, r2
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f8ae 	bl	80006c0 <WIZCHIP_READ>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b04      	cmp	r3, #4
 800156c:	d002      	beq.n	8001574 <sendto+0xa8>
 800156e:	f06f 030b 	mvn.w	r3, #11
 8001572:	e1c9      	b.n	8001908 <sendto+0x43c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001574:	8c3b      	ldrh	r3, [r7, #32]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10e      	bne.n	8001598 <sendto+0xcc>
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <sendto+0x2c4>)
 800157e:	4413      	add	r3, r2
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff f89c 	bl	80006c0 <WIZCHIP_READ>
 8001588:	4603      	mov	r3, r0
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b04      	cmp	r3, #4
 8001590:	d002      	beq.n	8001598 <sendto+0xcc>
 8001592:	f06f 030a 	mvn.w	r3, #10
 8001596:	e1b7      	b.n	8001908 <sendto+0x43c>
   tmp = getSn_SR(sn);
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	4b7d      	ldr	r3, [pc, #500]	; (8001790 <sendto+0x2c4>)
 800159c:	4413      	add	r3, r2
 800159e:	019b      	lsls	r3, r3, #6
 80015a0:	3308      	adds	r3, #8
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f88c 	bl	80006c0 <WIZCHIP_READ>
 80015a8:	4603      	mov	r3, r0
 80015aa:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
 80015ae:	2b42      	cmp	r3, #66	; 0x42
 80015b0:	d008      	beq.n	80015c4 <sendto+0xf8>
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	2b22      	cmp	r3, #34	; 0x22
 80015b6:	d005      	beq.n	80015c4 <sendto+0xf8>
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b32      	cmp	r3, #50	; 0x32
 80015bc:	d002      	beq.n	80015c4 <sendto+0xf8>
 80015be:	f06f 0306 	mvn.w	r3, #6
 80015c2:	e1a1      	b.n	8001908 <sendto+0x43c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	4b72      	ldr	r3, [pc, #456]	; (8001790 <sendto+0x2c4>)
 80015c8:	4413      	add	r3, r2
 80015ca:	019b      	lsls	r3, r3, #6
 80015cc:	3314      	adds	r3, #20
 80015ce:	4618      	mov	r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3301      	adds	r3, #1
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff f84c 	bl	8000684 <WIZCHIP_WRITE>
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	4b68      	ldr	r3, [pc, #416]	; (8001790 <sendto+0x2c4>)
 80015f0:	4413      	add	r3, r2
 80015f2:	019b      	lsls	r3, r3, #6
 80015f4:	3316      	adds	r3, #22
 80015f6:	4618      	mov	r0, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3302      	adds	r3, #2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b29a      	uxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3303      	adds	r3, #3
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4413      	add	r3, r2
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff f837 	bl	8000684 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <sendto+0x2c4>)
 800161a:	4413      	add	r3, r2
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	3312      	adds	r3, #18
 8001620:	461a      	mov	r2, r3
 8001622:	8c3b      	ldrh	r3, [r7, #32]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff f82c 	bl	8000684 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f8a2 	bl	8000778 <getTMSR>
 8001634:	4603      	mov	r3, r0
 8001636:	b29b      	uxth	r3, r3
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800163c:	89ba      	ldrh	r2, [r7, #12]
 800163e:	8abb      	ldrh	r3, [r7, #20]
 8001640:	429a      	cmp	r2, r3
 8001642:	d901      	bls.n	8001648 <sendto+0x17c>
 8001644:	8abb      	ldrh	r3, [r7, #20]
 8001646:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f922 	bl	8000894 <getSn_TX_FSR>
 8001650:	4603      	mov	r3, r0
 8001652:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	4b4e      	ldr	r3, [pc, #312]	; (8001790 <sendto+0x2c4>)
 8001658:	4413      	add	r3, r2
 800165a:	019b      	lsls	r3, r3, #6
 800165c:	3308      	adds	r3, #8
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff f82e 	bl	80006c0 <WIZCHIP_READ>
 8001664:	4603      	mov	r3, r0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <sendto+0x1a6>
 800166c:	f06f 0303 	mvn.w	r3, #3
 8001670:	e14a      	b.n	8001908 <sendto+0x43c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001672:	4b48      	ldr	r3, [pc, #288]	; (8001794 <sendto+0x2c8>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	fa42 f303 	asr.w	r3, r2, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <sendto+0x1c6>
 8001686:	89ba      	ldrh	r2, [r7, #12]
 8001688:	8abb      	ldrh	r3, [r7, #20]
 800168a:	429a      	cmp	r2, r3
 800168c:	d901      	bls.n	8001692 <sendto+0x1c6>
 800168e:	2300      	movs	r3, #0
 8001690:	e13a      	b.n	8001908 <sendto+0x43c>
      if(len <= freesize) break;
 8001692:	89ba      	ldrh	r2, [r7, #12]
 8001694:	8abb      	ldrh	r3, [r7, #20]
 8001696:	429a      	cmp	r2, r3
 8001698:	d900      	bls.n	800169c <sendto+0x1d0>
      freesize = getSn_TX_FSR(sn);
 800169a:	e7d5      	b.n	8001648 <sendto+0x17c>
      if(len <= freesize) break;
 800169c:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800169e:	89ba      	ldrh	r2, [r7, #12]
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f959 	bl	800095c <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 80016aa:	483b      	ldr	r0, [pc, #236]	; (8001798 <sendto+0x2cc>)
 80016ac:	f7ff f808 	bl	80006c0 <WIZCHIP_READ>
 80016b0:	4603      	mov	r3, r0
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	4836      	ldr	r0, [pc, #216]	; (8001798 <sendto+0x2cc>)
 80016c0:	f7fe fffe 	bl	80006c0 <WIZCHIP_READ>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	4832      	ldr	r0, [pc, #200]	; (800179c <sendto+0x2d0>)
 80016d4:	f7fe fff4 	bl	80006c0 <WIZCHIP_READ>
 80016d8:	4603      	mov	r3, r0
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	3302      	adds	r3, #2
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	482c      	ldr	r0, [pc, #176]	; (800179c <sendto+0x2d0>)
 80016ea:	f7fe ffe9 	bl	80006c0 <WIZCHIP_READ>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	3303      	adds	r3, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d15a      	bne.n	80017b8 <sendto+0x2ec>
      {
         getSUBR((uint8_t*)&taddr);
 8001702:	4827      	ldr	r0, [pc, #156]	; (80017a0 <sendto+0x2d4>)
 8001704:	f7fe ffdc 	bl	80006c0 <WIZCHIP_READ>
 8001708:	4603      	mov	r3, r0
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	b29a      	uxth	r2, r3
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	4822      	ldr	r0, [pc, #136]	; (80017a0 <sendto+0x2d4>)
 8001718:	f7fe ffd2 	bl	80006c0 <WIZCHIP_READ>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	3301      	adds	r3, #1
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	481e      	ldr	r0, [pc, #120]	; (80017a4 <sendto+0x2d8>)
 800172c:	f7fe ffc8 	bl	80006c0 <WIZCHIP_READ>
 8001730:	4603      	mov	r3, r0
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29a      	uxth	r2, r3
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	3302      	adds	r3, #2
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	4818      	ldr	r0, [pc, #96]	; (80017a4 <sendto+0x2d8>)
 8001742:	f7fe ffbd 	bl	80006c0 <WIZCHIP_READ>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	3303      	adds	r3, #3
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <sendto+0x2dc>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <sendto+0x2e0>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	4413      	add	r3, r2
 8001766:	b29b      	uxth	r3, r3
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <sendto+0x2d4>)
 800176c:	f7fe ff8a 	bl	8000684 <WIZCHIP_WRITE>
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <sendto+0x2e4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b29b      	uxth	r3, r3
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <sendto+0x2e8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4413      	add	r3, r2
 8001782:	b29b      	uxth	r3, r3
 8001784:	4619      	mov	r1, r3
 8001786:	4807      	ldr	r0, [pc, #28]	; (80017a4 <sendto+0x2d8>)
 8001788:	f7fe ff7c 	bl	8000684 <WIZCHIP_WRITE>
 800178c:	e016      	b.n	80017bc <sendto+0x2f0>
 800178e:	bf00      	nop
 8001790:	01a00008 	.word	0x01a00008
 8001794:	240000e8 	.word	0x240000e8
 8001798:	68000018 	.word	0x68000018
 800179c:	6800001a 	.word	0x6800001a
 80017a0:	68000014 	.word	0x68000014
 80017a4:	68000016 	.word	0x68000016
 80017a8:	08008460 	.word	0x08008460
 80017ac:	08008461 	.word	0x08008461
 80017b0:	08008462 	.word	0x08008462
 80017b4:	08008463 	.word	0x08008463
      }
      else taddr = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	4b54      	ldr	r3, [pc, #336]	; (8001910 <sendto+0x444>)
 80017c0:	4413      	add	r3, r2
 80017c2:	019b      	lsls	r3, r3, #6
 80017c4:	3320      	adds	r3, #32
 80017c6:	461a      	mov	r2, r3
 80017c8:	89bb      	ldrh	r3, [r7, #12]
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f7fe ff57 	bl	8000684 <WIZCHIP_WRITE>
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <sendto+0x444>)
 80017da:	4413      	add	r3, r2
 80017dc:	019b      	lsls	r3, r3, #6
 80017de:	3322      	adds	r3, #34	; 0x22
 80017e0:	461a      	mov	r2, r3
 80017e2:	89bb      	ldrh	r3, [r7, #12]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4610      	mov	r0, r2
 80017e8:	f7fe ff4c 	bl	8000684 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	4b48      	ldr	r3, [pc, #288]	; (8001910 <sendto+0x444>)
 80017f0:	4413      	add	r3, r2
 80017f2:	019b      	lsls	r3, r3, #6
 80017f4:	3302      	adds	r3, #2
 80017f6:	2120      	movs	r1, #32
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe ff43 	bl	8000684 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80017fe:	bf00      	nop
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <sendto+0x444>)
 8001804:	4413      	add	r3, r2
 8001806:	019b      	lsls	r3, r3, #6
 8001808:	3302      	adds	r3, #2
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe ff58 	bl	80006c0 <WIZCHIP_READ>
 8001810:	4603      	mov	r3, r0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <sendto+0x334>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <sendto+0x444>)
 800181c:	4413      	add	r3, r2
 800181e:	019b      	lsls	r3, r3, #6
 8001820:	3306      	adds	r3, #6
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe ff4c 	bl	80006c0 <WIZCHIP_READ>
 8001828:	4603      	mov	r3, r0
 800182a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <sendto+0x386>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <sendto+0x444>)
 800183a:	4413      	add	r3, r2
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	3306      	adds	r3, #6
 8001840:	2110      	movs	r1, #16
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe ff1e 	bl	8000684 <WIZCHIP_WRITE>
         break;
 8001848:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d05a      	beq.n	8001906 <sendto+0x43a>
 8001850:	e036      	b.n	80018c0 <sendto+0x3f4>
      else if(tmp & Sn_IR_TIMEOUT)
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0dd      	beq.n	8001818 <sendto+0x34c>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <sendto+0x444>)
 8001860:	4413      	add	r3, r2
 8001862:	019b      	lsls	r3, r3, #6
 8001864:	3306      	adds	r3, #6
 8001866:	2108      	movs	r1, #8
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe ff0b 	bl	8000684 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d022      	beq.n	80018ba <sendto+0x3ee>
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b29a      	uxth	r2, r3
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	3301      	adds	r3, #1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4413      	add	r3, r2
 800188c:	b29b      	uxth	r3, r3
 800188e:	4619      	mov	r1, r3
 8001890:	4820      	ldr	r0, [pc, #128]	; (8001914 <sendto+0x448>)
 8001892:	f7fe fef7 	bl	8000684 <WIZCHIP_WRITE>
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	3302      	adds	r3, #2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	3303      	adds	r3, #3
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4619      	mov	r1, r3
 80018b4:	4818      	ldr	r0, [pc, #96]	; (8001918 <sendto+0x44c>)
 80018b6:	f7fe fee5 	bl	8000684 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80018ba:	f06f 030c 	mvn.w	r3, #12
 80018be:	e023      	b.n	8001908 <sendto+0x43c>
      if(taddr) setSUBR((uint8_t*)&taddr);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	3301      	adds	r3, #1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <sendto+0x448>)
 80018de:	f7fe fed1 	bl	8000684 <WIZCHIP_WRITE>
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	3302      	adds	r3, #2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	3303      	adds	r3, #3
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <sendto+0x44c>)
 8001902:	f7fe febf 	bl	8000684 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001906:	89bb      	ldrh	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	01a00008 	.word	0x01a00008
 8001914:	68000014 	.word	0x68000014
 8001918:	68000016 	.word	0x68000016

0800191c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	807b      	strh	r3, [r7, #2]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	801a      	strh	r2, [r3, #0]
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <reg_wizchip_bus_cbfunc>:
}

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8001996:	bf00      	nop
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <reg_wizchip_bus_cbfunc+0x4c>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f9      	beq.n	8001998 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <reg_wizchip_bus_cbfunc+0x24>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d106      	bne.n	80019be <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <reg_wizchip_bus_cbfunc+0x4c>)
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <reg_wizchip_bus_cbfunc+0x50>)
 80019b4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <reg_wizchip_bus_cbfunc+0x4c>)
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <reg_wizchip_bus_cbfunc+0x54>)
 80019ba:	621a      	str	r2, [r3, #32]
 80019bc:	e006      	b.n	80019cc <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <reg_wizchip_bus_cbfunc+0x4c>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <reg_wizchip_bus_cbfunc+0x4c>)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6213      	str	r3, [r2, #32]
   }
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	24000004 	.word	0x24000004
 80019dc:	08001955 	.word	0x08001955
 80019e0:	0800196f 	.word	0x0800196f

080019e4 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d863      	bhi.n	8001ac6 <ctlwizchip+0xe2>
 80019fe:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <ctlwizchip+0x20>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a29 	.word	0x08001a29
 8001a08:	08001a2f 	.word	0x08001a2f
 8001a0c:	08001a5b 	.word	0x08001a5b
 8001a10:	08001a4f 	.word	0x08001a4f
 8001a14:	08001a69 	.word	0x08001a69
 8001a18:	08001a75 	.word	0x08001a75
 8001a1c:	08001ac7 	.word	0x08001ac7
 8001a20:	08001ac7 	.word	0x08001ac7
 8001a24:	08001a83 	.word	0x08001a83
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001a28:	f000 f896 	bl	8001b58 <wizchip_sw_reset>
         break;
 8001a2c:	e04e      	b.n	8001acc <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f98f 	bl	8001d68 <wizchip_init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	e03f      	b.n	8001ace <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fa1e 	bl	8001e94 <wizchip_clrinterrupt>
         break;
 8001a58:	e038      	b.n	8001acc <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001a5a:	f000 fa3f 	bl	8001edc <wizchip_getinterrupt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	801a      	strh	r2, [r3, #0]
         break;
 8001a66:	e031      	b.n	8001acc <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fa5b 	bl	8001f28 <wizchip_setinterruptmask>
         break;         
 8001a72:	e02b      	b.n	8001acc <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001a74:	f000 fa7c 	bl	8001f70 <wizchip_getinterruptmask>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	801a      	strh	r2, [r3, #0]
         break;
 8001a80:	e024      	b.n	8001acc <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <ctlwizchip+0xf4>)
 8001a84:	789a      	ldrb	r2, [r3, #2]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <ctlwizchip+0xf4>)
 8001a90:	78d2      	ldrb	r2, [r2, #3]
 8001a92:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	3302      	adds	r3, #2
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <ctlwizchip+0xf4>)
 8001a9a:	7912      	ldrb	r2, [r2, #4]
 8001a9c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3303      	adds	r3, #3
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <ctlwizchip+0xf4>)
 8001aa4:	7952      	ldrb	r2, [r2, #5]
 8001aa6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <ctlwizchip+0xf4>)
 8001aae:	7992      	ldrb	r2, [r2, #6]
 8001ab0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	3305      	adds	r3, #5
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <ctlwizchip+0xf4>)
 8001ab8:	79d2      	ldrb	r2, [r2, #7]
 8001aba:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	3306      	adds	r3, #6
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
         break;
 8001ac4:	e002      	b.n	8001acc <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e000      	b.n	8001ace <ctlwizchip+0xea>
   }
   return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	24000004 	.word	0x24000004

08001adc <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d82c      	bhi.n	8001b48 <ctlnetwork+0x6c>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <ctlnetwork+0x18>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b0d 	.word	0x08001b0d
 8001af8:	08001b15 	.word	0x08001b15
 8001afc:	08001b1d 	.word	0x08001b1d
 8001b00:	08001b2b 	.word	0x08001b2b
 8001b04:	08001b39 	.word	0x08001b39
 8001b08:	08001b41 	.word	0x08001b41
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f000 fa59 	bl	8001fc4 <wizchip_setnetinfo>
         break;
 8001b12:	e01c      	b.n	8001b4e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f000 fb05 	bl	8002124 <wizchip_getnetinfo>
         break;
 8001b1a:	e018      	b.n	8001b4e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fbc1 	bl	80022a8 <wizchip_setnetmode>
 8001b26:	4603      	mov	r3, r0
 8001b28:	e012      	b.n	8001b50 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001b2a:	f000 fbe0 	bl	80022ee <wizchip_getnetmode>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	701a      	strb	r2, [r3, #0]
         break;
 8001b36:	e00a      	b.n	8001b4e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f000 fbe3 	bl	8002304 <wizchip_settimeout>
         break;
 8001b3e:	e006      	b.n	8001b4e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001b40:	6838      	ldr	r0, [r7, #0]
 8001b42:	f000 fbf9 	bl	8002338 <wizchip_gettimeout>
         break;
 8001b46:	e002      	b.n	8001b4e <ctlnetwork+0x72>
      default:
         return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4c:	e000      	b.n	8001b50 <ctlnetwork+0x74>
   }
   return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001b5e:	4879      	ldr	r0, [pc, #484]	; (8001d44 <wizchip_sw_reset+0x1ec>)
 8001b60:	f7fe fdae 	bl	80006c0 <WIZCHIP_READ>
 8001b64:	4603      	mov	r3, r0
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	713b      	strb	r3, [r7, #4]
 8001b6e:	4875      	ldr	r0, [pc, #468]	; (8001d44 <wizchip_sw_reset+0x1ec>)
 8001b70:	f7fe fda6 	bl	80006c0 <WIZCHIP_READ>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	717b      	strb	r3, [r7, #5]
 8001b7a:	4873      	ldr	r0, [pc, #460]	; (8001d48 <wizchip_sw_reset+0x1f0>)
 8001b7c:	f7fe fda0 	bl	80006c0 <WIZCHIP_READ>
 8001b80:	4603      	mov	r3, r0
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	71bb      	strb	r3, [r7, #6]
 8001b8a:	486f      	ldr	r0, [pc, #444]	; (8001d48 <wizchip_sw_reset+0x1f0>)
 8001b8c:	f7fe fd98 	bl	80006c0 <WIZCHIP_READ>
 8001b90:	4603      	mov	r3, r0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	486d      	ldr	r0, [pc, #436]	; (8001d4c <wizchip_sw_reset+0x1f4>)
 8001b98:	f7fe fd92 	bl	80006c0 <WIZCHIP_READ>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	723b      	strb	r3, [r7, #8]
 8001ba6:	4869      	ldr	r0, [pc, #420]	; (8001d4c <wizchip_sw_reset+0x1f4>)
 8001ba8:	f7fe fd8a 	bl	80006c0 <WIZCHIP_READ>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001bb2:	4867      	ldr	r0, [pc, #412]	; (8001d50 <wizchip_sw_reset+0x1f8>)
 8001bb4:	f7fe fd84 	bl	80006c0 <WIZCHIP_READ>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	753b      	strb	r3, [r7, #20]
 8001bc2:	4863      	ldr	r0, [pc, #396]	; (8001d50 <wizchip_sw_reset+0x1f8>)
 8001bc4:	f7fe fd7c 	bl	80006c0 <WIZCHIP_READ>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	757b      	strb	r3, [r7, #21]
 8001bce:	4861      	ldr	r0, [pc, #388]	; (8001d54 <wizchip_sw_reset+0x1fc>)
 8001bd0:	f7fe fd76 	bl	80006c0 <WIZCHIP_READ>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	75bb      	strb	r3, [r7, #22]
 8001bde:	485d      	ldr	r0, [pc, #372]	; (8001d54 <wizchip_sw_reset+0x1fc>)
 8001be0:	f7fe fd6e 	bl	80006c0 <WIZCHIP_READ>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	75fb      	strb	r3, [r7, #23]
 8001bea:	485b      	ldr	r0, [pc, #364]	; (8001d58 <wizchip_sw_reset+0x200>)
 8001bec:	f7fe fd68 	bl	80006c0 <WIZCHIP_READ>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	743b      	strb	r3, [r7, #16]
 8001bfa:	4857      	ldr	r0, [pc, #348]	; (8001d58 <wizchip_sw_reset+0x200>)
 8001bfc:	f7fe fd60 	bl	80006c0 <WIZCHIP_READ>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	747b      	strb	r3, [r7, #17]
 8001c06:	4855      	ldr	r0, [pc, #340]	; (8001d5c <wizchip_sw_reset+0x204>)
 8001c08:	f7fe fd5a 	bl	80006c0 <WIZCHIP_READ>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	74bb      	strb	r3, [r7, #18]
 8001c16:	4851      	ldr	r0, [pc, #324]	; (8001d5c <wizchip_sw_reset+0x204>)
 8001c18:	f7fe fd52 	bl	80006c0 <WIZCHIP_READ>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	74fb      	strb	r3, [r7, #19]
 8001c22:	484f      	ldr	r0, [pc, #316]	; (8001d60 <wizchip_sw_reset+0x208>)
 8001c24:	f7fe fd4c 	bl	80006c0 <WIZCHIP_READ>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	733b      	strb	r3, [r7, #12]
 8001c32:	484b      	ldr	r0, [pc, #300]	; (8001d60 <wizchip_sw_reset+0x208>)
 8001c34:	f7fe fd44 	bl	80006c0 <WIZCHIP_READ>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	737b      	strb	r3, [r7, #13]
 8001c3e:	4849      	ldr	r0, [pc, #292]	; (8001d64 <wizchip_sw_reset+0x20c>)
 8001c40:	f7fe fd3e 	bl	80006c0 <WIZCHIP_READ>
 8001c44:	4603      	mov	r3, r0
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73bb      	strb	r3, [r7, #14]
 8001c4e:	4845      	ldr	r0, [pc, #276]	; (8001d64 <wizchip_sw_reset+0x20c>)
 8001c50:	f7fe fd36 	bl	80006c0 <WIZCHIP_READ>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8001c5a:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	801a      	strh	r2, [r3, #0]
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001c62:	793b      	ldrb	r3, [r7, #4]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	797b      	ldrb	r3, [r7, #5]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	4833      	ldr	r0, [pc, #204]	; (8001d44 <wizchip_sw_reset+0x1ec>)
 8001c76:	f7fe fd05 	bl	8000684 <WIZCHIP_WRITE>
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482e      	ldr	r0, [pc, #184]	; (8001d48 <wizchip_sw_reset+0x1f0>)
 8001c8e:	f7fe fcf9 	bl	8000684 <WIZCHIP_WRITE>
 8001c92:	7a3b      	ldrb	r3, [r7, #8]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	7a7b      	ldrb	r3, [r7, #9]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4829      	ldr	r0, [pc, #164]	; (8001d4c <wizchip_sw_reset+0x1f4>)
 8001ca6:	f7fe fced 	bl	8000684 <WIZCHIP_WRITE>
   setGAR(gw);
 8001caa:	7d3b      	ldrb	r3, [r7, #20]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	7d7b      	ldrb	r3, [r7, #21]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4824      	ldr	r0, [pc, #144]	; (8001d50 <wizchip_sw_reset+0x1f8>)
 8001cbe:	f7fe fce1 	bl	8000684 <WIZCHIP_WRITE>
 8001cc2:	7dbb      	ldrb	r3, [r7, #22]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481f      	ldr	r0, [pc, #124]	; (8001d54 <wizchip_sw_reset+0x1fc>)
 8001cd6:	f7fe fcd5 	bl	8000684 <WIZCHIP_WRITE>
   setSUBR(sn);
 8001cda:	7c3b      	ldrb	r3, [r7, #16]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	7c7b      	ldrb	r3, [r7, #17]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	481a      	ldr	r0, [pc, #104]	; (8001d58 <wizchip_sw_reset+0x200>)
 8001cee:	f7fe fcc9 	bl	8000684 <WIZCHIP_WRITE>
 8001cf2:	7cbb      	ldrb	r3, [r7, #18]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	7cfb      	ldrb	r3, [r7, #19]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4619      	mov	r1, r3
 8001d04:	4815      	ldr	r0, [pc, #84]	; (8001d5c <wizchip_sw_reset+0x204>)
 8001d06:	f7fe fcbd 	bl	8000684 <WIZCHIP_WRITE>
   setSIPR(sip);
 8001d0a:	7b3b      	ldrb	r3, [r7, #12]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	7b7b      	ldrb	r3, [r7, #13]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4810      	ldr	r0, [pc, #64]	; (8001d60 <wizchip_sw_reset+0x208>)
 8001d1e:	f7fe fcb1 	bl	8000684 <WIZCHIP_WRITE>
 8001d22:	7bbb      	ldrb	r3, [r7, #14]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <wizchip_sw_reset+0x20c>)
 8001d36:	f7fe fca5 	bl	8000684 <WIZCHIP_WRITE>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	68000008 	.word	0x68000008
 8001d48:	6800000a 	.word	0x6800000a
 8001d4c:	6800000c 	.word	0x6800000c
 8001d50:	68000010 	.word	0x68000010
 8001d54:	68000012 	.word	0x68000012
 8001d58:	68000014 	.word	0x68000014
 8001d5c:	68000016 	.word	0x68000016
 8001d60:	68000018 	.word	0x68000018
 8001d64:	6800001a 	.word	0x6800001a

08001d68 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001d76:	f7ff feef 	bl	8001b58 <wizchip_sw_reset>
   if(txsize)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d040      	beq.n	8001e02 <wizchip_init+0x9a>
   {
      tmp = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73bb      	strb	r3, [r7, #14]
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e018      	b.n	8001dbc <wizchip_init+0x54>
		{
			if(txsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d902      	bls.n	8001d9e <wizchip_init+0x36>
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	e076      	b.n	8001e8c <wizchip_init+0x124>
			tmp += txsize[i];
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	4413      	add	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	dde2      	ble.n	8001d8a <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8001dc4:	7bbb      	ldrb	r3, [r7, #14]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <wizchip_init+0x6e>
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	e05a      	b.n	8001e8c <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e00e      	b.n	8001dfa <wizchip_init+0x92>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001ddc:	7bf8      	ldrb	r0, [r7, #15]
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fc87 	bl	80006fc <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	2b07      	cmp	r3, #7
 8001e00:	ddec      	ble.n	8001ddc <wizchip_init+0x74>
#endif
		}	
   }

   if(rxsize)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d040      	beq.n	8001e8a <wizchip_init+0x122>
   {
      tmp = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e018      	b.n	8001e44 <wizchip_init+0xdc>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d902      	bls.n	8001e26 <wizchip_init+0xbe>
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	e032      	b.n	8001e8c <wizchip_init+0x124>
			tmp += rxsize[i];
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	7bbb      	ldrb	r3, [r7, #14]
 8001e32:	4413      	add	r3, r2
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e48:	2b07      	cmp	r3, #7
 8001e4a:	dde2      	ble.n	8001e12 <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <wizchip_init+0xf6>
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	e016      	b.n	8001e8c <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e00e      	b.n	8001e82 <wizchip_init+0x11a>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001e64:	7bf8      	ldrb	r0, [r7, #15]
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f7fe fca9 	bl	80007c8 <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	2b07      	cmp	r3, #7
 8001e88:	ddec      	ble.n	8001e64 <wizchip_init+0xfc>
#endif
		}
   }
   return 0;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f043 0310 	orr.w	r3, r3, #16
 8001eb0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <wizchip_clrinterrupt+0x44>)
 8001ecc:	f7fe fbda 	bl	8000684 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	68000002 	.word	0x68000002

08001edc <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <wizchip_getinterrupt+0x48>)
 8001ef0:	f7fe fbe6 	bl	80006c0 <WIZCHIP_READ>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001efa:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 8001efc:	88bb      	ldrh	r3, [r7, #4]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 8001f04:	88bb      	ldrh	r3, [r7, #4]
 8001f06:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8001f0c:	88bb      	ldrh	r3, [r7, #4]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001f1a:	88bb      	ldrh	r3, [r7, #4]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	68000002 	.word	0x68000002

08001f28 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	f023 0310 	bic.w	r3, r3, #16
 8001f44:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <wizchip_setinterruptmask+0x44>)
 8001f60:	f7fe fb90 	bl	8000684 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	68000004 	.word	0x68000004

08001f70 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8001f82:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <wizchip_getinterruptmask+0x50>)
 8001f84:	f7fe fb9c 	bl	80006c0 <WIZCHIP_READ>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f8e:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8001f90:	88bb      	ldrh	r3, [r7, #4]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8001f98:	88bb      	ldrh	r3, [r7, #4]
 8001f9a:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f023 0310 	bic.w	r3, r3, #16
 8001fa2:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001fb6:	88bb      	ldrh	r3, [r7, #4]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	68000004 	.word	0x68000004

08001fc4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	785b      	ldrb	r3, [r3, #1]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4845      	ldr	r0, [pc, #276]	; (80020f8 <wizchip_setnetinfo+0x134>)
 8001fe4:	f7fe fb4e 	bl	8000684 <WIZCHIP_WRITE>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	789b      	ldrb	r3, [r3, #2]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	483f      	ldr	r0, [pc, #252]	; (80020fc <wizchip_setnetinfo+0x138>)
 8002000:	f7fe fb40 	bl	8000684 <WIZCHIP_WRITE>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	b29b      	uxth	r3, r3
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	795b      	ldrb	r3, [r3, #5]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4413      	add	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	4619      	mov	r1, r3
 800201a:	4839      	ldr	r0, [pc, #228]	; (8002100 <wizchip_setnetinfo+0x13c>)
 800201c:	f7fe fb32 	bl	8000684 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7b9b      	ldrb	r3, [r3, #14]
 8002024:	b29b      	uxth	r3, r3
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7bdb      	ldrb	r3, [r3, #15]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4413      	add	r3, r2
 8002032:	b29b      	uxth	r3, r3
 8002034:	4619      	mov	r1, r3
 8002036:	4833      	ldr	r0, [pc, #204]	; (8002104 <wizchip_setnetinfo+0x140>)
 8002038:	f7fe fb24 	bl	8000684 <WIZCHIP_WRITE>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7c1b      	ldrb	r3, [r3, #16]
 8002040:	b29b      	uxth	r3, r3
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7c5b      	ldrb	r3, [r3, #17]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4413      	add	r3, r2
 800204e:	b29b      	uxth	r3, r3
 8002050:	4619      	mov	r1, r3
 8002052:	482d      	ldr	r0, [pc, #180]	; (8002108 <wizchip_setnetinfo+0x144>)
 8002054:	f7fe fb16 	bl	8000684 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7a9b      	ldrb	r3, [r3, #10]
 800205c:	b29b      	uxth	r3, r3
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7adb      	ldrb	r3, [r3, #11]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4413      	add	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	4619      	mov	r1, r3
 800206e:	4827      	ldr	r0, [pc, #156]	; (800210c <wizchip_setnetinfo+0x148>)
 8002070:	f7fe fb08 	bl	8000684 <WIZCHIP_WRITE>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7b1b      	ldrb	r3, [r3, #12]
 8002078:	b29b      	uxth	r3, r3
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7b5b      	ldrb	r3, [r3, #13]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	4619      	mov	r1, r3
 800208a:	4821      	ldr	r0, [pc, #132]	; (8002110 <wizchip_setnetinfo+0x14c>)
 800208c:	f7fe fafa 	bl	8000684 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	799b      	ldrb	r3, [r3, #6]
 8002094:	b29b      	uxth	r3, r3
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	79db      	ldrb	r3, [r3, #7]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	481b      	ldr	r0, [pc, #108]	; (8002114 <wizchip_setnetinfo+0x150>)
 80020a8:	f7fe faec 	bl	8000684 <WIZCHIP_WRITE>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7a1b      	ldrb	r3, [r3, #8]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7a5b      	ldrb	r3, [r3, #9]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4413      	add	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4619      	mov	r1, r3
 80020c2:	4815      	ldr	r0, [pc, #84]	; (8002118 <wizchip_setnetinfo+0x154>)
 80020c4:	f7fe fade 	bl	8000684 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7c9a      	ldrb	r2, [r3, #18]
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <wizchip_setnetinfo+0x158>)
 80020ce:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7cda      	ldrb	r2, [r3, #19]
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <wizchip_setnetinfo+0x158>)
 80020d6:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7d1a      	ldrb	r2, [r3, #20]
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <wizchip_setnetinfo+0x158>)
 80020de:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7d5a      	ldrb	r2, [r3, #21]
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <wizchip_setnetinfo+0x158>)
 80020e6:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7d9a      	ldrb	r2, [r3, #22]
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <wizchip_setnetinfo+0x15c>)
 80020ee:	701a      	strb	r2, [r3, #0]
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	68000008 	.word	0x68000008
 80020fc:	6800000a 	.word	0x6800000a
 8002100:	6800000c 	.word	0x6800000c
 8002104:	68000010 	.word	0x68000010
 8002108:	68000012 	.word	0x68000012
 800210c:	68000014 	.word	0x68000014
 8002110:	68000016 	.word	0x68000016
 8002114:	68000018 	.word	0x68000018
 8002118:	6800001a 	.word	0x6800001a
 800211c:	2400010c 	.word	0x2400010c
 8002120:	24000110 	.word	0x24000110

08002124 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800212c:	4853      	ldr	r0, [pc, #332]	; (800227c <wizchip_getnetinfo+0x158>)
 800212e:	f7fe fac7 	bl	80006c0 <WIZCHIP_READ>
 8002132:	4603      	mov	r3, r0
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	b29b      	uxth	r3, r3
 8002138:	b2da      	uxtb	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	484f      	ldr	r0, [pc, #316]	; (800227c <wizchip_getnetinfo+0x158>)
 8002140:	f7fe fabe 	bl	80006c0 <WIZCHIP_READ>
 8002144:	4603      	mov	r3, r0
 8002146:	b2da      	uxtb	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	705a      	strb	r2, [r3, #1]
 800214c:	484c      	ldr	r0, [pc, #304]	; (8002280 <wizchip_getnetinfo+0x15c>)
 800214e:	f7fe fab7 	bl	80006c0 <WIZCHIP_READ>
 8002152:	4603      	mov	r3, r0
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	b29b      	uxth	r3, r3
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	709a      	strb	r2, [r3, #2]
 800215e:	4848      	ldr	r0, [pc, #288]	; (8002280 <wizchip_getnetinfo+0x15c>)
 8002160:	f7fe faae 	bl	80006c0 <WIZCHIP_READ>
 8002164:	4603      	mov	r3, r0
 8002166:	b2da      	uxtb	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	70da      	strb	r2, [r3, #3]
 800216c:	4845      	ldr	r0, [pc, #276]	; (8002284 <wizchip_getnetinfo+0x160>)
 800216e:	f7fe faa7 	bl	80006c0 <WIZCHIP_READ>
 8002172:	4603      	mov	r3, r0
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	b29b      	uxth	r3, r3
 8002178:	b2da      	uxtb	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	711a      	strb	r2, [r3, #4]
 800217e:	4841      	ldr	r0, [pc, #260]	; (8002284 <wizchip_getnetinfo+0x160>)
 8002180:	f7fe fa9e 	bl	80006c0 <WIZCHIP_READ>
 8002184:	4603      	mov	r3, r0
 8002186:	b2da      	uxtb	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 800218c:	483e      	ldr	r0, [pc, #248]	; (8002288 <wizchip_getnetinfo+0x164>)
 800218e:	f7fe fa97 	bl	80006c0 <WIZCHIP_READ>
 8002192:	4603      	mov	r3, r0
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	b29b      	uxth	r3, r3
 8002198:	b2da      	uxtb	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	739a      	strb	r2, [r3, #14]
 800219e:	483a      	ldr	r0, [pc, #232]	; (8002288 <wizchip_getnetinfo+0x164>)
 80021a0:	f7fe fa8e 	bl	80006c0 <WIZCHIP_READ>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	73da      	strb	r2, [r3, #15]
 80021ac:	4837      	ldr	r0, [pc, #220]	; (800228c <wizchip_getnetinfo+0x168>)
 80021ae:	f7fe fa87 	bl	80006c0 <WIZCHIP_READ>
 80021b2:	4603      	mov	r3, r0
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	741a      	strb	r2, [r3, #16]
 80021be:	4833      	ldr	r0, [pc, #204]	; (800228c <wizchip_getnetinfo+0x168>)
 80021c0:	f7fe fa7e 	bl	80006c0 <WIZCHIP_READ>
 80021c4:	4603      	mov	r3, r0
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 80021cc:	4830      	ldr	r0, [pc, #192]	; (8002290 <wizchip_getnetinfo+0x16c>)
 80021ce:	f7fe fa77 	bl	80006c0 <WIZCHIP_READ>
 80021d2:	4603      	mov	r3, r0
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	729a      	strb	r2, [r3, #10]
 80021de:	482c      	ldr	r0, [pc, #176]	; (8002290 <wizchip_getnetinfo+0x16c>)
 80021e0:	f7fe fa6e 	bl	80006c0 <WIZCHIP_READ>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	72da      	strb	r2, [r3, #11]
 80021ec:	4829      	ldr	r0, [pc, #164]	; (8002294 <wizchip_getnetinfo+0x170>)
 80021ee:	f7fe fa67 	bl	80006c0 <WIZCHIP_READ>
 80021f2:	4603      	mov	r3, r0
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	731a      	strb	r2, [r3, #12]
 80021fe:	4825      	ldr	r0, [pc, #148]	; (8002294 <wizchip_getnetinfo+0x170>)
 8002200:	f7fe fa5e 	bl	80006c0 <WIZCHIP_READ>
 8002204:	4603      	mov	r3, r0
 8002206:	b2da      	uxtb	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 800220c:	4822      	ldr	r0, [pc, #136]	; (8002298 <wizchip_getnetinfo+0x174>)
 800220e:	f7fe fa57 	bl	80006c0 <WIZCHIP_READ>
 8002212:	4603      	mov	r3, r0
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	b29b      	uxth	r3, r3
 8002218:	b2da      	uxtb	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	719a      	strb	r2, [r3, #6]
 800221e:	481e      	ldr	r0, [pc, #120]	; (8002298 <wizchip_getnetinfo+0x174>)
 8002220:	f7fe fa4e 	bl	80006c0 <WIZCHIP_READ>
 8002224:	4603      	mov	r3, r0
 8002226:	b2da      	uxtb	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	71da      	strb	r2, [r3, #7]
 800222c:	481b      	ldr	r0, [pc, #108]	; (800229c <wizchip_getnetinfo+0x178>)
 800222e:	f7fe fa47 	bl	80006c0 <WIZCHIP_READ>
 8002232:	4603      	mov	r3, r0
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	b29b      	uxth	r3, r3
 8002238:	b2da      	uxtb	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	721a      	strb	r2, [r3, #8]
 800223e:	4817      	ldr	r0, [pc, #92]	; (800229c <wizchip_getnetinfo+0x178>)
 8002240:	f7fe fa3e 	bl	80006c0 <WIZCHIP_READ>
 8002244:	4603      	mov	r3, r0
 8002246:	b2da      	uxtb	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <wizchip_getnetinfo+0x17c>)
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <wizchip_getnetinfo+0x17c>)
 8002256:	785a      	ldrb	r2, [r3, #1]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <wizchip_getnetinfo+0x17c>)
 800225e:	789a      	ldrb	r2, [r3, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <wizchip_getnetinfo+0x17c>)
 8002266:	78da      	ldrb	r2, [r3, #3]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <wizchip_getnetinfo+0x180>)
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	759a      	strb	r2, [r3, #22]
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	68000008 	.word	0x68000008
 8002280:	6800000a 	.word	0x6800000a
 8002284:	6800000c 	.word	0x6800000c
 8002288:	68000010 	.word	0x68000010
 800228c:	68000012 	.word	0x68000012
 8002290:	68000014 	.word	0x68000014
 8002294:	68000016 	.word	0x68000016
 8002298:	68000018 	.word	0x68000018
 800229c:	6800001a 	.word	0x6800001a
 80022a0:	2400010c 	.word	0x2400010c
 80022a4:	24000110 	.word	0x24000110

080022a8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <wizchip_setnetmode+0x1e>
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	e00d      	b.n	80022e2 <wizchip_setnetmode+0x3a>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 80022c6:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80022d6:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	b292      	uxth	r2, r2
 80022de:	801a      	strh	r2, [r3, #0]
   return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80022f2:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	4619      	mov	r1, r3
 8002314:	4806      	ldr	r0, [pc, #24]	; (8002330 <wizchip_settimeout+0x2c>)
 8002316:	f7fe f9b5 	bl	8000684 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	885b      	ldrh	r3, [r3, #2]
 800231e:	4619      	mov	r1, r3
 8002320:	4804      	ldr	r0, [pc, #16]	; (8002334 <wizchip_settimeout+0x30>)
 8002322:	f7fe f9af 	bl	8000684 <WIZCHIP_WRITE>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	6800001e 	.word	0x6800001e
 8002334:	6800001c 	.word	0x6800001c

08002338 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <wizchip_gettimeout+0x2c>)
 8002342:	f7fe f9bd 	bl	80006c0 <WIZCHIP_READ>
 8002346:	4603      	mov	r3, r0
 8002348:	b2da      	uxtb	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800234e:	4806      	ldr	r0, [pc, #24]	; (8002368 <wizchip_gettimeout+0x30>)
 8002350:	f7fe f9b6 	bl	80006c0 <WIZCHIP_READ>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	805a      	strh	r2, [r3, #2]
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	6800001e 	.word	0x6800001e
 8002368:	6800001c 	.word	0x6800001c

0800236c <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af04      	add	r7, sp, #16
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
 8002378:	4613      	mov	r3, r2
 800237a:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 800237c:	2300      	movs	r3, #0
 800237e:	82fb      	strh	r3, [r7, #22]
 8002380:	2300      	movs	r3, #0
 8002382:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8002384:	79fa      	ldrb	r2, [r7, #7]
 8002386:	4b94      	ldr	r3, [pc, #592]	; (80025d8 <loopback_tcps+0x26c>)
 8002388:	4413      	add	r3, r2
 800238a:	019b      	lsls	r3, r3, #6
 800238c:	3308      	adds	r3, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f996 	bl	80006c0 <WIZCHIP_READ>
 8002394:	4603      	mov	r3, r0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b1c      	cmp	r3, #28
 800239a:	f200 8110 	bhi.w	80025be <loopback_tcps+0x252>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <loopback_tcps+0x38>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080025a3 	.word	0x080025a3
 80023a8:	080025bf 	.word	0x080025bf
 80023ac:	080025bf 	.word	0x080025bf
 80023b0:	080025bf 	.word	0x080025bf
 80023b4:	080025bf 	.word	0x080025bf
 80023b8:	080025bf 	.word	0x080025bf
 80023bc:	080025bf 	.word	0x080025bf
 80023c0:	080025bf 	.word	0x080025bf
 80023c4:	080025bf 	.word	0x080025bf
 80023c8:	080025bf 	.word	0x080025bf
 80023cc:	080025bf 	.word	0x080025bf
 80023d0:	080025bf 	.word	0x080025bf
 80023d4:	080025bf 	.word	0x080025bf
 80023d8:	080025bf 	.word	0x080025bf
 80023dc:	080025bf 	.word	0x080025bf
 80023e0:	080025bf 	.word	0x080025bf
 80023e4:	080025bf 	.word	0x080025bf
 80023e8:	080025bf 	.word	0x080025bf
 80023ec:	080025bf 	.word	0x080025bf
 80023f0:	08002581 	.word	0x08002581
 80023f4:	080025bf 	.word	0x080025bf
 80023f8:	080025bf 	.word	0x080025bf
 80023fc:	080025bf 	.word	0x080025bf
 8002400:	08002419 	.word	0x08002419
 8002404:	080025bf 	.word	0x080025bf
 8002408:	080025bf 	.word	0x080025bf
 800240c:	080025bf 	.word	0x080025bf
 8002410:	080025bf 	.word	0x080025bf
 8002414:	0800255f 	.word	0x0800255f
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8002418:	79fa      	ldrb	r2, [r7, #7]
 800241a:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <loopback_tcps+0x26c>)
 800241c:	4413      	add	r3, r2
 800241e:	019b      	lsls	r3, r3, #6
 8002420:	3306      	adds	r3, #6
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f94c 	bl	80006c0 <WIZCHIP_READ>
 8002428:	4603      	mov	r3, r0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d054      	beq.n	80024de <loopback_tcps+0x172>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 8002434:	79fa      	ldrb	r2, [r7, #7]
 8002436:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <loopback_tcps+0x26c>)
 8002438:	4413      	add	r3, r2
 800243a:	019b      	lsls	r3, r3, #6
 800243c:	3314      	adds	r3, #20
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f93e 	bl	80006c0 <WIZCHIP_READ>
 8002444:	4603      	mov	r3, r0
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	723b      	strb	r3, [r7, #8]
 800244e:	79fa      	ldrb	r2, [r7, #7]
 8002450:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <loopback_tcps+0x26c>)
 8002452:	4413      	add	r3, r2
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	3314      	adds	r3, #20
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f931 	bl	80006c0 <WIZCHIP_READ>
 800245e:	4603      	mov	r3, r0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	727b      	strb	r3, [r7, #9]
 8002464:	79fa      	ldrb	r2, [r7, #7]
 8002466:	4b5c      	ldr	r3, [pc, #368]	; (80025d8 <loopback_tcps+0x26c>)
 8002468:	4413      	add	r3, r2
 800246a:	019b      	lsls	r3, r3, #6
 800246c:	3316      	adds	r3, #22
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f926 	bl	80006c0 <WIZCHIP_READ>
 8002474:	4603      	mov	r3, r0
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	b29b      	uxth	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	72bb      	strb	r3, [r7, #10]
 800247e:	79fa      	ldrb	r2, [r7, #7]
 8002480:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <loopback_tcps+0x26c>)
 8002482:	4413      	add	r3, r2
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	3316      	adds	r3, #22
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f919 	bl	80006c0 <WIZCHIP_READ>
 800248e:	4603      	mov	r3, r0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	72fb      	strb	r3, [r7, #11]
			destport = getSn_DPORT(sn);
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <loopback_tcps+0x26c>)
 8002498:	4413      	add	r3, r2
 800249a:	019b      	lsls	r3, r3, #6
 800249c:	3312      	adds	r3, #18
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f90e 	bl	80006c0 <WIZCHIP_READ>
 80024a4:	4603      	mov	r3, r0
 80024a6:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 80024a8:	79f9      	ldrb	r1, [r7, #7]
 80024aa:	7a3b      	ldrb	r3, [r7, #8]
 80024ac:	461c      	mov	r4, r3
 80024ae:	7a7b      	ldrb	r3, [r7, #9]
 80024b0:	461d      	mov	r5, r3
 80024b2:	7abb      	ldrb	r3, [r7, #10]
 80024b4:	461a      	mov	r2, r3
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	4618      	mov	r0, r3
 80024ba:	89fb      	ldrh	r3, [r7, #14]
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	9001      	str	r0, [sp, #4]
 80024c0:	9200      	str	r2, [sp, #0]
 80024c2:	462b      	mov	r3, r5
 80024c4:	4622      	mov	r2, r4
 80024c6:	4845      	ldr	r0, [pc, #276]	; (80025dc <loopback_tcps+0x270>)
 80024c8:	f004 ffba 	bl	8007440 <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 80024cc:	79fa      	ldrb	r2, [r7, #7]
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <loopback_tcps+0x26c>)
 80024d0:	4413      	add	r3, r2
 80024d2:	019b      	lsls	r3, r3, #6
 80024d4:	3306      	adds	r3, #6
 80024d6:	2101      	movs	r1, #1
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f8d3 	bl	8000684 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fa05 	bl	80008f0 <getSn_RX_RSR>
 80024e6:	4603      	mov	r3, r0
 80024e8:	82fb      	strh	r3, [r7, #22]
 80024ea:	8afb      	ldrh	r3, [r7, #22]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d068      	beq.n	80025c2 <loopback_tcps+0x256>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80024f0:	8afb      	ldrh	r3, [r7, #22]
 80024f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024f6:	d902      	bls.n	80024fe <loopback_tcps+0x192>
 80024f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024fc:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 80024fe:	8afa      	ldrh	r2, [r7, #22]
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	6839      	ldr	r1, [r7, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fe6f 	bl	80011e8 <recv>
 800250a:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	dc01      	bgt.n	8002516 <loopback_tcps+0x1aa>
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	e05b      	b.n	80025ce <loopback_tcps+0x262>

			size = (uint16_t) ret;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 800251e:	e019      	b.n	8002554 <loopback_tcps+0x1e8>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 8002520:	8abb      	ldrh	r3, [r7, #20]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	18d1      	adds	r1, r2, r3
 8002526:	8afa      	ldrh	r2, [r7, #22]
 8002528:	8abb      	ldrh	r3, [r7, #20]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	b29a      	uxth	r2, r3
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fd51 	bl	8000fd8 <send>
 8002536:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	da05      	bge.n	800254a <loopback_tcps+0x1de>
				{
					close(sn);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fbad 	bl	8000ca0 <close>
					return ret;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	e041      	b.n	80025ce <loopback_tcps+0x262>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	b29a      	uxth	r2, r3
 800254e:	8abb      	ldrh	r3, [r7, #20]
 8002550:	4413      	add	r3, r2
 8002552:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 8002554:	8afa      	ldrh	r2, [r7, #22]
 8002556:	8abb      	ldrh	r3, [r7, #20]
 8002558:	429a      	cmp	r2, r3
 800255a:	d1e1      	bne.n	8002520 <loopback_tcps+0x1b4>
			}

         }

         break;
 800255c:	e031      	b.n	80025c2 <loopback_tcps+0x256>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe fcc1 	bl	8000ee8 <disconnect>
 8002566:	4603      	mov	r3, r0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d001      	beq.n	8002574 <loopback_tcps+0x208>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	e02c      	b.n	80025ce <loopback_tcps+0x262>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	4619      	mov	r1, r3
 8002578:	4819      	ldr	r0, [pc, #100]	; (80025e0 <loopback_tcps+0x274>)
 800257a:	f004 ff61 	bl	8007440 <iprintf>
#endif
         break;
 800257e:	e025      	b.n	80025cc <loopback_tcps+0x260>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	88ba      	ldrh	r2, [r7, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	4817      	ldr	r0, [pc, #92]	; (80025e4 <loopback_tcps+0x278>)
 8002588:	f004 ff5a 	bl	8007440 <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fc50 	bl	8000e34 <listen>
 8002594:	4603      	mov	r3, r0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d013      	beq.n	80025c6 <loopback_tcps+0x25a>
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	e015      	b.n	80025ce <loopback_tcps+0x262>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 80025a2:	88ba      	ldrh	r2, [r7, #4]
 80025a4:	79f8      	ldrb	r0, [r7, #7]
 80025a6:	2300      	movs	r3, #0
 80025a8:	2101      	movs	r1, #1
 80025aa:	f7fe fa51 	bl	8000a50 <socket>
 80025ae:	4603      	mov	r3, r0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d007      	beq.n	80025ca <loopback_tcps+0x25e>
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	e007      	b.n	80025ce <loopback_tcps+0x262>
#endif


         break;
      default:
         break;
 80025be:	bf00      	nop
 80025c0:	e004      	b.n	80025cc <loopback_tcps+0x260>
         break;
 80025c2:	bf00      	nop
 80025c4:	e002      	b.n	80025cc <loopback_tcps+0x260>
         break;
 80025c6:	bf00      	nop
 80025c8:	e000      	b.n	80025cc <loopback_tcps+0x260>
         break;
 80025ca:	bf00      	nop
   }
   return 1;
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bdb0      	pop	{r4, r5, r7, pc}
 80025d6:	bf00      	nop
 80025d8:	01a00008 	.word	0x01a00008
 80025dc:	08008468 	.word	0x08008468
 80025e0:	0800848c 	.word	0x0800848c
 80025e4:	080084a0 	.word	0x080084a0

080025e8 <_write>:
#include "config.h"

int _write( int32_t file , uint8_t *ptr , int32_t len )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
    /* Implement your write code here, this is used by puts and printf for example */
    for ( int16_t i = 0 ; i < len ; ++i )
 80025f4:	2300      	movs	r3, #0
 80025f6:	82fb      	strh	r3, [r7, #22]
 80025f8:	e00b      	b.n	8002612 <_write+0x2a>
    {
        HAL_UART_Transmit( &huart1, ptr++, 1, 100);
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	1c4b      	adds	r3, r1, #1
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	2364      	movs	r3, #100	; 0x64
 8002602:	2201      	movs	r2, #1
 8002604:	4808      	ldr	r0, [pc, #32]	; (8002628 <_write+0x40>)
 8002606:	f003 fd1b 	bl	8006040 <HAL_UART_Transmit>
    for ( int16_t i = 0 ; i < len ; ++i )
 800260a:	8afb      	ldrh	r3, [r7, #22]
 800260c:	3301      	adds	r3, #1
 800260e:	b29b      	uxth	r3, r3
 8002610:	82fb      	strh	r3, [r7, #22]
 8002612:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dcee      	bgt.n	80025fa <_write+0x12>
    }
    return len;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	24000114 	.word	0x24000114

0800262c <Reset_W5300>:
};



void Reset_W5300()
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2108      	movs	r1, #8
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <Reset_W5300+0x28>)
 8002636:	f001 f8ed 	bl	8003814 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800263a:	200a      	movs	r0, #10
 800263c:	f000 fe26 	bl	800328c <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8002640:	2201      	movs	r2, #1
 8002642:	2108      	movs	r1, #8
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <Reset_W5300+0x28>)
 8002646:	f001 f8e5 	bl	8003814 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800264a:	2064      	movs	r0, #100	; 0x64
 800264c:	f000 fe1e 	bl	800328c <HAL_Delay>
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	58021000 	.word	0x58021000

08002658 <W5300_write>:

void W5300_write(uint32_t addr, iodata_t wd)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
	_W5300_DATA(addr) = wd;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	f103 43c8 	add.w	r3, r3, #1677721600	; 0x64000000
 800266c:	461a      	mov	r2, r3
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	8013      	strh	r3, [r2, #0]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
	return _W5300_DATA(addr);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	f103 43c8 	add.w	r3, r3, #1677721600	; 0x64000000
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <print_network_information>:



void print_network_information(void)
{
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af04      	add	r7, sp, #16
    wizchip_getnetinfo(&gWIZNETINFO);
 80026a6:	4830      	ldr	r0, [pc, #192]	; (8002768 <print_network_information+0xc8>)
 80026a8:	f7ff fd3c 	bl	8002124 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <print_network_information+0xc8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <print_network_information+0xc8>)
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	461c      	mov	r4, r3
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <print_network_information+0xc8>)
 80026ba:	789b      	ldrb	r3, [r3, #2]
 80026bc:	461d      	mov	r5, r3
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <print_network_information+0xc8>)
 80026c0:	78db      	ldrb	r3, [r3, #3]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b28      	ldr	r3, [pc, #160]	; (8002768 <print_network_information+0xc8>)
 80026c6:	791b      	ldrb	r3, [r3, #4]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <print_network_information+0xc8>)
 80026cc:	795b      	ldrb	r3, [r3, #5]
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	9101      	str	r1, [sp, #4]
 80026d2:	9200      	str	r2, [sp, #0]
 80026d4:	462b      	mov	r3, r5
 80026d6:	4622      	mov	r2, r4
 80026d8:	4601      	mov	r1, r0
 80026da:	4824      	ldr	r0, [pc, #144]	; (800276c <print_network_information+0xcc>)
 80026dc:	f004 feb0 	bl	8007440 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80026e0:	4b21      	ldr	r3, [pc, #132]	; (8002768 <print_network_information+0xc8>)
 80026e2:	799b      	ldrb	r3, [r3, #6]
 80026e4:	4619      	mov	r1, r3
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <print_network_information+0xc8>)
 80026e8:	79db      	ldrb	r3, [r3, #7]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <print_network_information+0xc8>)
 80026ee:	7a1b      	ldrb	r3, [r3, #8]
 80026f0:	4618      	mov	r0, r3
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <print_network_information+0xc8>)
 80026f4:	7a5b      	ldrb	r3, [r3, #9]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	481d      	ldr	r0, [pc, #116]	; (8002770 <print_network_information+0xd0>)
 80026fc:	f004 fea0 	bl	8007440 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <print_network_information+0xc8>)
 8002702:	7a9b      	ldrb	r3, [r3, #10]
 8002704:	4619      	mov	r1, r3
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <print_network_information+0xc8>)
 8002708:	7adb      	ldrb	r3, [r3, #11]
 800270a:	461a      	mov	r2, r3
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <print_network_information+0xc8>)
 800270e:	7b1b      	ldrb	r3, [r3, #12]
 8002710:	4618      	mov	r0, r3
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <print_network_information+0xc8>)
 8002714:	7b5b      	ldrb	r3, [r3, #13]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4603      	mov	r3, r0
 800271a:	4816      	ldr	r0, [pc, #88]	; (8002774 <print_network_information+0xd4>)
 800271c:	f004 fe90 	bl	8007440 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <print_network_information+0xc8>)
 8002722:	7b9b      	ldrb	r3, [r3, #14]
 8002724:	4619      	mov	r1, r3
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <print_network_information+0xc8>)
 8002728:	7bdb      	ldrb	r3, [r3, #15]
 800272a:	461a      	mov	r2, r3
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <print_network_information+0xc8>)
 800272e:	7c1b      	ldrb	r3, [r3, #16]
 8002730:	4618      	mov	r0, r3
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <print_network_information+0xc8>)
 8002734:	7c5b      	ldrb	r3, [r3, #17]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4603      	mov	r3, r0
 800273a:	480f      	ldr	r0, [pc, #60]	; (8002778 <print_network_information+0xd8>)
 800273c:	f004 fe80 	bl	8007440 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <print_network_information+0xc8>)
 8002742:	7c9b      	ldrb	r3, [r3, #18]
 8002744:	4619      	mov	r1, r3
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <print_network_information+0xc8>)
 8002748:	7cdb      	ldrb	r3, [r3, #19]
 800274a:	461a      	mov	r2, r3
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <print_network_information+0xc8>)
 800274e:	7d1b      	ldrb	r3, [r3, #20]
 8002750:	4618      	mov	r0, r3
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <print_network_information+0xc8>)
 8002754:	7d5b      	ldrb	r3, [r3, #21]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4603      	mov	r3, r0
 800275a:	4808      	ldr	r0, [pc, #32]	; (800277c <print_network_information+0xdc>)
 800275c:	f004 fe70 	bl	8007440 <iprintf>
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bdb0      	pop	{r4, r5, r7, pc}
 8002766:	bf00      	nop
 8002768:	24000040 	.word	0x24000040
 800276c:	0800857c 	.word	0x0800857c
 8002770:	080085ac 	.word	0x080085ac
 8002774:	080085c8 	.word	0x080085c8
 8002778:	080085e4 	.word	0x080085e4
 800277c:	08008600 	.word	0x08008600

08002780 <_InitW5300>:

void _InitW5300(void);

void _InitW5300(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
	unsigned int tmpaddr[4];

	Reset_W5300();
 8002786:	f7ff ff51 	bl	800262c <Reset_W5300>
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 800278a:	4910      	ldr	r1, [pc, #64]	; (80027cc <_InitW5300+0x4c>)
 800278c:	4810      	ldr	r0, [pc, #64]	; (80027d0 <_InitW5300+0x50>)
 800278e:	f7ff f8fd 	bl	800198c <reg_wizchip_bus_cbfunc>

	printf("getMR() = %04X\r\n", getMR());
 8002792:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	480e      	ldr	r0, [pc, #56]	; (80027d4 <_InitW5300+0x54>)
 800279c:	f004 fe50 	bl	8007440 <iprintf>

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 80027a0:	490d      	ldr	r1, [pc, #52]	; (80027d8 <_InitW5300+0x58>)
 80027a2:	2001      	movs	r0, #1
 80027a4:	f7ff f91e 	bl	80019e4 <ctlwizchip>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d102      	bne.n	80027b6 <_InitW5300+0x36>
	{
		printf("W5300 memory initialization failed\r\n");
 80027b0:	480a      	ldr	r0, [pc, #40]	; (80027dc <_InitW5300+0x5c>)
 80027b2:	f004 fecb 	bl	800754c <puts>
	}

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80027b6:	490a      	ldr	r1, [pc, #40]	; (80027e0 <_InitW5300+0x60>)
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7ff f98f 	bl	8001adc <ctlnetwork>
	print_network_information();
 80027be:	f7ff ff6f 	bl	80026a0 <print_network_information>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	08002659 	.word	0x08002659
 80027d0:	0800267f 	.word	0x0800267f
 80027d4:	0800861c 	.word	0x0800861c
 80027d8:	24000030 	.word	0x24000030
 80027dc:	08008630 	.word	0x08008630
 80027e0:	24000040 	.word	0x24000040

080027e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027e8:	f000 fcbe 	bl	8003168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ec:	f000 f816 	bl	800281c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f0:	f000 f972 	bl	8002ad8 <MX_GPIO_Init>
  MX_FMC_Init();
 80027f4:	f000 f90e 	bl	8002a14 <MX_FMC_Init>
  MX_USART1_UART_Init();
 80027f8:	f000 f8c0 	bl	800297c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("W5300 TCP Loopback Test\r\n");
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <main+0x30>)
 80027fe:	f004 fea5 	bl	800754c <puts>

  _InitW5300();
 8002802:	f7ff ffbd 	bl	8002780 <_InitW5300>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loopback_tcps(0, ethBuf0, 5001);
 8002806:	f241 3289 	movw	r2, #5001	; 0x1389
 800280a:	4903      	ldr	r1, [pc, #12]	; (8002818 <main+0x34>)
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff fdad 	bl	800236c <loopback_tcps>
  {
 8002812:	e7f8      	b.n	8002806 <main+0x22>
 8002814:	08008654 	.word	0x08008654
 8002818:	240001f0 	.word	0x240001f0

0800281c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b09e      	sub	sp, #120	; 0x78
 8002820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002826:	224c      	movs	r2, #76	; 0x4c
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f004 fe00 	bl	8007430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	2220      	movs	r2, #32
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f004 fdf9 	bl	8007430 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800283e:	2002      	movs	r0, #2
 8002840:	f001 f802 	bl	8003848 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	4b49      	ldr	r3, [pc, #292]	; (8002970 <SystemClock_Config+0x154>)
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4a48      	ldr	r2, [pc, #288]	; (8002970 <SystemClock_Config+0x154>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002854:	4b46      	ldr	r3, [pc, #280]	; (8002970 <SystemClock_Config+0x154>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	4b45      	ldr	r3, [pc, #276]	; (8002974 <SystemClock_Config+0x158>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	4a44      	ldr	r2, [pc, #272]	; (8002974 <SystemClock_Config+0x158>)
 8002864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002868:	6193      	str	r3, [r2, #24]
 800286a:	4b42      	ldr	r3, [pc, #264]	; (8002974 <SystemClock_Config+0x158>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002876:	bf00      	nop
 8002878:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <SystemClock_Config+0x158>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002884:	d1f8      	bne.n	8002878 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <SystemClock_Config+0x15c>)
 8002888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800288c:	4a3a      	ldr	r2, [pc, #232]	; (8002978 <SystemClock_Config+0x15c>)
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <SystemClock_Config+0x15c>)
 8002898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <SystemClock_Config+0x158>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <SystemClock_Config+0x158>)
 80028ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <SystemClock_Config+0x158>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <SystemClock_Config+0x154>)
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	4a2b      	ldr	r2, [pc, #172]	; (8002970 <SystemClock_Config+0x154>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028ca:	4b29      	ldr	r3, [pc, #164]	; (8002970 <SystemClock_Config+0x154>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028d6:	bf00      	nop
 80028d8:	4b26      	ldr	r3, [pc, #152]	; (8002974 <SystemClock_Config+0x158>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e4:	d1f8      	bne.n	80028d8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e6:	2302      	movs	r3, #2
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ee:	2340      	movs	r3, #64	; 0x40
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f2:	2302      	movs	r3, #2
 80028f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028f6:	2300      	movs	r3, #0
 80028f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028fa:	2304      	movs	r3, #4
 80028fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80028fe:	233c      	movs	r3, #60	; 0x3c
 8002900:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002902:	2302      	movs	r3, #2
 8002904:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002906:	2302      	movs	r3, #2
 8002908:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800290a:	2302      	movs	r3, #2
 800290c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800290e:	230c      	movs	r3, #12
 8002910:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002912:	2300      	movs	r3, #0
 8002914:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800291a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291e:	4618      	mov	r0, r3
 8002920:	f000 ffcc 	bl	80038bc <HAL_RCC_OscConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800292a:	f000 f987 	bl	8002c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800292e:	233f      	movs	r3, #63	; 0x3f
 8002930:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002932:	2303      	movs	r3, #3
 8002934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800293a:	2308      	movs	r3, #8
 800293c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002942:	2340      	movs	r3, #64	; 0x40
 8002944:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800294c:	2340      	movs	r3, #64	; 0x40
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	2104      	movs	r1, #4
 8002956:	4618      	mov	r0, r3
 8002958:	f001 fbde 	bl	8004118 <HAL_RCC_ClockConfig>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8002962:	f000 f96b 	bl	8002c3c <Error_Handler>
  }
}
 8002966:	bf00      	nop
 8002968:	3778      	adds	r7, #120	; 0x78
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	58000400 	.word	0x58000400
 8002974:	58024800 	.word	0x58024800
 8002978:	58024400 	.word	0x58024400

0800297c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 8002982:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <MX_USART1_UART_Init+0x94>)
 8002984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 8002988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800298c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029a2:	220c      	movs	r2, #12
 80029a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029c4:	4811      	ldr	r0, [pc, #68]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029c6:	f003 faeb 	bl	8005fa0 <HAL_UART_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029d0:	f000 f934 	bl	8002c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029d4:	2100      	movs	r1, #0
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029d8:	f004 fb1e 	bl	8007018 <HAL_UARTEx_SetTxFifoThreshold>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029e2:	f000 f92b 	bl	8002c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029e6:	2100      	movs	r1, #0
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029ea:	f004 fb53 	bl	8007094 <HAL_UARTEx_SetRxFifoThreshold>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029f4:	f000 f922 	bl	8002c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029fa:	f004 fad4 	bl	8006fa6 <HAL_UARTEx_DisableFifoMode>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a04:	f000 f91a 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	24000114 	.word	0x24000114
 8002a10:	40011000 	.word	0x40011000

08002a14 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a2e:	4a28      	ldr	r2, [pc, #160]	; (8002ad0 <MX_FMC_Init+0xbc>)
 8002a30:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a34:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <MX_FMC_Init+0xc0>)
 8002a36:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002a3e:	4b23      	ldr	r3, [pc, #140]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8002a50:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8002a62:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002a68:	4b18      	ldr	r3, [pc, #96]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <MX_FMC_Init+0xb8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002a92:	230f      	movs	r3, #15
 8002a94:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002a96:	230f      	movs	r3, #15
 8002a98:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002a9a:	23ff      	movs	r3, #255	; 0xff
 8002a9c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002aa6:	2311      	movs	r3, #17
 8002aa8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <MX_FMC_Init+0xb8>)
 8002ab6:	f003 fa23 	bl	8005f00 <HAL_SRAM_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_FMC_Init+0xb0>
  {
    Error_Handler( );
 8002ac0:	f000 f8bc 	bl	8002c3c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002ac4:	bf00      	nop
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	240001a4 	.word	0x240001a4
 8002ad0:	52004000 	.word	0x52004000
 8002ad4:	52004104 	.word	0x52004104

08002ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	; 0x30
 8002adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ade:	f107 031c 	add.w	r3, r7, #28
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aee:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af4:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002af6:	f043 0310 	orr.w	r3, r3, #16
 8002afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afe:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b0c:	4b46      	ldr	r3, [pc, #280]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b12:	4a45      	ldr	r2, [pc, #276]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b14:	f043 0320 	orr.w	r3, r3, #32
 8002b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1c:	4b42      	ldr	r3, [pc, #264]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	4a3d      	ldr	r2, [pc, #244]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3a:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b48:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4e:	4a36      	ldr	r2, [pc, #216]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b58:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b66:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b84:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8a:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <MX_GPIO_Init+0x150>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	4821      	ldr	r0, [pc, #132]	; (8002c2c <MX_GPIO_Init+0x154>)
 8002ba8:	f000 fe34 	bl	8003814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2120      	movs	r1, #32
 8002bb0:	481f      	ldr	r0, [pc, #124]	; (8002c30 <MX_GPIO_Init+0x158>)
 8002bb2:	f000 fe2f 	bl	8003814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc6:	f107 031c 	add.w	r3, r7, #28
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4817      	ldr	r0, [pc, #92]	; (8002c2c <MX_GPIO_Init+0x154>)
 8002bce:	f000 fc71 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	4813      	ldr	r0, [pc, #76]	; (8002c34 <MX_GPIO_Init+0x15c>)
 8002be6:	f000 fc65 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bea:	2320      	movs	r3, #32
 8002bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	480b      	ldr	r0, [pc, #44]	; (8002c30 <MX_GPIO_Init+0x158>)
 8002c02:	f000 fc57 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c06:	2304      	movs	r3, #4
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	4619      	mov	r1, r3
 8002c18:	4807      	ldr	r0, [pc, #28]	; (8002c38 <MX_GPIO_Init+0x160>)
 8002c1a:	f000 fc4b 	bl	80034b4 <HAL_GPIO_Init>

}
 8002c1e:	bf00      	nop
 8002c20:	3730      	adds	r7, #48	; 0x30
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	58021000 	.word	0x58021000
 8002c30:	58020000 	.word	0x58020000
 8002c34:	58021400 	.word	0x58021400
 8002c38:	58020400 	.word	0x58020400

08002c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
}
 8002c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <Error_Handler+0x8>
	...

08002c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_MspInit+0x30>)
 8002c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c54:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <HAL_MspInit+0x30>)
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_MspInit+0x30>)
 8002c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	58024400 	.word	0x58024400

08002c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b0b8      	sub	sp, #224	; 0xe0
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	22bc      	movs	r2, #188	; 0xbc
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 fbc7 	bl	8007430 <memset>
  if(huart->Instance==USART1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_UART_MspInit+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d142      	bne.n	8002d32 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cac:	2301      	movs	r3, #1
 8002cae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 fdb8 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002cc6:	f7ff ffb9 	bl	8002c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cd2:	f043 0310 	orr.w	r3, r3, #16
 8002cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cee:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_UART_MspInit+0xc4>)
 8002cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d20:	2307      	movs	r3, #7
 8002d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4805      	ldr	r0, [pc, #20]	; (8002d44 <HAL_UART_MspInit+0xc8>)
 8002d2e:	f000 fbc1 	bl	80034b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d32:	bf00      	nop
 8002d34:	37e0      	adds	r7, #224	; 0xe0
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40011000 	.word	0x40011000
 8002d40:	58024400 	.word	0x58024400
 8002d44:	58020000 	.word	0x58020000

08002d48 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0b6      	sub	sp, #216	; 0xd8
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d5e:	4b45      	ldr	r3, [pc, #276]	; (8002e74 <HAL_FMC_MspInit+0x12c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 8081 	bne.w	8002e6a <HAL_FMC_MspInit+0x122>
    return;
  }
  FMC_Initialized = 1;
 8002d68:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <HAL_FMC_MspInit+0x12c>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	22bc      	movs	r2, #188	; 0xbc
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f004 fb5a 	bl	8007430 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d80:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 fd50 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 8002d96:	f7ff ff51 	bl	8002c3c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d9a:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <HAL_FMC_MspInit+0x130>)
 8002d9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002da0:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <HAL_FMC_MspInit+0x130>)
 8002da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002daa:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_FMC_MspInit+0x130>)
 8002dac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PG9   ------> FMC_NE2
  PG10   ------> FMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002db8:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4827      	ldr	r0, [pc, #156]	; (8002e7c <HAL_FMC_MspInit+0x134>)
 8002de0:	f000 fb68 	bl	80034b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002de4:	f240 633f 	movw	r3, #1599	; 0x63f
 8002de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dfe:	230c      	movs	r3, #12
 8002e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	481d      	ldr	r0, [pc, #116]	; (8002e80 <HAL_FMC_MspInit+0x138>)
 8002e0c:	f000 fb52 	bl	80034b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002e10:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4813      	ldr	r0, [pc, #76]	; (8002e84 <HAL_FMC_MspInit+0x13c>)
 8002e38:	f000 fb3c 	bl	80034b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002e3c:	f24c 7333 	movw	r3, #50995	; 0xc733
 8002e40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e56:	230c      	movs	r3, #12
 8002e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <HAL_FMC_MspInit+0x140>)
 8002e64:	f000 fb26 	bl	80034b4 <HAL_GPIO_Init>
 8002e68:	e000      	b.n	8002e6c <HAL_FMC_MspInit+0x124>
    return;
 8002e6a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e6c:	37d8      	adds	r7, #216	; 0xd8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	240009f0 	.word	0x240009f0
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	58021400 	.word	0x58021400
 8002e80:	58021800 	.word	0x58021800
 8002e84:	58021000 	.word	0x58021000
 8002e88:	58020c00 	.word	0x58020c00

08002e8c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002e94:	f7ff ff58 	bl	8002d48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <NMI_Handler+0x4>

08002ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eaa:	e7fe      	b.n	8002eaa <HardFault_Handler+0x4>

08002eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <MemManage_Handler+0x4>

08002eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb6:	e7fe      	b.n	8002eb6 <BusFault_Handler+0x4>

08002eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <UsageFault_Handler+0x4>

08002ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eec:	f000 f9ae 	bl	800324c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e00a      	b.n	8002f1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f06:	f3af 8000 	nop.w
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	60ba      	str	r2, [r7, #8]
 8002f12:	b2ca      	uxtb	r2, r1
 8002f14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbf0      	blt.n	8002f06 <_read+0x12>
	}

return len;
 8002f24:	687b      	ldr	r3, [r7, #4]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
	return -1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f56:	605a      	str	r2, [r3, #4]
	return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_isatty>:

int _isatty(int file)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
	return 0;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <_sbrk+0x5c>)
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <_sbrk+0x60>)
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <_sbrk+0x64>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <_sbrk+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <_sbrk+0x64>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc8:	f004 fa08 	bl	80073dc <__errno>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	220c      	movs	r2, #12
 8002fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	e009      	b.n	8002fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <_sbrk+0x64>)
 8002fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fea:	68fb      	ldr	r3, [r7, #12]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	24080000 	.word	0x24080000
 8002ff8:	00000400 	.word	0x00000400
 8002ffc:	240009f4 	.word	0x240009f4
 8003000:	24000a10 	.word	0x24000a10

08003004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003008:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <SystemInit+0xe4>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	4a36      	ldr	r2, [pc, #216]	; (80030e8 <SystemInit+0xe4>)
 8003010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <SystemInit+0xe8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	2b06      	cmp	r3, #6
 8003022:	d807      	bhi.n	8003034 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003024:	4b31      	ldr	r3, [pc, #196]	; (80030ec <SystemInit+0xe8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 030f 	bic.w	r3, r3, #15
 800302c:	4a2f      	ldr	r2, [pc, #188]	; (80030ec <SystemInit+0xe8>)
 800302e:	f043 0307 	orr.w	r3, r3, #7
 8003032:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003034:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <SystemInit+0xec>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2d      	ldr	r2, [pc, #180]	; (80030f0 <SystemInit+0xec>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <SystemInit+0xec>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <SystemInit+0xec>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4929      	ldr	r1, [pc, #164]	; (80030f0 <SystemInit+0xec>)
 800304c:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <SystemInit+0xf0>)
 800304e:	4013      	ands	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <SystemInit+0xe8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800305e:	4b23      	ldr	r3, [pc, #140]	; (80030ec <SystemInit+0xe8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 030f 	bic.w	r3, r3, #15
 8003066:	4a21      	ldr	r2, [pc, #132]	; (80030ec <SystemInit+0xe8>)
 8003068:	f043 0307 	orr.w	r3, r3, #7
 800306c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <SystemInit+0xec>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <SystemInit+0xec>)
 8003076:	2200      	movs	r2, #0
 8003078:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <SystemInit+0xec>)
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <SystemInit+0xec>)
 8003082:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <SystemInit+0xf4>)
 8003084:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <SystemInit+0xec>)
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <SystemInit+0xf8>)
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <SystemInit+0xec>)
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <SystemInit+0xfc>)
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <SystemInit+0xec>)
 8003094:	2200      	movs	r2, #0
 8003096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <SystemInit+0xec>)
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <SystemInit+0xfc>)
 800309c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <SystemInit+0xec>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <SystemInit+0xec>)
 80030a6:	4a16      	ldr	r2, [pc, #88]	; (8003100 <SystemInit+0xfc>)
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <SystemInit+0xec>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <SystemInit+0xec>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <SystemInit+0xec>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <SystemInit+0xec>)
 80030be:	2200      	movs	r2, #0
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <SystemInit+0x100>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <SystemInit+0x104>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ce:	d202      	bcs.n	80030d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030d0:	4b0e      	ldr	r3, [pc, #56]	; (800310c <SystemInit+0x108>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <SystemInit+0x10c>)
 80030d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80030dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00
 80030ec:	52002000 	.word	0x52002000
 80030f0:	58024400 	.word	0x58024400
 80030f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80030f8:	02020200 	.word	0x02020200
 80030fc:	01ff0000 	.word	0x01ff0000
 8003100:	01010280 	.word	0x01010280
 8003104:	5c001000 	.word	0x5c001000
 8003108:	ffff0000 	.word	0xffff0000
 800310c:	51008108 	.word	0x51008108
 8003110:	52004000 	.word	0x52004000

08003114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800314c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003118:	f7ff ff74 	bl	8003004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800311c:	480c      	ldr	r0, [pc, #48]	; (8003150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800311e:	490d      	ldr	r1, [pc, #52]	; (8003154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003120:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003124:	e002      	b.n	800312c <LoopCopyDataInit>

08003126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800312a:	3304      	adds	r3, #4

0800312c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800312c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800312e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003130:	d3f9      	bcc.n	8003126 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003134:	4c0a      	ldr	r4, [pc, #40]	; (8003160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003138:	e001      	b.n	800313e <LoopFillZerobss>

0800313a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800313a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800313c:	3204      	adds	r2, #4

0800313e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800313e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003140:	d3fb      	bcc.n	800313a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003142:	f004 f951 	bl	80073e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003146:	f7ff fb4d 	bl	80027e4 <main>
  bx  lr
 800314a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800314c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003150:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003154:	240000cc 	.word	0x240000cc
  ldr r2, =_sidata
 8003158:	08008750 	.word	0x08008750
  ldr r2, =_sbss
 800315c:	240000cc 	.word	0x240000cc
  ldr r4, =_ebss
 8003160:	24000a0c 	.word	0x24000a0c

08003164 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003164:	e7fe      	b.n	8003164 <ADC3_IRQHandler>
	...

08003168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800316e:	2003      	movs	r0, #3
 8003170:	f000 f96e 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003174:	f001 f986 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_Init+0x68>)
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	4913      	ldr	r1, [pc, #76]	; (80031d4 <HAL_Init+0x6c>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_Init+0x68>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <HAL_Init+0x6c>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <HAL_Init+0x70>)
 80031aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031ac:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <HAL_Init+0x74>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031b2:	200f      	movs	r0, #15
 80031b4:	f000 f814 	bl	80031e0 <HAL_InitTick>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e002      	b.n	80031c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80031c2:	f7ff fd41 	bl	8002c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	58024400 	.word	0x58024400
 80031d4:	08008670 	.word	0x08008670
 80031d8:	2400005c 	.word	0x2400005c
 80031dc:	24000058 	.word	0x24000058

080031e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_InitTick+0x60>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e021      	b.n	8003238 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_InitTick+0x64>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_InitTick+0x60>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003202:	fbb3 f3f1 	udiv	r3, r3, r1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f945 	bl	800349a <HAL_SYSTICK_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00e      	b.n	8003238 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d80a      	bhi.n	8003236 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003220:	2200      	movs	r2, #0
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f000 f91d 	bl	8003466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <HAL_InitTick+0x68>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	24000064 	.word	0x24000064
 8003244:	24000058 	.word	0x24000058
 8003248:	24000060 	.word	0x24000060

0800324c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x20>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_IncTick+0x24>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_IncTick+0x24>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	24000064 	.word	0x24000064
 8003270:	240009f8 	.word	0x240009f8

08003274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return uwTick;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_GetTick+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	240009f8 	.word	0x240009f8

0800328c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7ff ffee 	bl	8003274 <HAL_GetTick>
 8003298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d005      	beq.n	80032b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_Delay+0x44>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032b2:	bf00      	nop
 80032b4:	f7ff ffde 	bl	8003274 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d8f7      	bhi.n	80032b4 <HAL_Delay+0x28>
  {
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	24000064 	.word	0x24000064

080032d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_GetREVID+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0c1b      	lsrs	r3, r3, #16
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	5c001000 	.word	0x5c001000

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00
 8003330:	05fa0000 	.word	0x05fa0000

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800335c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	db0a      	blt.n	800337a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	490c      	ldr	r1, [pc, #48]	; (800339c <__NVIC_SetPriority+0x4c>)
 800336a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	440b      	add	r3, r1
 8003374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003378:	e00a      	b.n	8003390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <__NVIC_SetPriority+0x50>)
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	3b04      	subs	r3, #4
 8003388:	0112      	lsls	r2, r2, #4
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	440b      	add	r3, r1
 800338e:	761a      	strb	r2, [r3, #24]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f1c3 0307 	rsb	r3, r3, #7
 80033be:	2b04      	cmp	r3, #4
 80033c0:	bf28      	it	cs
 80033c2:	2304      	movcs	r3, #4
 80033c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d902      	bls.n	80033d4 <NVIC_EncodePriority+0x30>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3b03      	subs	r3, #3
 80033d2:	e000      	b.n	80033d6 <NVIC_EncodePriority+0x32>
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ec:	f04f 31ff 	mov.w	r1, #4294967295
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43d9      	mvns	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	4313      	orrs	r3, r2
         );
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341c:	d301      	bcc.n	8003422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <SysTick_Config+0x40>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342a:	210f      	movs	r1, #15
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f7ff ff8e 	bl	8003350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Config+0x40>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x40>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff47 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003474:	f7ff ff5e 	bl	8003334 <__NVIC_GetPriorityGrouping>
 8003478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7ff ff90 	bl	80033a4 <NVIC_EncodePriority>
 8003484:	4602      	mov	r2, r0
 8003486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff5f 	bl	8003350 <__NVIC_SetPriority>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ffb2 	bl	800340c <SysTick_Config>
 80034a8:	4603      	mov	r3, r0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_GPIO_Init+0x234>)
 80034c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034c6:	e194      	b.n	80037f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2101      	movs	r1, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8186 	beq.w	80037ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d005      	beq.n	80034f8 <HAL_GPIO_Init+0x44>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d130      	bne.n	800355a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800352e:	2201      	movs	r2, #1
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 0201 	and.w	r2, r3, #1
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b03      	cmp	r3, #3
 8003564:	d017      	beq.n	8003596 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d123      	bne.n	80035ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	69b9      	ldr	r1, [r7, #24]
 80035e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	2203      	movs	r2, #3
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80e0 	beq.w	80037ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <HAL_GPIO_Init+0x238>)
 800362e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003632:	4a2e      	ldr	r2, [pc, #184]	; (80036ec <HAL_GPIO_Init+0x238>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800363c:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_GPIO_Init+0x238>)
 800363e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <HAL_GPIO_Init+0x23c>)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	3302      	adds	r3, #2
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <HAL_GPIO_Init+0x240>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d052      	beq.n	800371c <HAL_GPIO_Init+0x268>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_GPIO_Init+0x244>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d031      	beq.n	80036e2 <HAL_GPIO_Init+0x22e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_GPIO_Init+0x248>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d02b      	beq.n	80036de <HAL_GPIO_Init+0x22a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_GPIO_Init+0x24c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d025      	beq.n	80036da <HAL_GPIO_Init+0x226>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_GPIO_Init+0x250>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01f      	beq.n	80036d6 <HAL_GPIO_Init+0x222>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_GPIO_Init+0x254>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d019      	beq.n	80036d2 <HAL_GPIO_Init+0x21e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	; (800370c <HAL_GPIO_Init+0x258>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_GPIO_Init+0x21a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_GPIO_Init+0x25c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00d      	beq.n	80036ca <HAL_GPIO_Init+0x216>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_GPIO_Init+0x260>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <HAL_GPIO_Init+0x212>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_GPIO_Init+0x264>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_GPIO_Init+0x20e>
 80036be:	2309      	movs	r3, #9
 80036c0:	e02d      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036c2:	230a      	movs	r3, #10
 80036c4:	e02b      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036c6:	2308      	movs	r3, #8
 80036c8:	e029      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036ca:	2307      	movs	r3, #7
 80036cc:	e027      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036ce:	2306      	movs	r3, #6
 80036d0:	e025      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036d2:	2305      	movs	r3, #5
 80036d4:	e023      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036d6:	2304      	movs	r3, #4
 80036d8:	e021      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036da:	2303      	movs	r3, #3
 80036dc:	e01f      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036de:	2302      	movs	r3, #2
 80036e0:	e01d      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e01b      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036e6:	bf00      	nop
 80036e8:	58000080 	.word	0x58000080
 80036ec:	58024400 	.word	0x58024400
 80036f0:	58000400 	.word	0x58000400
 80036f4:	58020000 	.word	0x58020000
 80036f8:	58020400 	.word	0x58020400
 80036fc:	58020800 	.word	0x58020800
 8003700:	58020c00 	.word	0x58020c00
 8003704:	58021000 	.word	0x58021000
 8003708:	58021400 	.word	0x58021400
 800370c:	58021800 	.word	0x58021800
 8003710:	58021c00 	.word	0x58021c00
 8003714:	58022000 	.word	0x58022000
 8003718:	58022400 	.word	0x58022400
 800371c:	2300      	movs	r3, #0
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	f002 0203 	and.w	r2, r2, #3
 8003724:	0092      	lsls	r2, r2, #2
 8003726:	4093      	lsls	r3, r2
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800372e:	4938      	ldr	r1, [pc, #224]	; (8003810 <HAL_GPIO_Init+0x35c>)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3302      	adds	r3, #2
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f ae63 	bne.w	80034c8 <HAL_GPIO_Init+0x14>
  }
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	3724      	adds	r7, #36	; 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	58000400 	.word	0x58000400

08003814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
 8003820:	4613      	mov	r3, r2
 8003822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003824:	787b      	ldrb	r3, [r7, #1]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003830:	e003      	b.n	800383a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003832:	887b      	ldrh	r3, [r7, #2]
 8003834:	041a      	lsls	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	619a      	str	r2, [r3, #24]
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00a      	beq.n	8003872 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800385c:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e01f      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e01d      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	490f      	ldr	r1, [pc, #60]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4313      	orrs	r3, r2
 8003880:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003882:	f7ff fcf7 	bl	8003274 <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003888:	e009      	b.n	800389e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800388a:	f7ff fcf3 	bl	8003274 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003898:	d901      	bls.n	800389e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038aa:	d1ee      	bne.n	800388a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	58024800 	.word	0x58024800

080038bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f000 bc1d 	b.w	800410a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8087 	beq.w	80039ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038de:	4b99      	ldr	r3, [pc, #612]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038e8:	4b96      	ldr	r3, [pc, #600]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d007      	beq.n	8003904 <HAL_RCC_OscConfig+0x48>
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	2b18      	cmp	r3, #24
 80038f8:	d110      	bne.n	800391c <HAL_RCC_OscConfig+0x60>
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d10b      	bne.n	800391c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	4b8f      	ldr	r3, [pc, #572]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d06c      	beq.n	80039ea <HAL_RCC_OscConfig+0x12e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d168      	bne.n	80039ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e3f6      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x78>
 8003926:	4b87      	ldr	r3, [pc, #540]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a86      	ldr	r2, [pc, #536]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e02e      	b.n	8003992 <HAL_RCC_OscConfig+0xd6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x9a>
 800393c:	4b81      	ldr	r3, [pc, #516]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a80      	ldr	r2, [pc, #512]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b7e      	ldr	r3, [pc, #504]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e01d      	b.n	8003992 <HAL_RCC_OscConfig+0xd6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395e:	d10c      	bne.n	800397a <HAL_RCC_OscConfig+0xbe>
 8003960:	4b78      	ldr	r3, [pc, #480]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a74      	ldr	r2, [pc, #464]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e00b      	b.n	8003992 <HAL_RCC_OscConfig+0xd6>
 800397a:	4b72      	ldr	r3, [pc, #456]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a71      	ldr	r2, [pc, #452]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b6f      	ldr	r3, [pc, #444]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6e      	ldr	r2, [pc, #440]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800398c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7ff fc6b 	bl	8003274 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a2:	f7ff fc67 	bl	8003274 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	; 0x64
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e3aa      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b4:	4b63      	ldr	r3, [pc, #396]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0xe6>
 80039c0:	e014      	b.n	80039ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7ff fc57 	bl	8003274 <HAL_GetTick>
 80039c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ca:	f7ff fc53 	bl	8003274 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e396      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x10e>
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80cb 	beq.w	8003b90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fa:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a02:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a04:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_RCC_OscConfig+0x164>
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2b18      	cmp	r3, #24
 8003a14:	d156      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x208>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d151      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a20:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_OscConfig+0x17c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e368      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a38:	4b42      	ldr	r3, [pc, #264]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 0219 	bic.w	r2, r3, #25
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	493f      	ldr	r1, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a4a:	f7ff fc13 	bl	8003274 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a52:	f7ff fc0f 	bl	8003274 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e352      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a64:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	f7ff fc30 	bl	80032d4 <HAL_GetREVID>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d817      	bhi.n	8003aae <HAL_RCC_OscConfig+0x1f2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d108      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1dc>
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a8e:	4a2d      	ldr	r2, [pc, #180]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a96:	e07b      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	4927      	ldr	r1, [pc, #156]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aac:	e070      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	4921      	ldr	r1, [pc, #132]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac2:	e065      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d048      	beq.n	8003b5e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0219 	bic.w	r2, r3, #25
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	491a      	ldr	r1, [pc, #104]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7ff fbc9 	bl	8003274 <HAL_GetTick>
 8003ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7ff fbc5 	bl	8003274 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e308      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	f7ff fbe6 	bl	80032d4 <HAL_GetREVID>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d81a      	bhi.n	8003b48 <HAL_RCC_OscConfig+0x28c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d108      	bne.n	8003b2c <HAL_RCC_OscConfig+0x270>
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b22:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	6053      	str	r3, [r2, #4]
 8003b2a:	e031      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	031b      	lsls	r3, r3, #12
 8003b3a:	4902      	ldr	r1, [pc, #8]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
 8003b40:	e026      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
 8003b48:	4b9a      	ldr	r3, [pc, #616]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	4997      	ldr	r1, [pc, #604]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
 8003b5c:	e018      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5e:	4b95      	ldr	r3, [pc, #596]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a94      	ldr	r2, [pc, #592]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7ff fb83 	bl	8003274 <HAL_GetTick>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b72:	f7ff fb7f 	bl	8003274 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e2c2      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b84:	4b8b      	ldr	r3, [pc, #556]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80a9 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9e:	4b85      	ldr	r3, [pc, #532]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ba8:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d007      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x308>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b18      	cmp	r3, #24
 8003bb8:	d13a      	bne.n	8003c30 <HAL_RCC_OscConfig+0x374>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d135      	bne.n	8003c30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc4:	4b7b      	ldr	r3, [pc, #492]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_OscConfig+0x320>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e296      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bdc:	f7ff fb7a 	bl	80032d4 <HAL_GetREVID>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d817      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x35e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d108      	bne.n	8003c04 <HAL_RCC_OscConfig+0x348>
 8003bf2:	4b70      	ldr	r3, [pc, #448]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bfa:	4a6e      	ldr	r2, [pc, #440]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c02:	e075      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c04:	4b6b      	ldr	r3, [pc, #428]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	069b      	lsls	r3, r3, #26
 8003c12:	4968      	ldr	r1, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c18:	e06a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1a:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	4962      	ldr	r1, [pc, #392]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c2e:	e05f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d042      	beq.n	8003cbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c38:	4b5e      	ldr	r3, [pc, #376]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5d      	ldr	r2, [pc, #372]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7ff fb16 	bl	8003274 <HAL_GetTick>
 8003c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c4c:	f7ff fb12 	bl	8003274 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e255      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c5e:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c6a:	f7ff fb33 	bl	80032d4 <HAL_GetREVID>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d817      	bhi.n	8003ca8 <HAL_RCC_OscConfig+0x3ec>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d108      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3d6>
 8003c80:	4b4c      	ldr	r3, [pc, #304]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c88:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c8e:	6053      	str	r3, [r2, #4]
 8003c90:	e02e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
 8003c92:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	069b      	lsls	r3, r3, #26
 8003ca0:	4944      	ldr	r1, [pc, #272]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
 8003ca6:	e023      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
 8003ca8:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	493f      	ldr	r1, [pc, #252]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
 8003cbc:	e018      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3c      	ldr	r2, [pc, #240]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7ff fad3 	bl	8003274 <HAL_GetTick>
 8003cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cd2:	f7ff facf 	bl	8003274 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e212      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ce4:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d036      	beq.n	8003d6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d019      	beq.n	8003d38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7ff fab0 	bl	8003274 <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d18:	f7ff faac 	bl	8003274 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1ef      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x45c>
 8003d36:	e018      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7ff fa96 	bl	8003274 <HAL_GetTick>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7ff fa92 	bl	8003274 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1d5      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d039      	beq.n	8003dea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d8a:	f7ff fa73 	bl	8003274 <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d92:	f7ff fa6f 	bl	8003274 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e1b2      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x4d6>
 8003db0:	e01b      	b.n	8003dea <HAL_RCC_OscConfig+0x52e>
 8003db2:	bf00      	nop
 8003db4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003db8:	4b9b      	ldr	r3, [pc, #620]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a9a      	ldr	r2, [pc, #616]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dc4:	f7ff fa56 	bl	8003274 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dcc:	f7ff fa52 	bl	8003274 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e195      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dde:	4b92      	ldr	r3, [pc, #584]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8081 	beq.w	8003efa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003df8:	4b8c      	ldr	r3, [pc, #560]	; (800402c <HAL_RCC_OscConfig+0x770>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a8b      	ldr	r2, [pc, #556]	; (800402c <HAL_RCC_OscConfig+0x770>)
 8003dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e04:	f7ff fa36 	bl	8003274 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e0c:	f7ff fa32 	bl	8003274 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e175      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1e:	4b83      	ldr	r3, [pc, #524]	; (800402c <HAL_RCC_OscConfig+0x770>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d106      	bne.n	8003e40 <HAL_RCC_OscConfig+0x584>
 8003e32:	4b7d      	ldr	r3, [pc, #500]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a7c      	ldr	r2, [pc, #496]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3e:	e02d      	b.n	8003e9c <HAL_RCC_OscConfig+0x5e0>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x5a6>
 8003e48:	4b77      	ldr	r3, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a76      	ldr	r2, [pc, #472]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	4b74      	ldr	r3, [pc, #464]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a73      	ldr	r2, [pc, #460]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x5e0>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c8>
 8003e6a:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b6c      	ldr	r3, [pc, #432]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a6b      	ldr	r2, [pc, #428]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x5e0>
 8003e84:	4b68      	ldr	r3, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a67      	ldr	r2, [pc, #412]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	4b65      	ldr	r3, [pc, #404]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a64      	ldr	r2, [pc, #400]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7ff f9e6 	bl	8003274 <HAL_GetTick>
 8003ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7ff f9e2 	bl	8003274 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e123      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec2:	4b59      	ldr	r3, [pc, #356]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ee      	beq.n	8003eac <HAL_RCC_OscConfig+0x5f0>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7ff f9d0 	bl	8003274 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7ff f9cc 	bl	8003274 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e10d      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ee      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8102 	beq.w	8004108 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f04:	4b48      	ldr	r3, [pc, #288]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f0c:	2b18      	cmp	r3, #24
 8003f0e:	f000 80bd 	beq.w	800408c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	f040 809e 	bne.w	8004058 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1c:	4b42      	ldr	r3, [pc, #264]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a41      	ldr	r2, [pc, #260]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7ff f9a4 	bl	8003274 <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7ff f9a0 	bl	8003274 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0e3      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f42:	4b39      	ldr	r3, [pc, #228]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f4e:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f52:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_RCC_OscConfig+0x774>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	430a      	orrs	r2, r1
 8003f62:	4931      	ldr	r1, [pc, #196]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	628b      	str	r3, [r1, #40]	; 0x28
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	3b01      	subs	r3, #1
 8003f78:	025b      	lsls	r3, r3, #9
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	3b01      	subs	r3, #1
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f98:	4923      	ldr	r1, [pc, #140]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4a21      	ldr	r2, [pc, #132]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_RCC_OscConfig+0x778>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fb6:	00d2      	lsls	r2, r2, #3
 8003fb8:	491b      	ldr	r1, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	f023 020c 	bic.w	r2, r3, #12
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4917      	ldr	r1, [pc, #92]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fd0:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f023 0202 	bic.w	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	4912      	ldr	r1, [pc, #72]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8004000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	4a07      	ldr	r2, [pc, #28]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8004018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7ff f929 	bl	8003274 <HAL_GetTick>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004024:	e011      	b.n	800404a <HAL_RCC_OscConfig+0x78e>
 8004026:	bf00      	nop
 8004028:	58024400 	.word	0x58024400
 800402c:	58024800 	.word	0x58024800
 8004030:	fffffc0c 	.word	0xfffffc0c
 8004034:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7ff f91c 	bl	8003274 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e05f      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800404a:	4b32      	ldr	r3, [pc, #200]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x77c>
 8004056:	e057      	b.n	8004108 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7ff f906 	bl	8003274 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406c:	f7ff f902 	bl	8003274 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e045      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800407e:	4b25      	ldr	r3, [pc, #148]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x7b0>
 800408a:	e03d      	b.n	8004108 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b01      	cmp	r3, #1
 800409e:	d031      	beq.n	8004104 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0203 	and.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d12a      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d122      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11a      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0a5b      	lsrs	r3, r3, #9
 80040d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d111      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d108      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0e1b      	lsrs	r3, r3, #24
 80040f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3730      	adds	r7, #48	; 0x30
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	58024400 	.word	0x58024400

08004118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e19c      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b8a      	ldr	r3, [pc, #552]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b87      	ldr	r3, [pc, #540]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 020f 	bic.w	r2, r3, #15
 8004142:	4985      	ldr	r1, [pc, #532]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b83      	ldr	r3, [pc, #524]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e184      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	4b7b      	ldr	r3, [pc, #492]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004174:	429a      	cmp	r2, r3
 8004176:	d908      	bls.n	800418a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004178:	4b78      	ldr	r3, [pc, #480]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4975      	ldr	r1, [pc, #468]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004186:	4313      	orrs	r3, r2
 8004188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d010      	beq.n	80041b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	4b70      	ldr	r3, [pc, #448]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d908      	bls.n	80041b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a6:	4b6d      	ldr	r3, [pc, #436]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	496a      	ldr	r1, [pc, #424]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d010      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	4b64      	ldr	r3, [pc, #400]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d908      	bls.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041d4:	4b61      	ldr	r3, [pc, #388]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	495e      	ldr	r1, [pc, #376]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d010      	beq.n	8004214 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041fe:	429a      	cmp	r2, r3
 8004200:	d908      	bls.n	8004214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004202:	4b56      	ldr	r3, [pc, #344]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4953      	ldr	r1, [pc, #332]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004210:	4313      	orrs	r3, r2
 8004212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	4b4d      	ldr	r3, [pc, #308]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	429a      	cmp	r2, r3
 800422e:	d908      	bls.n	8004242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f023 020f 	bic.w	r2, r3, #15
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4947      	ldr	r1, [pc, #284]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800423e:	4313      	orrs	r3, r2
 8004240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d055      	beq.n	80042fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800424e:	4b43      	ldr	r3, [pc, #268]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4940      	ldr	r1, [pc, #256]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800425c:	4313      	orrs	r3, r2
 800425e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d107      	bne.n	8004278 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004268:	4b3c      	ldr	r3, [pc, #240]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d121      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0f6      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d115      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0ea      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004298:	4b30      	ldr	r3, [pc, #192]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d109      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0de      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a8:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0d6      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b8:	4b28      	ldr	r3, [pc, #160]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f023 0207 	bic.w	r2, r3, #7
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4925      	ldr	r1, [pc, #148]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fe ffd3 	bl	8003274 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d2:	f7fe ffcf 	bl	8003274 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0be      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e8:	4b1c      	ldr	r3, [pc, #112]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d1eb      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	429a      	cmp	r2, r3
 8004314:	d208      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f023 020f 	bic.w	r2, r3, #15
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	490e      	ldr	r1, [pc, #56]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004324:	4313      	orrs	r3, r2
 8004326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d214      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 020f 	bic.w	r2, r3, #15
 800433e:	4906      	ldr	r1, [pc, #24]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e086      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
 8004358:	52002000 	.word	0x52002000
 800435c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d010      	beq.n	800438e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	4b3f      	ldr	r3, [pc, #252]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004378:	429a      	cmp	r2, r3
 800437a:	d208      	bcs.n	800438e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800437c:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	4939      	ldr	r1, [pc, #228]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 800438a:	4313      	orrs	r3, r2
 800438c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d010      	beq.n	80043bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	4b34      	ldr	r3, [pc, #208]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d208      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043aa:	4b31      	ldr	r3, [pc, #196]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	492e      	ldr	r1, [pc, #184]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d208      	bcs.n	80043ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4922      	ldr	r1, [pc, #136]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d010      	beq.n	8004418 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004402:	429a      	cmp	r2, r3
 8004404:	d208      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004406:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4917      	ldr	r1, [pc, #92]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004414:	4313      	orrs	r3, r2
 8004416:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004418:	f000 f834 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	4912      	ldr	r1, [pc, #72]	; (8004474 <HAL_RCC_ClockConfig+0x35c>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <HAL_RCC_ClockConfig+0x35c>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x360>)
 800444e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004450:	4a0a      	ldr	r2, [pc, #40]	; (800447c <HAL_RCC_ClockConfig+0x364>)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_RCC_ClockConfig+0x368>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fec0 	bl	80031e0 <HAL_InitTick>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	58024400 	.word	0x58024400
 8004474:	08008670 	.word	0x08008670
 8004478:	2400005c 	.word	0x2400005c
 800447c:	24000058 	.word	0x24000058
 8004480:	24000060 	.word	0x24000060

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800448a:	4bb3      	ldr	r3, [pc, #716]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004492:	2b18      	cmp	r3, #24
 8004494:	f200 8155 	bhi.w	8004742 <HAL_RCC_GetSysClockFreq+0x2be>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	08004505 	.word	0x08004505
 80044a4:	08004743 	.word	0x08004743
 80044a8:	08004743 	.word	0x08004743
 80044ac:	08004743 	.word	0x08004743
 80044b0:	08004743 	.word	0x08004743
 80044b4:	08004743 	.word	0x08004743
 80044b8:	08004743 	.word	0x08004743
 80044bc:	08004743 	.word	0x08004743
 80044c0:	0800452b 	.word	0x0800452b
 80044c4:	08004743 	.word	0x08004743
 80044c8:	08004743 	.word	0x08004743
 80044cc:	08004743 	.word	0x08004743
 80044d0:	08004743 	.word	0x08004743
 80044d4:	08004743 	.word	0x08004743
 80044d8:	08004743 	.word	0x08004743
 80044dc:	08004743 	.word	0x08004743
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004743 	.word	0x08004743
 80044e8:	08004743 	.word	0x08004743
 80044ec:	08004743 	.word	0x08004743
 80044f0:	08004743 	.word	0x08004743
 80044f4:	08004743 	.word	0x08004743
 80044f8:	08004743 	.word	0x08004743
 80044fc:	08004743 	.word	0x08004743
 8004500:	08004537 	.word	0x08004537
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	4b94      	ldr	r3, [pc, #592]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004510:	4b91      	ldr	r3, [pc, #580]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	4a90      	ldr	r2, [pc, #576]	; (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004522:	e111      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004524:	4b8d      	ldr	r3, [pc, #564]	; (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004526:	61bb      	str	r3, [r7, #24]
    break;
 8004528:	e10e      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800452a:	4b8d      	ldr	r3, [pc, #564]	; (8004760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800452c:	61bb      	str	r3, [r7, #24]
    break;
 800452e:	e10b      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004530:	4b8c      	ldr	r3, [pc, #560]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004532:	61bb      	str	r3, [r7, #24]
    break;
 8004534:	e108      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004540:	4b85      	ldr	r3, [pc, #532]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800454c:	4b82      	ldr	r3, [pc, #520]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004556:	4b80      	ldr	r3, [pc, #512]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	08db      	lsrs	r3, r3, #3
 800455c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80e1 	beq.w	800473c <HAL_RCC_GetSysClockFreq+0x2b8>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b02      	cmp	r3, #2
 800457e:	f000 8083 	beq.w	8004688 <HAL_RCC_GetSysClockFreq+0x204>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b02      	cmp	r3, #2
 8004586:	f200 80a1 	bhi.w	80046cc <HAL_RCC_GetSysClockFreq+0x248>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCC_GetSysClockFreq+0x114>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d056      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004596:	e099      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004598:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02d      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045a4:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	08db      	lsrs	r3, r3, #3
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	4a6b      	ldr	r2, [pc, #428]	; (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
 80045b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	ee07 3a90 	vmov	s15, r3
 80045bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b62      	ldr	r3, [pc, #392]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045fe:	e087      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800476c <HAL_RCC_GetSysClockFreq+0x2e8>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b51      	ldr	r3, [pc, #324]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a02 	vldr	s12, [r7, #8]
 8004626:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004642:	e065      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004770 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b40      	ldr	r3, [pc, #256]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a02 	vldr	s12, [r7, #8]
 800466a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004686:	e043      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004774 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469a:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ca:	e021      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004770 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80046f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800470e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	0a5b      	lsrs	r3, r3, #9
 8004716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471a:	3301      	adds	r3, #1
 800471c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004728:	edd7 6a07 	vldr	s13, [r7, #28]
 800472c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004734:	ee17 3a90 	vmov	r3, s15
 8004738:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800473a:	e005      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    break;
 8004740:	e002      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004744:	61bb      	str	r3, [r7, #24]
    break;
 8004746:	bf00      	nop
  }

  return sysclockfreq;
 8004748:	69bb      	ldr	r3, [r7, #24]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3724      	adds	r7, #36	; 0x24
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400
 800475c:	03d09000 	.word	0x03d09000
 8004760:	003d0900 	.word	0x003d0900
 8004764:	017d7840 	.word	0x017d7840
 8004768:	46000000 	.word	0x46000000
 800476c:	4c742400 	.word	0x4c742400
 8004770:	4a742400 	.word	0x4a742400
 8004774:	4bbebc20 	.word	0x4bbebc20

08004778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800477e:	f7ff fe81 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004782:	4602      	mov	r2, r0
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	490f      	ldr	r1, [pc, #60]	; (80047cc <HAL_RCC_GetHCLKFreq+0x54>)
 8004790:	5ccb      	ldrb	r3, [r1, r3]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	4a09      	ldr	r2, [pc, #36]	; (80047cc <HAL_RCC_GetHCLKFreq+0x54>)
 80047a6:	5cd3      	ldrb	r3, [r2, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80047b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047b6:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	08008670 	.word	0x08008670
 80047d0:	2400005c 	.word	0x2400005c
 80047d4:	24000058 	.word	0x24000058

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047dc:	f7ff ffcc 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58024400 	.word	0x58024400
 8004800:	08008670 	.word	0x08008670

08004804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004808:	f7ff ffb6 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCC_GetPCLK2Freq+0x28>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	58024400 	.word	0x58024400
 800482c:	08008670 	.word	0x08008670

08004830 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004838:	2300      	movs	r3, #0
 800483a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800483c:	2300      	movs	r3, #0
 800483e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d03f      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004854:	d02a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800485a:	d824      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800485c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004860:	d018      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004866:	d81e      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800486c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004870:	d007      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004872:	e018      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004874:	4ba3      	ldr	r3, [pc, #652]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	4aa2      	ldr	r2, [pc, #648]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800487a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004880:	e015      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3304      	adds	r3, #4
 8004886:	2102      	movs	r1, #2
 8004888:	4618      	mov	r0, r3
 800488a:	f001 f9d5 	bl	8005c38 <RCCEx_PLL2_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004892:	e00c      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3324      	adds	r3, #36	; 0x24
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f001 fa7e 	bl	8005d9c <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048a4:	e003      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
      break;
 80048aa:	e000      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048b4:	4b93      	ldr	r3, [pc, #588]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c0:	4990      	ldr	r1, [pc, #576]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	650b      	str	r3, [r1, #80]	; 0x50
 80048c6:	e001      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
 80048ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d03d      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d826      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048e0:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	080048fd 	.word	0x080048fd
 80048ec:	0800490b 	.word	0x0800490b
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	08004935 	.word	0x08004935
 80048f8:	08004935 	.word	0x08004935
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048fc:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	4a80      	ldr	r2, [pc, #512]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004908:	e015      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3304      	adds	r3, #4
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f001 f991 	bl	8005c38 <RCCEx_PLL2_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800491a:	e00c      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3324      	adds	r3, #36	; 0x24
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f001 fa3a 	bl	8005d9c <RCCEx_PLL3_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      break;
 8004932:	e000      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800493c:	4b71      	ldr	r3, [pc, #452]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800493e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004940:	f023 0207 	bic.w	r2, r3, #7
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	496e      	ldr	r1, [pc, #440]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	650b      	str	r3, [r1, #80]	; 0x50
 800494e:	e001      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495c:	2b00      	cmp	r3, #0
 800495e:	d042      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004968:	d02b      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800496a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496e:	d825      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004970:	2bc0      	cmp	r3, #192	; 0xc0
 8004972:	d028      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004974:	2bc0      	cmp	r3, #192	; 0xc0
 8004976:	d821      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d016      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d81d      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d007      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004988:	e018      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498a:	4b5e      	ldr	r3, [pc, #376]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	4a5d      	ldr	r2, [pc, #372]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004996:	e017      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 f94a 	bl	8005c38 <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049a8:	e00e      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3324      	adds	r3, #36	; 0x24
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f001 f9f3 	bl	8005d9c <RCCEx_PLL3_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049ba:	e005      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	75fb      	strb	r3, [r7, #23]
      break;
 80049c0:	e002      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049ce:	4b4d      	ldr	r3, [pc, #308]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	494a      	ldr	r1, [pc, #296]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	650b      	str	r3, [r1, #80]	; 0x50
 80049e0:	e001      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d049      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049fc:	d030      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80049fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a02:	d82a      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a08:	d02c      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004a0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a0e:	d824      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a14:	d018      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1a:	d81e      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a24:	d007      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a26:	e018      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a28:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	4a35      	ldr	r2, [pc, #212]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a34:	e017      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 f8fb 	bl	8005c38 <RCCEx_PLL2_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a46:	e00e      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3324      	adds	r3, #36	; 0x24
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 f9a4 	bl	8005d9c <RCCEx_PLL3_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a58:	e005      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5e:	e002      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a60:	bf00      	nop
 8004a62:	e000      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a6c:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a7a:	4922      	ldr	r1, [pc, #136]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	658b      	str	r3, [r1, #88]	; 0x58
 8004a80:	e001      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d04b      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a9c:	d030      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aa2:	d82a      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004aa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aa8:	d02e      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004aaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aae:	d824      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab4:	d018      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aba:	d81e      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac4:	d007      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ac6:	e018      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ad4:	e019      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 f8ab 	bl	8005c38 <RCCEx_PLL2_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ae6:	e010      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3324      	adds	r3, #36	; 0x24
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 f954 	bl	8005d9c <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004af8:	e007      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
      break;
 8004afe:	e004      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004b00:	bf00      	nop
 8004b02:	e002      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004b04:	58024400 	.word	0x58024400
      break;
 8004b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b10:	4b99      	ldr	r3, [pc, #612]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b1e:	4996      	ldr	r1, [pc, #600]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	658b      	str	r3, [r1, #88]	; 0x58
 8004b24:	e001      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d032      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3a:	2b30      	cmp	r3, #48	; 0x30
 8004b3c:	d01c      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004b3e:	2b30      	cmp	r3, #48	; 0x30
 8004b40:	d817      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d00c      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d813      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d016      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d10f      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b52:	4b89      	ldr	r3, [pc, #548]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a88      	ldr	r2, [pc, #544]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b5e:	e00e      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	2102      	movs	r1, #2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 f866 	bl	8005c38 <RCCEx_PLL2_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b70:	e005      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b84:	4b7c      	ldr	r3, [pc, #496]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b90:	4979      	ldr	r1, [pc, #484]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b96:	e001      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d047      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb0:	d030      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb6:	d82a      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004bb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bbc:	d02c      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004bbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bc2:	d824      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc8:	d018      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bce:	d81e      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d007      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004bda:	e018      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bdc:	4b66      	ldr	r3, [pc, #408]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a65      	ldr	r2, [pc, #404]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004be8:	e017      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f821 	bl	8005c38 <RCCEx_PLL2_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bfa:	e00e      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 f8ca 	bl	8005d9c <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c0c:	e005      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
      break;
 8004c12:	e002      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004c14:	bf00      	nop
 8004c16:	e000      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c20:	4b55      	ldr	r3, [pc, #340]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	4952      	ldr	r1, [pc, #328]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	650b      	str	r3, [r1, #80]	; 0x50
 8004c32:	e001      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d049      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c4c:	d02e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c52:	d828      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c58:	d02a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c5e:	d822      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c64:	d026      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c6a:	d81c      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c70:	d010      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c76:	d816      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01d      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d111      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3304      	adds	r3, #4
 8004c86:	2101      	movs	r1, #1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 ffd5 	bl	8005c38 <RCCEx_PLL2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c92:	e012      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3324      	adds	r3, #36	; 0x24
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 f87e 	bl	8005d9c <RCCEx_PLL3_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ca4:	e009      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8004caa:	e006      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004cac:	bf00      	nop
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004cb0:	bf00      	nop
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ccc:	492a      	ldr	r1, [pc, #168]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	650b      	str	r3, [r1, #80]	; 0x50
 8004cd2:	e001      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d04d      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cee:	d02e      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cf4:	d828      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d02a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d822      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d06:	d026      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d0c:	d81c      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d010      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d18:	d816      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01d      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d22:	d111      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 ff84 	bl	8005c38 <RCCEx_PLL2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d34:	e012      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3324      	adds	r3, #36	; 0x24
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 f82d 	bl	8005d9c <RCCEx_PLL3_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d46:	e009      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4c:	e006      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e004      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d52:	bf00      	nop
 8004d54:	e002      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d56:	bf00      	nop
 8004d58:	e000      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5c:	7dfb      	ldrb	r3, [r7, #23]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d70:	4901      	ldr	r1, [pc, #4]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	658b      	str	r3, [r1, #88]	; 0x58
 8004d76:	e003      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02f      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d94:	d00e      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9a:	d814      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da4:	d10f      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da6:	4baf      	ldr	r3, [pc, #700]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	4aae      	ldr	r2, [pc, #696]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004db2:	e00c      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	2101      	movs	r1, #1
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 ff3c 	bl	8005c38 <RCCEx_PLL2_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dc4:	e003      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dd4:	4ba3      	ldr	r3, [pc, #652]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de0:	49a0      	ldr	r1, [pc, #640]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	650b      	str	r3, [r1, #80]	; 0x50
 8004de6:	e001      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d032      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d81b      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e3f 	.word	0x08004e3f
 8004e0c:	08004e19 	.word	0x08004e19
 8004e10:	08004e27 	.word	0x08004e27
 8004e14:	08004e3f 	.word	0x08004e3f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e18:	4b92      	ldr	r3, [pc, #584]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	4a91      	ldr	r2, [pc, #580]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e24:	e00c      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	2102      	movs	r1, #2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 ff03 	bl	8005c38 <RCCEx_PLL2_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e46:	4b87      	ldr	r3, [pc, #540]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4a:	f023 0203 	bic.w	r2, r3, #3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	4984      	ldr	r1, [pc, #528]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e58:	e001      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8086 	beq.w	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e6c:	4b7e      	ldr	r3, [pc, #504]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a7d      	ldr	r2, [pc, #500]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e78:	f7fe f9fc 	bl	8003274 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7e:	e009      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e80:	f7fe f9f8 	bl	8003274 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d902      	bls.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	75fb      	strb	r3, [r7, #23]
        break;
 8004e92:	e005      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e94:	4b74      	ldr	r3, [pc, #464]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ef      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d166      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ea6:	4b6f      	ldr	r3, [pc, #444]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eb0:	4053      	eors	r3, r2
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d013      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eba:	4b6a      	ldr	r3, [pc, #424]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ec4:	4b67      	ldr	r3, [pc, #412]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a66      	ldr	r2, [pc, #408]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed0:	4b64      	ldr	r3, [pc, #400]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	4a63      	ldr	r2, [pc, #396]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eda:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004edc:	4a61      	ldr	r2, [pc, #388]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eec:	d115      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eee:	f7fe f9c1 	bl	8003274 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef4:	e00b      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef6:	f7fe f9bd 	bl	8003274 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d902      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f0c:	e005      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f0e:	4b55      	ldr	r3, [pc, #340]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ed      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d126      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f2e:	d10d      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004f30:	4b4c      	ldr	r3, [pc, #304]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f3e:	0919      	lsrs	r1, r3, #4
 8004f40:	4b4a      	ldr	r3, [pc, #296]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004f42:	400b      	ands	r3, r1
 8004f44:	4947      	ldr	r1, [pc, #284]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	610b      	str	r3, [r1, #16]
 8004f4a:	e005      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f4c:	4b45      	ldr	r3, [pc, #276]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	4a44      	ldr	r2, [pc, #272]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f56:	6113      	str	r3, [r2, #16]
 8004f58:	4b42      	ldr	r3, [pc, #264]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f66:	493f      	ldr	r1, [pc, #252]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	670b      	str	r3, [r1, #112]	; 0x70
 8004f6c:	e004      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	75bb      	strb	r3, [r7, #22]
 8004f72:	e001      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8085 	beq.w	8005090 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8a:	2b28      	cmp	r3, #40	; 0x28
 8004f8c:	d866      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08005071 	.word	0x08005071
 8004f98:	0800505d 	.word	0x0800505d
 8004f9c:	0800505d 	.word	0x0800505d
 8004fa0:	0800505d 	.word	0x0800505d
 8004fa4:	0800505d 	.word	0x0800505d
 8004fa8:	0800505d 	.word	0x0800505d
 8004fac:	0800505d 	.word	0x0800505d
 8004fb0:	0800505d 	.word	0x0800505d
 8004fb4:	08005039 	.word	0x08005039
 8004fb8:	0800505d 	.word	0x0800505d
 8004fbc:	0800505d 	.word	0x0800505d
 8004fc0:	0800505d 	.word	0x0800505d
 8004fc4:	0800505d 	.word	0x0800505d
 8004fc8:	0800505d 	.word	0x0800505d
 8004fcc:	0800505d 	.word	0x0800505d
 8004fd0:	0800505d 	.word	0x0800505d
 8004fd4:	0800504b 	.word	0x0800504b
 8004fd8:	0800505d 	.word	0x0800505d
 8004fdc:	0800505d 	.word	0x0800505d
 8004fe0:	0800505d 	.word	0x0800505d
 8004fe4:	0800505d 	.word	0x0800505d
 8004fe8:	0800505d 	.word	0x0800505d
 8004fec:	0800505d 	.word	0x0800505d
 8004ff0:	0800505d 	.word	0x0800505d
 8004ff4:	08005071 	.word	0x08005071
 8004ff8:	0800505d 	.word	0x0800505d
 8004ffc:	0800505d 	.word	0x0800505d
 8005000:	0800505d 	.word	0x0800505d
 8005004:	0800505d 	.word	0x0800505d
 8005008:	0800505d 	.word	0x0800505d
 800500c:	0800505d 	.word	0x0800505d
 8005010:	0800505d 	.word	0x0800505d
 8005014:	08005071 	.word	0x08005071
 8005018:	0800505d 	.word	0x0800505d
 800501c:	0800505d 	.word	0x0800505d
 8005020:	0800505d 	.word	0x0800505d
 8005024:	0800505d 	.word	0x0800505d
 8005028:	0800505d 	.word	0x0800505d
 800502c:	0800505d 	.word	0x0800505d
 8005030:	0800505d 	.word	0x0800505d
 8005034:	08005071 	.word	0x08005071
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	2101      	movs	r1, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fdfa 	bl	8005c38 <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005048:	e013      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3324      	adds	r3, #36	; 0x24
 800504e:	2101      	movs	r1, #1
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fea3 	bl	8005d9c <RCCEx_PLL3_Config>
 8005056:	4603      	mov	r3, r0
 8005058:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800505a:	e00a      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	75fb      	strb	r3, [r7, #23]
      break;
 8005060:	e007      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005062:	bf00      	nop
 8005064:	58024400 	.word	0x58024400
 8005068:	58024800 	.word	0x58024800
 800506c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005072:	7dfb      	ldrb	r3, [r7, #23]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005078:	4b96      	ldr	r3, [pc, #600]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800507a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005084:	4993      	ldr	r1, [pc, #588]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005086:	4313      	orrs	r3, r2
 8005088:	654b      	str	r3, [r1, #84]	; 0x54
 800508a:	e001      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d038      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a0:	2b05      	cmp	r3, #5
 80050a2:	d821      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050ef 	.word	0x080050ef
 80050b0:	080050c5 	.word	0x080050c5
 80050b4:	080050d7 	.word	0x080050d7
 80050b8:	080050ef 	.word	0x080050ef
 80050bc:	080050ef 	.word	0x080050ef
 80050c0:	080050ef 	.word	0x080050ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	2101      	movs	r1, #1
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fdb4 	bl	8005c38 <RCCEx_PLL2_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050d4:	e00c      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fe5d 	bl	8005d9c <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050e6:	e003      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	e000      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80050ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050f6:	4b77      	ldr	r3, [pc, #476]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	f023 0207 	bic.w	r2, r3, #7
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005102:	4974      	ldr	r1, [pc, #464]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005104:	4313      	orrs	r3, r2
 8005106:	654b      	str	r3, [r1, #84]	; 0x54
 8005108:	e001      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d03a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	2b05      	cmp	r3, #5
 8005122:	d821      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	0800516f 	.word	0x0800516f
 8005130:	08005145 	.word	0x08005145
 8005134:	08005157 	.word	0x08005157
 8005138:	0800516f 	.word	0x0800516f
 800513c:	0800516f 	.word	0x0800516f
 8005140:	0800516f 	.word	0x0800516f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	2101      	movs	r1, #1
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fd74 	bl	8005c38 <RCCEx_PLL2_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005154:	e00c      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3324      	adds	r3, #36	; 0x24
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fe1d 	bl	8005d9c <RCCEx_PLL3_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005166:	e003      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	75fb      	strb	r3, [r7, #23]
      break;
 800516c:	e000      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800516e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005176:	4b57      	ldr	r3, [pc, #348]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	f023 0207 	bic.w	r2, r3, #7
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	4953      	ldr	r1, [pc, #332]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005186:	4313      	orrs	r3, r2
 8005188:	658b      	str	r3, [r1, #88]	; 0x58
 800518a:	e001      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d04b      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051a6:	d02e      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80051a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ac:	d828      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d02a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d822      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80051ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051be:	d026      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80051c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051c4:	d81c      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80051c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ca:	d010      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d0:	d816      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01d      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80051d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051da:	d111      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fd28 	bl	8005c38 <RCCEx_PLL2_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051ec:	e012      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3324      	adds	r3, #36	; 0x24
 80051f2:	2102      	movs	r1, #2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fdd1 	bl	8005d9c <RCCEx_PLL3_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051fe:	e009      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
      break;
 8005204:	e006      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005206:	bf00      	nop
 8005208:	e004      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800521a:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005228:	492a      	ldr	r1, [pc, #168]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	654b      	str	r3, [r1, #84]	; 0x54
 800522e:	e001      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d04d      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005246:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800524a:	d02e      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800524c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005250:	d828      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	d02a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525c:	d822      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800525e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005262:	d026      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005268:	d81c      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800526a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526e:	d010      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005274:	d816      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01d      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527e:	d111      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fcd6 	bl	8005c38 <RCCEx_PLL2_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005290:	e012      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3324      	adds	r3, #36	; 0x24
 8005296:	2102      	movs	r1, #2
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fd7f 	bl	8005d9c <RCCEx_PLL3_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052a2:	e009      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
      break;
 80052a8:	e006      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80052aa:	bf00      	nop
 80052ac:	e004      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80052ae:	bf00      	nop
 80052b0:	e002      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80052b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052cc:	4901      	ldr	r1, [pc, #4]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	658b      	str	r3, [r1, #88]	; 0x58
 80052d2:	e003      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80052d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d04b      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052f2:	d02e      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80052f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052f8:	d828      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fe:	d02a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005304:	d822      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005306:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800530a:	d026      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800530c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005310:	d81c      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005316:	d010      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531c:	d816      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01d      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005326:	d111      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fc82 	bl	8005c38 <RCCEx_PLL2_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005338:	e012      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	2102      	movs	r1, #2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd2b 	bl	8005d9c <RCCEx_PLL3_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800534a:	e009      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
      break;
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005352:	bf00      	nop
 8005354:	e004      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800535e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005366:	4b9d      	ldr	r3, [pc, #628]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005374:	4999      	ldr	r1, [pc, #612]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005376:	4313      	orrs	r3, r2
 8005378:	658b      	str	r3, [r1, #88]	; 0x58
 800537a:	e001      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	d10a      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3324      	adds	r3, #36	; 0x24
 800539c:	2102      	movs	r1, #2
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fcfc 	bl	8005d9c <RCCEx_PLL3_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053ae:	4b8b      	ldr	r3, [pc, #556]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053bc:	4987      	ldr	r1, [pc, #540]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d01a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d8:	d10a      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3324      	adds	r3, #36	; 0x24
 80053de:	2102      	movs	r1, #2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fcdb 	bl	8005d9c <RCCEx_PLL3_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053f0:	4b7a      	ldr	r3, [pc, #488]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fe:	4977      	ldr	r1, [pc, #476]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005400:	4313      	orrs	r3, r2
 8005402:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d034      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800541a:	d01d      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800541c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005420:	d817      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542a:	d009      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800542c:	e011      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fbff 	bl	8005c38 <RCCEx_PLL2_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800543e:	e00c      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3324      	adds	r3, #36	; 0x24
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fca8 	bl	8005d9c <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005450:	e003      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
      break;
 8005456:	e000      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005460:	4b5e      	ldr	r3, [pc, #376]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800546e:	495b      	ldr	r1, [pc, #364]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005470:	4313      	orrs	r3, r2
 8005472:	658b      	str	r3, [r1, #88]	; 0x58
 8005474:	e001      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d033      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005490:	d01c      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005496:	d816      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800549c:	d003      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800549e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a2:	d007      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80054a4:	e00f      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a6:	4b4d      	ldr	r3, [pc, #308]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	4a4c      	ldr	r2, [pc, #304]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80054b2:	e00c      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3324      	adds	r3, #36	; 0x24
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fc6e 	bl	8005d9c <RCCEx_PLL3_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ca:	e000      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80054cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d4:	4b41      	ldr	r3, [pc, #260]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e2:	493e      	ldr	r1, [pc, #248]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	654b      	str	r3, [r1, #84]	; 0x54
 80054e8:	e001      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d029      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005506:	d007      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005508:	e00f      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800550a:	4b34      	ldr	r3, [pc, #208]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	4a33      	ldr	r2, [pc, #204]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005514:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005516:	e00b      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	2102      	movs	r1, #2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fb8a 	bl	8005c38 <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005528:	e002      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]
      break;
 800552e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005536:	4b29      	ldr	r3, [pc, #164]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005542:	4926      	ldr	r1, [pc, #152]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005544:	4313      	orrs	r3, r2
 8005546:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005548:	e001      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3324      	adds	r3, #36	; 0x24
 800555e:	2102      	movs	r1, #2
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fc1b 	bl	8005d9c <RCCEx_PLL3_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d033      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005584:	d017      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	d811      	bhi.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800558c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005590:	d013      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005596:	d80b      	bhi.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800559c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a0:	d106      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a2:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	4a0d      	ldr	r2, [pc, #52]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80055ae:	e007      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	75fb      	strb	r3, [r7, #23]
      break;
 80055b4:	e004      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80055b6:	bf00      	nop
 80055b8:	e002      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80055be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d2:	4902      	ldr	r1, [pc, #8]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	654b      	str	r3, [r1, #84]	; 0x54
 80055d8:	e004      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80055da:	bf00      	nop
 80055dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055f0:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	492e      	ldr	r1, [pc, #184]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800560e:	4b2a      	ldr	r3, [pc, #168]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800561c:	4926      	ldr	r1, [pc, #152]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800561e:	4313      	orrs	r3, r2
 8005620:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800562e:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005632:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800563a:	491f      	ldr	r1, [pc, #124]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800563c:	4313      	orrs	r3, r2
 800563e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00d      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005652:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005656:	6113      	str	r3, [r2, #16]
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005662:	4915      	ldr	r1, [pc, #84]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	da08      	bge.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005670:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005674:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	490e      	ldr	r1, [pc, #56]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800567e:	4313      	orrs	r3, r2
 8005680:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	4906      	ldr	r1, [pc, #24]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80056a2:	7dbb      	ldrb	r3, [r7, #22]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	58024400 	.word	0x58024400

080056bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056c0:	f7ff f85a 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	4904      	ldr	r1, [pc, #16]	; (80056e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056d2:	5ccb      	ldrb	r3, [r1, r3]
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056dc:	4618      	mov	r0, r3
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	58024400 	.word	0x58024400
 80056e4:	08008670 	.word	0x08008670

080056e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056f0:	4ba1      	ldr	r3, [pc, #644]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80056fa:	4b9f      	ldr	r3, [pc, #636]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	0b1b      	lsrs	r3, r3, #12
 8005700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005704:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005706:	4b9c      	ldr	r3, [pc, #624]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005712:	4b99      	ldr	r3, [pc, #612]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	08db      	lsrs	r3, r3, #3
 8005718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	fb02 f303 	mul.w	r3, r2, r3
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8111 	beq.w	8005958 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b02      	cmp	r3, #2
 800573a:	f000 8083 	beq.w	8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b02      	cmp	r3, #2
 8005742:	f200 80a1 	bhi.w	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d056      	beq.n	8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005752:	e099      	b.n	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005754:	4b88      	ldr	r3, [pc, #544]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d02d      	beq.n	80057bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005760:	4b85      	ldr	r3, [pc, #532]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	08db      	lsrs	r3, r3, #3
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	4a84      	ldr	r2, [pc, #528]	; (800597c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
 8005770:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	ee07 3a90 	vmov	s15, r3
 8005778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578a:	4b7b      	ldr	r3, [pc, #492]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579a:	ed97 6a03 	vldr	s12, [r7, #12]
 800579e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057ba:	e087      	b.n	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	4b6a      	ldr	r3, [pc, #424]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057fe:	e065      	b.n	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b59      	ldr	r3, [pc, #356]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	ed97 6a03 	vldr	s12, [r7, #12]
 8005826:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005842:	e043      	b.n	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800598c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005856:	4b48      	ldr	r3, [pc, #288]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a03 	vldr	s12, [r7, #12]
 800586a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005886:	e021      	b.n	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589a:	4b37      	ldr	r3, [pc, #220]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058cc:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	0a5b      	lsrs	r3, r3, #9
 80058d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f2:	ee17 2a90 	vmov	r2, s15
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80058fa:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	0c1b      	lsrs	r3, r3, #16
 8005900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005914:	edd7 6a07 	vldr	s13, [r7, #28]
 8005918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005920:	ee17 2a90 	vmov	r2, s15
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005928:	4b13      	ldr	r3, [pc, #76]	; (8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	0e1b      	lsrs	r3, r3, #24
 800592e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800593e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005942:	edd7 6a07 	vldr	s13, [r7, #28]
 8005946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800594a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800594e:	ee17 2a90 	vmov	r2, s15
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005956:	e008      	b.n	800596a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
}
 800596a:	bf00      	nop
 800596c:	3724      	adds	r7, #36	; 0x24
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	03d09000 	.word	0x03d09000
 8005980:	46000000 	.word	0x46000000
 8005984:	4c742400 	.word	0x4c742400
 8005988:	4a742400 	.word	0x4a742400
 800598c:	4bbebc20 	.word	0x4bbebc20

08005990 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005998:	4ba1      	ldr	r3, [pc, #644]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80059a2:	4b9f      	ldr	r3, [pc, #636]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	0d1b      	lsrs	r3, r3, #20
 80059a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059ae:	4b9c      	ldr	r3, [pc, #624]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059ba:	4b99      	ldr	r3, [pc, #612]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	08db      	lsrs	r3, r3, #3
 80059c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8111 	beq.w	8005c00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	f000 8083 	beq.w	8005aec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	f200 80a1 	bhi.w	8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d056      	beq.n	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059fa:	e099      	b.n	8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059fc:	4b88      	ldr	r3, [pc, #544]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d02d      	beq.n	8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a08:	4b85      	ldr	r3, [pc, #532]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	08db      	lsrs	r3, r3, #3
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	4a84      	ldr	r2, [pc, #528]	; (8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
 8005a18:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a32:	4b7b      	ldr	r3, [pc, #492]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a62:	e087      	b.n	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a76:	4b6a      	ldr	r3, [pc, #424]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa6:	e065      	b.n	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aba:	4b59      	ldr	r3, [pc, #356]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ace:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aea:	e043      	b.n	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afe:	4b48      	ldr	r3, [pc, #288]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b2e:	e021      	b.n	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b42:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b74:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	0a5b      	lsrs	r3, r3, #9
 8005b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9a:	ee17 2a90 	vmov	r2, s15
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005ba2:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc8:	ee17 2a90 	vmov	r2, s15
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	0e1b      	lsrs	r3, r3, #24
 8005bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf6:	ee17 2a90 	vmov	r2, s15
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bfe:	e008      	b.n	8005c12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
}
 8005c12:	bf00      	nop
 8005c14:	3724      	adds	r7, #36	; 0x24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	58024400 	.word	0x58024400
 8005c24:	03d09000 	.word	0x03d09000
 8005c28:	46000000 	.word	0x46000000
 8005c2c:	4c742400 	.word	0x4c742400
 8005c30:	4a742400 	.word	0x4a742400
 8005c34:	4bbebc20 	.word	0x4bbebc20

08005c38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c46:	4b53      	ldr	r3, [pc, #332]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d101      	bne.n	8005c56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e099      	b.n	8005d8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c56:	4b4f      	ldr	r3, [pc, #316]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a4e      	ldr	r2, [pc, #312]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005c5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c62:	f7fd fb07 	bl	8003274 <HAL_GetTick>
 8005c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c68:	e008      	b.n	8005c7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c6a:	f7fd fb03 	bl	8003274 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e086      	b.n	8005d8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c7c:	4b45      	ldr	r3, [pc, #276]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c88:	4b42      	ldr	r3, [pc, #264]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	031b      	lsls	r3, r3, #12
 8005c96:	493f      	ldr	r1, [pc, #252]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	025b      	lsls	r3, r3, #9
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	041b      	lsls	r3, r3, #16
 8005cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	061b      	lsls	r3, r3, #24
 8005cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ccc:	4931      	ldr	r1, [pc, #196]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cd2:	4b30      	ldr	r3, [pc, #192]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	492d      	ldr	r1, [pc, #180]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ce4:	4b2b      	ldr	r3, [pc, #172]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	f023 0220 	bic.w	r2, r3, #32
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	4928      	ldr	r1, [pc, #160]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005cf6:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005cfc:	f023 0310 	bic.w	r3, r3, #16
 8005d00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d06:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <RCCEx_PLL2_Config+0x160>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	69d2      	ldr	r2, [r2, #28]
 8005d0e:	00d2      	lsls	r2, r2, #3
 8005d10:	4920      	ldr	r1, [pc, #128]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d16:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d1c:	f043 0310 	orr.w	r3, r3, #16
 8005d20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d28:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4a19      	ldr	r2, [pc, #100]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d34:	e00f      	b.n	8005d56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d106      	bne.n	8005d4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d3c:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d48:	e005      	b.n	8005d56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d4a:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d56:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d62:	f7fd fa87 	bl	8003274 <HAL_GetTick>
 8005d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d68:	e008      	b.n	8005d7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d6a:	f7fd fa83 	bl	8003274 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e006      	b.n	8005d8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <RCCEx_PLL2_Config+0x15c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	58024400 	.word	0x58024400
 8005d98:	ffff0007 	.word	0xffff0007

08005d9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005daa:	4b53      	ldr	r3, [pc, #332]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d101      	bne.n	8005dba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e099      	b.n	8005eee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005dba:	4b4f      	ldr	r3, [pc, #316]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a4e      	ldr	r2, [pc, #312]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc6:	f7fd fa55 	bl	8003274 <HAL_GetTick>
 8005dca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dcc:	e008      	b.n	8005de0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dce:	f7fd fa51 	bl	8003274 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e086      	b.n	8005eee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005de0:	4b45      	ldr	r3, [pc, #276]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f0      	bne.n	8005dce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005dec:	4b42      	ldr	r3, [pc, #264]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	051b      	lsls	r3, r3, #20
 8005dfa:	493f      	ldr	r1, [pc, #252]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	628b      	str	r3, [r1, #40]	; 0x28
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	025b      	lsls	r3, r3, #9
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	061b      	lsls	r3, r3, #24
 8005e2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e30:	4931      	ldr	r1, [pc, #196]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e36:	4b30      	ldr	r3, [pc, #192]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	492d      	ldr	r1, [pc, #180]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e48:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	4928      	ldr	r1, [pc, #160]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e5a:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e66:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <RCCEx_PLL3_Config+0x160>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	69d2      	ldr	r2, [r2, #28]
 8005e72:	00d2      	lsls	r2, r2, #3
 8005e74:	4920      	ldr	r1, [pc, #128]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e7a:	4b1f      	ldr	r3, [pc, #124]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d106      	bne.n	8005e9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e8c:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e98:	e00f      	b.n	8005eba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d106      	bne.n	8005eae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ea0:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	4a14      	ldr	r2, [pc, #80]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005ea6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005eac:	e005      	b.n	8005eba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005eba:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a0e      	ldr	r2, [pc, #56]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ec6:	f7fd f9d5 	bl	8003274 <HAL_GetTick>
 8005eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ecc:	e008      	b.n	8005ee0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ece:	f7fd f9d1 	bl	8003274 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e006      	b.n	8005eee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <RCCEx_PLL3_Config+0x15c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0f0      	beq.n	8005ece <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	58024400 	.word	0x58024400
 8005efc:	ffff0007 	.word	0xffff0007

08005f00 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e03e      	b.n	8005f94 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7fc ffae 	bl	8002e8c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3308      	adds	r3, #8
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f001 f936 	bl	80071ac <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	f001 f9be 	bl	80072cc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6858      	ldr	r0, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	f001 fa05 	bl	800736c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	6892      	ldr	r2, [r2, #8]
 8005f6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	6892      	ldr	r2, [r2, #8]
 8005f76:	f041 0101 	orr.w	r1, r1, #1
 8005f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <HAL_SRAM_Init+0x9c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a06      	ldr	r2, [pc, #24]	; (8005f9c <HAL_SRAM_Init+0x9c>)
 8005f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f88:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	52004000 	.word	0x52004000

08005fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e042      	b.n	8006038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fc fe59 	bl	8002c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2224      	movs	r2, #36	; 0x24
 8005fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f8c2 	bl	800616c <UART_SetConfig>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e022      	b.n	8006038 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fe1e 	bl	8006c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800600e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800601e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fea5 	bl	8006d80 <UART_CheckIdleState>
 8006036:	4603      	mov	r3, r0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08a      	sub	sp, #40	; 0x28
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006056:	2b20      	cmp	r3, #32
 8006058:	f040 8083 	bne.w	8006162 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_UART_Transmit+0x28>
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e07b      	b.n	8006164 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_UART_Transmit+0x3a>
 8006076:	2302      	movs	r3, #2
 8006078:	e074      	b.n	8006164 <HAL_UART_Transmit+0x124>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2221      	movs	r2, #33	; 0x21
 800608e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006092:	f7fd f8ef 	bl	8003274 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b0:	d108      	bne.n	80060c4 <HAL_UART_Transmit+0x84>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e003      	b.n	80060cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80060d4:	e02c      	b.n	8006130 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fe98 	bl	8006e16 <UART_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e039      	b.n	8006164 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	3302      	adds	r3, #2
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	e007      	b.n	800611e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	3301      	adds	r3, #1
 800611c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1cc      	bne.n	80060d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2200      	movs	r2, #0
 8006144:	2140      	movs	r1, #64	; 0x40
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fe65 	bl	8006e16 <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e006      	b.n	8006164 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800616c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006170:	b092      	sub	sp, #72	; 0x48
 8006172:	af00      	add	r7, sp, #0
 8006174:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	431a      	orrs	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	431a      	orrs	r2, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	4313      	orrs	r3, r2
 8006192:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	4bbe      	ldr	r3, [pc, #760]	; (8006494 <UART_SetConfig+0x328>)
 800619c:	4013      	ands	r3, r2
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4ab3      	ldr	r2, [pc, #716]	; (8006498 <UART_SetConfig+0x32c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d004      	beq.n	80061d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d4:	4313      	orrs	r3, r2
 80061d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	4baf      	ldr	r3, [pc, #700]	; (800649c <UART_SetConfig+0x330>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	6812      	ldr	r2, [r2, #0]
 80061e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061e8:	430b      	orrs	r3, r1
 80061ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	f023 010f 	bic.w	r1, r3, #15
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4aa6      	ldr	r2, [pc, #664]	; (80064a0 <UART_SetConfig+0x334>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d177      	bne.n	80062fc <UART_SetConfig+0x190>
 800620c:	4ba5      	ldr	r3, [pc, #660]	; (80064a4 <UART_SetConfig+0x338>)
 800620e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006210:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006214:	2b28      	cmp	r3, #40	; 0x28
 8006216:	d86d      	bhi.n	80062f4 <UART_SetConfig+0x188>
 8006218:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <UART_SetConfig+0xb4>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	080062c5 	.word	0x080062c5
 8006224:	080062f5 	.word	0x080062f5
 8006228:	080062f5 	.word	0x080062f5
 800622c:	080062f5 	.word	0x080062f5
 8006230:	080062f5 	.word	0x080062f5
 8006234:	080062f5 	.word	0x080062f5
 8006238:	080062f5 	.word	0x080062f5
 800623c:	080062f5 	.word	0x080062f5
 8006240:	080062cd 	.word	0x080062cd
 8006244:	080062f5 	.word	0x080062f5
 8006248:	080062f5 	.word	0x080062f5
 800624c:	080062f5 	.word	0x080062f5
 8006250:	080062f5 	.word	0x080062f5
 8006254:	080062f5 	.word	0x080062f5
 8006258:	080062f5 	.word	0x080062f5
 800625c:	080062f5 	.word	0x080062f5
 8006260:	080062d5 	.word	0x080062d5
 8006264:	080062f5 	.word	0x080062f5
 8006268:	080062f5 	.word	0x080062f5
 800626c:	080062f5 	.word	0x080062f5
 8006270:	080062f5 	.word	0x080062f5
 8006274:	080062f5 	.word	0x080062f5
 8006278:	080062f5 	.word	0x080062f5
 800627c:	080062f5 	.word	0x080062f5
 8006280:	080062dd 	.word	0x080062dd
 8006284:	080062f5 	.word	0x080062f5
 8006288:	080062f5 	.word	0x080062f5
 800628c:	080062f5 	.word	0x080062f5
 8006290:	080062f5 	.word	0x080062f5
 8006294:	080062f5 	.word	0x080062f5
 8006298:	080062f5 	.word	0x080062f5
 800629c:	080062f5 	.word	0x080062f5
 80062a0:	080062e5 	.word	0x080062e5
 80062a4:	080062f5 	.word	0x080062f5
 80062a8:	080062f5 	.word	0x080062f5
 80062ac:	080062f5 	.word	0x080062f5
 80062b0:	080062f5 	.word	0x080062f5
 80062b4:	080062f5 	.word	0x080062f5
 80062b8:	080062f5 	.word	0x080062f5
 80062bc:	080062f5 	.word	0x080062f5
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ca:	e222      	b.n	8006712 <UART_SetConfig+0x5a6>
 80062cc:	2304      	movs	r3, #4
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e21e      	b.n	8006712 <UART_SetConfig+0x5a6>
 80062d4:	2308      	movs	r3, #8
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e21a      	b.n	8006712 <UART_SetConfig+0x5a6>
 80062dc:	2310      	movs	r3, #16
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e216      	b.n	8006712 <UART_SetConfig+0x5a6>
 80062e4:	2320      	movs	r3, #32
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e212      	b.n	8006712 <UART_SetConfig+0x5a6>
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e20e      	b.n	8006712 <UART_SetConfig+0x5a6>
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e20a      	b.n	8006712 <UART_SetConfig+0x5a6>
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a69      	ldr	r2, [pc, #420]	; (80064a8 <UART_SetConfig+0x33c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d130      	bne.n	8006368 <UART_SetConfig+0x1fc>
 8006306:	4b67      	ldr	r3, [pc, #412]	; (80064a4 <UART_SetConfig+0x338>)
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	2b05      	cmp	r3, #5
 8006310:	d826      	bhi.n	8006360 <UART_SetConfig+0x1f4>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <UART_SetConfig+0x1ac>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006331 	.word	0x08006331
 800631c:	08006339 	.word	0x08006339
 8006320:	08006341 	.word	0x08006341
 8006324:	08006349 	.word	0x08006349
 8006328:	08006351 	.word	0x08006351
 800632c:	08006359 	.word	0x08006359
 8006330:	2300      	movs	r3, #0
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006336:	e1ec      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006338:	2304      	movs	r3, #4
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e1e8      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006340:	2308      	movs	r3, #8
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006346:	e1e4      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006348:	2310      	movs	r3, #16
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e1e0      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006350:	2320      	movs	r3, #32
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e1dc      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006358:	2340      	movs	r3, #64	; 0x40
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e1d8      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006360:	2380      	movs	r3, #128	; 0x80
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006366:	e1d4      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a4f      	ldr	r2, [pc, #316]	; (80064ac <UART_SetConfig+0x340>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d130      	bne.n	80063d4 <UART_SetConfig+0x268>
 8006372:	4b4c      	ldr	r3, [pc, #304]	; (80064a4 <UART_SetConfig+0x338>)
 8006374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	2b05      	cmp	r3, #5
 800637c:	d826      	bhi.n	80063cc <UART_SetConfig+0x260>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0x218>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	0800639d 	.word	0x0800639d
 8006388:	080063a5 	.word	0x080063a5
 800638c:	080063ad 	.word	0x080063ad
 8006390:	080063b5 	.word	0x080063b5
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063c5 	.word	0x080063c5
 800639c:	2300      	movs	r3, #0
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a2:	e1b6      	b.n	8006712 <UART_SetConfig+0x5a6>
 80063a4:	2304      	movs	r3, #4
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063aa:	e1b2      	b.n	8006712 <UART_SetConfig+0x5a6>
 80063ac:	2308      	movs	r3, #8
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b2:	e1ae      	b.n	8006712 <UART_SetConfig+0x5a6>
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ba:	e1aa      	b.n	8006712 <UART_SetConfig+0x5a6>
 80063bc:	2320      	movs	r3, #32
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c2:	e1a6      	b.n	8006712 <UART_SetConfig+0x5a6>
 80063c4:	2340      	movs	r3, #64	; 0x40
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ca:	e1a2      	b.n	8006712 <UART_SetConfig+0x5a6>
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d2:	e19e      	b.n	8006712 <UART_SetConfig+0x5a6>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a35      	ldr	r2, [pc, #212]	; (80064b0 <UART_SetConfig+0x344>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d130      	bne.n	8006440 <UART_SetConfig+0x2d4>
 80063de:	4b31      	ldr	r3, [pc, #196]	; (80064a4 <UART_SetConfig+0x338>)
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d826      	bhi.n	8006438 <UART_SetConfig+0x2cc>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0x284>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006409 	.word	0x08006409
 80063f4:	08006411 	.word	0x08006411
 80063f8:	08006419 	.word	0x08006419
 80063fc:	08006421 	.word	0x08006421
 8006400:	08006429 	.word	0x08006429
 8006404:	08006431 	.word	0x08006431
 8006408:	2300      	movs	r3, #0
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e180      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006410:	2304      	movs	r3, #4
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e17c      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006418:	2308      	movs	r3, #8
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641e:	e178      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006420:	2310      	movs	r3, #16
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006426:	e174      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006428:	2320      	movs	r3, #32
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642e:	e170      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006430:	2340      	movs	r3, #64	; 0x40
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006436:	e16c      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006438:	2380      	movs	r3, #128	; 0x80
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643e:	e168      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <UART_SetConfig+0x348>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d142      	bne.n	80064d0 <UART_SetConfig+0x364>
 800644a:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <UART_SetConfig+0x338>)
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	2b05      	cmp	r3, #5
 8006454:	d838      	bhi.n	80064c8 <UART_SetConfig+0x35c>
 8006456:	a201      	add	r2, pc, #4	; (adr r2, 800645c <UART_SetConfig+0x2f0>)
 8006458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645c:	08006475 	.word	0x08006475
 8006460:	0800647d 	.word	0x0800647d
 8006464:	08006485 	.word	0x08006485
 8006468:	0800648d 	.word	0x0800648d
 800646c:	080064b9 	.word	0x080064b9
 8006470:	080064c1 	.word	0x080064c1
 8006474:	2300      	movs	r3, #0
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e14a      	b.n	8006712 <UART_SetConfig+0x5a6>
 800647c:	2304      	movs	r3, #4
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006482:	e146      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006484:	2308      	movs	r3, #8
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648a:	e142      	b.n	8006712 <UART_SetConfig+0x5a6>
 800648c:	2310      	movs	r3, #16
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006492:	e13e      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006494:	cfff69f3 	.word	0xcfff69f3
 8006498:	58000c00 	.word	0x58000c00
 800649c:	11fff4ff 	.word	0x11fff4ff
 80064a0:	40011000 	.word	0x40011000
 80064a4:	58024400 	.word	0x58024400
 80064a8:	40004400 	.word	0x40004400
 80064ac:	40004800 	.word	0x40004800
 80064b0:	40004c00 	.word	0x40004c00
 80064b4:	40005000 	.word	0x40005000
 80064b8:	2320      	movs	r3, #32
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e128      	b.n	8006712 <UART_SetConfig+0x5a6>
 80064c0:	2340      	movs	r3, #64	; 0x40
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e124      	b.n	8006712 <UART_SetConfig+0x5a6>
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e120      	b.n	8006712 <UART_SetConfig+0x5a6>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4acb      	ldr	r2, [pc, #812]	; (8006804 <UART_SetConfig+0x698>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d176      	bne.n	80065c8 <UART_SetConfig+0x45c>
 80064da:	4bcb      	ldr	r3, [pc, #812]	; (8006808 <UART_SetConfig+0x69c>)
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064e2:	2b28      	cmp	r3, #40	; 0x28
 80064e4:	d86c      	bhi.n	80065c0 <UART_SetConfig+0x454>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <UART_SetConfig+0x380>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	08006591 	.word	0x08006591
 80064f0:	080065c1 	.word	0x080065c1
 80064f4:	080065c1 	.word	0x080065c1
 80064f8:	080065c1 	.word	0x080065c1
 80064fc:	080065c1 	.word	0x080065c1
 8006500:	080065c1 	.word	0x080065c1
 8006504:	080065c1 	.word	0x080065c1
 8006508:	080065c1 	.word	0x080065c1
 800650c:	08006599 	.word	0x08006599
 8006510:	080065c1 	.word	0x080065c1
 8006514:	080065c1 	.word	0x080065c1
 8006518:	080065c1 	.word	0x080065c1
 800651c:	080065c1 	.word	0x080065c1
 8006520:	080065c1 	.word	0x080065c1
 8006524:	080065c1 	.word	0x080065c1
 8006528:	080065c1 	.word	0x080065c1
 800652c:	080065a1 	.word	0x080065a1
 8006530:	080065c1 	.word	0x080065c1
 8006534:	080065c1 	.word	0x080065c1
 8006538:	080065c1 	.word	0x080065c1
 800653c:	080065c1 	.word	0x080065c1
 8006540:	080065c1 	.word	0x080065c1
 8006544:	080065c1 	.word	0x080065c1
 8006548:	080065c1 	.word	0x080065c1
 800654c:	080065a9 	.word	0x080065a9
 8006550:	080065c1 	.word	0x080065c1
 8006554:	080065c1 	.word	0x080065c1
 8006558:	080065c1 	.word	0x080065c1
 800655c:	080065c1 	.word	0x080065c1
 8006560:	080065c1 	.word	0x080065c1
 8006564:	080065c1 	.word	0x080065c1
 8006568:	080065c1 	.word	0x080065c1
 800656c:	080065b1 	.word	0x080065b1
 8006570:	080065c1 	.word	0x080065c1
 8006574:	080065c1 	.word	0x080065c1
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065c1 	.word	0x080065c1
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065c1 	.word	0x080065c1
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065b9 	.word	0x080065b9
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e0bc      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e0b8      	b.n	8006712 <UART_SetConfig+0x5a6>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e0b4      	b.n	8006712 <UART_SetConfig+0x5a6>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e0b0      	b.n	8006712 <UART_SetConfig+0x5a6>
 80065b0:	2320      	movs	r3, #32
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e0ac      	b.n	8006712 <UART_SetConfig+0x5a6>
 80065b8:	2340      	movs	r3, #64	; 0x40
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e0a8      	b.n	8006712 <UART_SetConfig+0x5a6>
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e0a4      	b.n	8006712 <UART_SetConfig+0x5a6>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a8f      	ldr	r2, [pc, #572]	; (800680c <UART_SetConfig+0x6a0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d130      	bne.n	8006634 <UART_SetConfig+0x4c8>
 80065d2:	4b8d      	ldr	r3, [pc, #564]	; (8006808 <UART_SetConfig+0x69c>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	2b05      	cmp	r3, #5
 80065dc:	d826      	bhi.n	800662c <UART_SetConfig+0x4c0>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x478>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	08006605 	.word	0x08006605
 80065ec:	0800660d 	.word	0x0800660d
 80065f0:	08006615 	.word	0x08006615
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006625 	.word	0x08006625
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e086      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006604:	2304      	movs	r3, #4
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e082      	b.n	8006712 <UART_SetConfig+0x5a6>
 800660c:	2308      	movs	r3, #8
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e07e      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006614:	2310      	movs	r3, #16
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e07a      	b.n	8006712 <UART_SetConfig+0x5a6>
 800661c:	2320      	movs	r3, #32
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e076      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006624:	2340      	movs	r3, #64	; 0x40
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e072      	b.n	8006712 <UART_SetConfig+0x5a6>
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e06e      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a75      	ldr	r2, [pc, #468]	; (8006810 <UART_SetConfig+0x6a4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d130      	bne.n	80066a0 <UART_SetConfig+0x534>
 800663e:	4b72      	ldr	r3, [pc, #456]	; (8006808 <UART_SetConfig+0x69c>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b05      	cmp	r3, #5
 8006648:	d826      	bhi.n	8006698 <UART_SetConfig+0x52c>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x4e4>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006669 	.word	0x08006669
 8006654:	08006671 	.word	0x08006671
 8006658:	08006679 	.word	0x08006679
 800665c:	08006681 	.word	0x08006681
 8006660:	08006689 	.word	0x08006689
 8006664:	08006691 	.word	0x08006691
 8006668:	2300      	movs	r3, #0
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e050      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e04c      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e048      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e044      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006688:	2320      	movs	r3, #32
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e040      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e03c      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006698:	2380      	movs	r3, #128	; 0x80
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e038      	b.n	8006712 <UART_SetConfig+0x5a6>
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a5b      	ldr	r2, [pc, #364]	; (8006814 <UART_SetConfig+0x6a8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d130      	bne.n	800670c <UART_SetConfig+0x5a0>
 80066aa:	4b57      	ldr	r3, [pc, #348]	; (8006808 <UART_SetConfig+0x69c>)
 80066ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d826      	bhi.n	8006704 <UART_SetConfig+0x598>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <UART_SetConfig+0x550>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066d5 	.word	0x080066d5
 80066c0:	080066dd 	.word	0x080066dd
 80066c4:	080066e5 	.word	0x080066e5
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	2302      	movs	r3, #2
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e01a      	b.n	8006712 <UART_SetConfig+0x5a6>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e016      	b.n	8006712 <UART_SetConfig+0x5a6>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ea:	e012      	b.n	8006712 <UART_SetConfig+0x5a6>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f2:	e00e      	b.n	8006712 <UART_SetConfig+0x5a6>
 80066f4:	2320      	movs	r3, #32
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fa:	e00a      	b.n	8006712 <UART_SetConfig+0x5a6>
 80066fc:	2340      	movs	r3, #64	; 0x40
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006702:	e006      	b.n	8006712 <UART_SetConfig+0x5a6>
 8006704:	2380      	movs	r3, #128	; 0x80
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e002      	b.n	8006712 <UART_SetConfig+0x5a6>
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a3f      	ldr	r2, [pc, #252]	; (8006814 <UART_SetConfig+0x6a8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	f040 80f8 	bne.w	800690e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800671e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006722:	2b20      	cmp	r3, #32
 8006724:	dc46      	bgt.n	80067b4 <UART_SetConfig+0x648>
 8006726:	2b02      	cmp	r3, #2
 8006728:	f2c0 8082 	blt.w	8006830 <UART_SetConfig+0x6c4>
 800672c:	3b02      	subs	r3, #2
 800672e:	2b1e      	cmp	r3, #30
 8006730:	d87e      	bhi.n	8006830 <UART_SetConfig+0x6c4>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <UART_SetConfig+0x5cc>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	080067bb 	.word	0x080067bb
 800673c:	08006831 	.word	0x08006831
 8006740:	080067c3 	.word	0x080067c3
 8006744:	08006831 	.word	0x08006831
 8006748:	08006831 	.word	0x08006831
 800674c:	08006831 	.word	0x08006831
 8006750:	080067d3 	.word	0x080067d3
 8006754:	08006831 	.word	0x08006831
 8006758:	08006831 	.word	0x08006831
 800675c:	08006831 	.word	0x08006831
 8006760:	08006831 	.word	0x08006831
 8006764:	08006831 	.word	0x08006831
 8006768:	08006831 	.word	0x08006831
 800676c:	08006831 	.word	0x08006831
 8006770:	080067e3 	.word	0x080067e3
 8006774:	08006831 	.word	0x08006831
 8006778:	08006831 	.word	0x08006831
 800677c:	08006831 	.word	0x08006831
 8006780:	08006831 	.word	0x08006831
 8006784:	08006831 	.word	0x08006831
 8006788:	08006831 	.word	0x08006831
 800678c:	08006831 	.word	0x08006831
 8006790:	08006831 	.word	0x08006831
 8006794:	08006831 	.word	0x08006831
 8006798:	08006831 	.word	0x08006831
 800679c:	08006831 	.word	0x08006831
 80067a0:	08006831 	.word	0x08006831
 80067a4:	08006831 	.word	0x08006831
 80067a8:	08006831 	.word	0x08006831
 80067ac:	08006831 	.word	0x08006831
 80067b0:	08006823 	.word	0x08006823
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d037      	beq.n	8006828 <UART_SetConfig+0x6bc>
 80067b8:	e03a      	b.n	8006830 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80067ba:	f7fe ff7f 	bl	80056bc <HAL_RCCEx_GetD3PCLK1Freq>
 80067be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067c0:	e03c      	b.n	800683c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe ff8e 	bl	80056e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d0:	e034      	b.n	800683c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d2:	f107 0318 	add.w	r3, r7, #24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff f8da 	bl	8005990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e0:	e02c      	b.n	800683c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <UART_SetConfig+0x69c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <UART_SetConfig+0x69c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	08db      	lsrs	r3, r3, #3
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	4a07      	ldr	r2, [pc, #28]	; (8006818 <UART_SetConfig+0x6ac>)
 80067fa:	fa22 f303 	lsr.w	r3, r2, r3
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006800:	e01c      	b.n	800683c <UART_SetConfig+0x6d0>
 8006802:	bf00      	nop
 8006804:	40011400 	.word	0x40011400
 8006808:	58024400 	.word	0x58024400
 800680c:	40007800 	.word	0x40007800
 8006810:	40007c00 	.word	0x40007c00
 8006814:	58000c00 	.word	0x58000c00
 8006818:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800681c:	4b9d      	ldr	r3, [pc, #628]	; (8006a94 <UART_SetConfig+0x928>)
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006820:	e00c      	b.n	800683c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006822:	4b9d      	ldr	r3, [pc, #628]	; (8006a98 <UART_SetConfig+0x92c>)
 8006824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006826:	e009      	b.n	800683c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800682e:	e005      	b.n	800683c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800683a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 81de 	beq.w	8006c00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	4a94      	ldr	r2, [pc, #592]	; (8006a9c <UART_SetConfig+0x930>)
 800684a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800684e:	461a      	mov	r2, r3
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	fbb3 f3f2 	udiv	r3, r3, r2
 8006856:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4613      	mov	r3, r2
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	4413      	add	r3, r2
 8006862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006864:	429a      	cmp	r2, r3
 8006866:	d305      	bcc.n	8006874 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800686e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006870:	429a      	cmp	r2, r3
 8006872:	d903      	bls.n	800687c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800687a:	e1c1      	b.n	8006c00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800687c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687e:	2200      	movs	r2, #0
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	60fa      	str	r2, [r7, #12]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	4a84      	ldr	r2, [pc, #528]	; (8006a9c <UART_SetConfig+0x930>)
 800688a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688e:	b29b      	uxth	r3, r3
 8006890:	2200      	movs	r2, #0
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800689a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800689e:	f7f9 fd6f 	bl	8000380 <__aeabi_uldivmod>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	020b      	lsls	r3, r1, #8
 80068b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068b8:	0202      	lsls	r2, r0, #8
 80068ba:	6979      	ldr	r1, [r7, #20]
 80068bc:	6849      	ldr	r1, [r1, #4]
 80068be:	0849      	lsrs	r1, r1, #1
 80068c0:	2000      	movs	r0, #0
 80068c2:	460c      	mov	r4, r1
 80068c4:	4605      	mov	r5, r0
 80068c6:	eb12 0804 	adds.w	r8, r2, r4
 80068ca:	eb43 0905 	adc.w	r9, r3, r5
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	469a      	mov	sl, r3
 80068d6:	4693      	mov	fp, r2
 80068d8:	4652      	mov	r2, sl
 80068da:	465b      	mov	r3, fp
 80068dc:	4640      	mov	r0, r8
 80068de:	4649      	mov	r1, r9
 80068e0:	f7f9 fd4e 	bl	8000380 <__aeabi_uldivmod>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4613      	mov	r3, r2
 80068ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068f2:	d308      	bcc.n	8006906 <UART_SetConfig+0x79a>
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068fa:	d204      	bcs.n	8006906 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006902:	60da      	str	r2, [r3, #12]
 8006904:	e17c      	b.n	8006c00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800690c:	e178      	b.n	8006c00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006916:	f040 80c5 	bne.w	8006aa4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800691a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800691e:	2b20      	cmp	r3, #32
 8006920:	dc48      	bgt.n	80069b4 <UART_SetConfig+0x848>
 8006922:	2b00      	cmp	r3, #0
 8006924:	db7b      	blt.n	8006a1e <UART_SetConfig+0x8b2>
 8006926:	2b20      	cmp	r3, #32
 8006928:	d879      	bhi.n	8006a1e <UART_SetConfig+0x8b2>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x7c4>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	080069bb 	.word	0x080069bb
 8006934:	080069c3 	.word	0x080069c3
 8006938:	08006a1f 	.word	0x08006a1f
 800693c:	08006a1f 	.word	0x08006a1f
 8006940:	080069cb 	.word	0x080069cb
 8006944:	08006a1f 	.word	0x08006a1f
 8006948:	08006a1f 	.word	0x08006a1f
 800694c:	08006a1f 	.word	0x08006a1f
 8006950:	080069db 	.word	0x080069db
 8006954:	08006a1f 	.word	0x08006a1f
 8006958:	08006a1f 	.word	0x08006a1f
 800695c:	08006a1f 	.word	0x08006a1f
 8006960:	08006a1f 	.word	0x08006a1f
 8006964:	08006a1f 	.word	0x08006a1f
 8006968:	08006a1f 	.word	0x08006a1f
 800696c:	08006a1f 	.word	0x08006a1f
 8006970:	080069eb 	.word	0x080069eb
 8006974:	08006a1f 	.word	0x08006a1f
 8006978:	08006a1f 	.word	0x08006a1f
 800697c:	08006a1f 	.word	0x08006a1f
 8006980:	08006a1f 	.word	0x08006a1f
 8006984:	08006a1f 	.word	0x08006a1f
 8006988:	08006a1f 	.word	0x08006a1f
 800698c:	08006a1f 	.word	0x08006a1f
 8006990:	08006a1f 	.word	0x08006a1f
 8006994:	08006a1f 	.word	0x08006a1f
 8006998:	08006a1f 	.word	0x08006a1f
 800699c:	08006a1f 	.word	0x08006a1f
 80069a0:	08006a1f 	.word	0x08006a1f
 80069a4:	08006a1f 	.word	0x08006a1f
 80069a8:	08006a1f 	.word	0x08006a1f
 80069ac:	08006a1f 	.word	0x08006a1f
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d02e      	beq.n	8006a16 <UART_SetConfig+0x8aa>
 80069b8:	e031      	b.n	8006a1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ba:	f7fd ff0d 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80069be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069c0:	e033      	b.n	8006a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c2:	f7fd ff1f 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 80069c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069c8:	e02f      	b.n	8006a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fe8a 	bl	80056e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d8:	e027      	b.n	8006a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069da:	f107 0318 	add.w	r3, r7, #24
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe ffd6 	bl	8005990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e8:	e01f      	b.n	8006a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ea:	4b2d      	ldr	r3, [pc, #180]	; (8006aa0 <UART_SetConfig+0x934>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069f6:	4b2a      	ldr	r3, [pc, #168]	; (8006aa0 <UART_SetConfig+0x934>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	08db      	lsrs	r3, r3, #3
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	4a24      	ldr	r2, [pc, #144]	; (8006a94 <UART_SetConfig+0x928>)
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a08:	e00f      	b.n	8006a2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006a0a:	4b22      	ldr	r3, [pc, #136]	; (8006a94 <UART_SetConfig+0x928>)
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a0e:	e00c      	b.n	8006a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a10:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <UART_SetConfig+0x92c>)
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a14:	e009      	b.n	8006a2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a1c:	e005      	b.n	8006a2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80e7 	beq.w	8006c00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <UART_SetConfig+0x930>)
 8006a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a44:	005a      	lsls	r2, r3, #1
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	441a      	add	r2, r3
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	2b0f      	cmp	r3, #15
 8006a5c:	d916      	bls.n	8006a8c <UART_SetConfig+0x920>
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a64:	d212      	bcs.n	8006a8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f023 030f 	bic.w	r3, r3, #15
 8006a6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a88:	60da      	str	r2, [r3, #12]
 8006a8a:	e0b9      	b.n	8006c00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a92:	e0b5      	b.n	8006c00 <UART_SetConfig+0xa94>
 8006a94:	03d09000 	.word	0x03d09000
 8006a98:	003d0900 	.word	0x003d0900
 8006a9c:	08008680 	.word	0x08008680
 8006aa0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aa4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	dc49      	bgt.n	8006b40 <UART_SetConfig+0x9d4>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	db7c      	blt.n	8006baa <UART_SetConfig+0xa3e>
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d87a      	bhi.n	8006baa <UART_SetConfig+0xa3e>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <UART_SetConfig+0x950>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006b47 	.word	0x08006b47
 8006ac0:	08006b4f 	.word	0x08006b4f
 8006ac4:	08006bab 	.word	0x08006bab
 8006ac8:	08006bab 	.word	0x08006bab
 8006acc:	08006b57 	.word	0x08006b57
 8006ad0:	08006bab 	.word	0x08006bab
 8006ad4:	08006bab 	.word	0x08006bab
 8006ad8:	08006bab 	.word	0x08006bab
 8006adc:	08006b67 	.word	0x08006b67
 8006ae0:	08006bab 	.word	0x08006bab
 8006ae4:	08006bab 	.word	0x08006bab
 8006ae8:	08006bab 	.word	0x08006bab
 8006aec:	08006bab 	.word	0x08006bab
 8006af0:	08006bab 	.word	0x08006bab
 8006af4:	08006bab 	.word	0x08006bab
 8006af8:	08006bab 	.word	0x08006bab
 8006afc:	08006b77 	.word	0x08006b77
 8006b00:	08006bab 	.word	0x08006bab
 8006b04:	08006bab 	.word	0x08006bab
 8006b08:	08006bab 	.word	0x08006bab
 8006b0c:	08006bab 	.word	0x08006bab
 8006b10:	08006bab 	.word	0x08006bab
 8006b14:	08006bab 	.word	0x08006bab
 8006b18:	08006bab 	.word	0x08006bab
 8006b1c:	08006bab 	.word	0x08006bab
 8006b20:	08006bab 	.word	0x08006bab
 8006b24:	08006bab 	.word	0x08006bab
 8006b28:	08006bab 	.word	0x08006bab
 8006b2c:	08006bab 	.word	0x08006bab
 8006b30:	08006bab 	.word	0x08006bab
 8006b34:	08006bab 	.word	0x08006bab
 8006b38:	08006bab 	.word	0x08006bab
 8006b3c:	08006b9d 	.word	0x08006b9d
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d02e      	beq.n	8006ba2 <UART_SetConfig+0xa36>
 8006b44:	e031      	b.n	8006baa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b46:	f7fd fe47 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8006b4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b4c:	e033      	b.n	8006bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b4e:	f7fd fe59 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 8006b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b54:	e02f      	b.n	8006bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe fdc4 	bl	80056e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b64:	e027      	b.n	8006bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b66:	f107 0318 	add.w	r3, r7, #24
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe ff10 	bl	8005990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b74:	e01f      	b.n	8006bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b76:	4b2d      	ldr	r3, [pc, #180]	; (8006c2c <UART_SetConfig+0xac0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b82:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <UART_SetConfig+0xac0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	08db      	lsrs	r3, r3, #3
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	4a28      	ldr	r2, [pc, #160]	; (8006c30 <UART_SetConfig+0xac4>)
 8006b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b94:	e00f      	b.n	8006bb6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006b96:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <UART_SetConfig+0xac4>)
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9a:	e00c      	b.n	8006bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b9c:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <UART_SetConfig+0xac8>)
 8006b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba0:	e009      	b.n	8006bb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba8:	e005      	b.n	8006bb6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006bb4:	bf00      	nop
    }

    if (pclk != 0U)
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d021      	beq.n	8006c00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <UART_SetConfig+0xacc>)
 8006bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	441a      	add	r2, r3
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bde:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	d909      	bls.n	8006bfa <UART_SetConfig+0xa8e>
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bec:	d205      	bcs.n	8006bfa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60da      	str	r2, [r3, #12]
 8006bf8:	e002      	b.n	8006c00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2200      	movs	r2, #0
 8006c14:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3748      	adds	r7, #72	; 0x48
 8006c24:	46bd      	mov	sp, r7
 8006c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c2a:	bf00      	nop
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	03d09000 	.word	0x03d09000
 8006c34:	003d0900 	.word	0x003d0900
 8006c38:	08008680 	.word	0x08008680

08006c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00a      	beq.n	8006caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	f003 0310 	and.w	r3, r3, #16
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01a      	beq.n	8006d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3a:	d10a      	bne.n	8006d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d90:	f7fc fa70 	bl	8003274 <HAL_GetTick>
 8006d94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d10e      	bne.n	8006dc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f82f 	bl	8006e16 <UART_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e025      	b.n	8006e0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d10e      	bne.n	8006dee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f819 	bl	8006e16 <UART_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e00f      	b.n	8006e0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b09c      	sub	sp, #112	; 0x70
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	4613      	mov	r3, r2
 8006e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e26:	e0a9      	b.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2e:	f000 80a5 	beq.w	8006f7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e32:	f7fc fa1f 	bl	8003274 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d302      	bcc.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d140      	bne.n	8006eca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e6      	bne.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	f023 0301 	bic.w	r3, r3, #1
 8006e90:	663b      	str	r3, [r7, #96]	; 0x60
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e5      	bne.n	8006e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e069      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d051      	beq.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee6:	d149      	bne.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
 8006f12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e6      	bne.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	613b      	str	r3, [r7, #16]
   return(result);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f44:	623a      	str	r2, [r7, #32]
 8006f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	69f9      	ldr	r1, [r7, #28]
 8006f4a:	6a3a      	ldr	r2, [r7, #32]
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e5      	bne.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e010      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4013      	ands	r3, r2
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	f43f af46 	beq.w	8006e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3770      	adds	r7, #112	; 0x70
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_UARTEx_DisableFifoMode+0x16>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e027      	b.n	800700c <HAL_UARTEx_DisableFifoMode+0x66>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2224      	movs	r2, #36	; 0x24
 8006fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0201 	bic.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800702c:	2302      	movs	r3, #2
 800702e:	e02d      	b.n	800708c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2224      	movs	r2, #36	; 0x24
 800703c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0201 	bic.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f84f 	bl	8007110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e02d      	b.n	8007108 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2224      	movs	r2, #36	; 0x24
 80070b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0201 	bic.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f811 	bl	8007110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800711c:	2b00      	cmp	r3, #0
 800711e:	d108      	bne.n	8007132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007130:	e031      	b.n	8007196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007132:	2310      	movs	r3, #16
 8007134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007136:	2310      	movs	r3, #16
 8007138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	0e5b      	lsrs	r3, r3, #25
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	0f5b      	lsrs	r3, r3, #29
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	7b3a      	ldrb	r2, [r7, #12]
 800715e:	4911      	ldr	r1, [pc, #68]	; (80071a4 <UARTEx_SetNbDataToProcess+0x94>)
 8007160:	5c8a      	ldrb	r2, [r1, r2]
 8007162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007166:	7b3a      	ldrb	r2, [r7, #12]
 8007168:	490f      	ldr	r1, [pc, #60]	; (80071a8 <UARTEx_SetNbDataToProcess+0x98>)
 800716a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800716c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007170:	b29a      	uxth	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	7b7a      	ldrb	r2, [r7, #13]
 800717c:	4909      	ldr	r1, [pc, #36]	; (80071a4 <UARTEx_SetNbDataToProcess+0x94>)
 800717e:	5c8a      	ldrb	r2, [r1, r2]
 8007180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007184:	7b7a      	ldrb	r2, [r7, #13]
 8007186:	4908      	ldr	r1, [pc, #32]	; (80071a8 <UARTEx_SetNbDataToProcess+0x98>)
 8007188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800718a:	fb93 f3f2 	sdiv	r3, r3, r2
 800718e:	b29a      	uxth	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	08008698 	.word	0x08008698
 80071a8:	080086a0 	.word	0x080086a0

080071ac <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	6812      	ldr	r2, [r2, #0]
 80071c4:	f023 0101 	bic.w	r1, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d102      	bne.n	80071dc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80071d6:	2340      	movs	r3, #64	; 0x40
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e001      	b.n	80071e0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80071ec:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80071f2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80071f8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80071fe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007204:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800720a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007210:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007216:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800721c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007244:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <FMC_NORSRAM_Init+0x11c>)
 8007246:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800724e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007256:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800725e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	43db      	mvns	r3, r3
 800726e:	ea02 0103 	and.w	r1, r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4319      	orrs	r1, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007288:	d10c      	bne.n	80072a4 <FMC_NORSRAM_Init+0xf8>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d008      	beq.n	80072a4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d006      	beq.n	80072ba <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	0008fb7f 	.word	0x0008fb7f

080072cc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	431a      	orrs	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	431a      	orrs	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	3b01      	subs	r3, #1
 8007308:	051b      	lsls	r3, r3, #20
 800730a:	431a      	orrs	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	3b02      	subs	r3, #2
 8007312:	061b      	lsls	r3, r3, #24
 8007314:	431a      	orrs	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	4313      	orrs	r3, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	3201      	adds	r2, #1
 8007320:	4319      	orrs	r1, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007334:	d113      	bne.n	800735e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800733e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	3b01      	subs	r3, #1
 8007346:	051b      	lsls	r3, r3, #20
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007380:	d11d      	bne.n	80073be <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800738c:	4013      	ands	r3, r2
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	6811      	ldr	r1, [r2, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	6852      	ldr	r2, [r2, #4]
 8007396:	0112      	lsls	r2, r2, #4
 8007398:	4311      	orrs	r1, r2
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	6892      	ldr	r2, [r2, #8]
 800739e:	0212      	lsls	r2, r2, #8
 80073a0:	4311      	orrs	r1, r2
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	6992      	ldr	r2, [r2, #24]
 80073a6:	4311      	orrs	r1, r2
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	68d2      	ldr	r2, [r2, #12]
 80073ac:	0412      	lsls	r2, r2, #16
 80073ae:	430a      	orrs	r2, r1
 80073b0:	ea43 0102 	orr.w	r1, r3, r2
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80073bc:	e005      	b.n	80073ca <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80073c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	cff00000 	.word	0xcff00000

080073dc <__errno>:
 80073dc:	4b01      	ldr	r3, [pc, #4]	; (80073e4 <__errno+0x8>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	24000068 	.word	0x24000068

080073e8 <__libc_init_array>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	4d0d      	ldr	r5, [pc, #52]	; (8007420 <__libc_init_array+0x38>)
 80073ec:	4c0d      	ldr	r4, [pc, #52]	; (8007424 <__libc_init_array+0x3c>)
 80073ee:	1b64      	subs	r4, r4, r5
 80073f0:	10a4      	asrs	r4, r4, #2
 80073f2:	2600      	movs	r6, #0
 80073f4:	42a6      	cmp	r6, r4
 80073f6:	d109      	bne.n	800740c <__libc_init_array+0x24>
 80073f8:	4d0b      	ldr	r5, [pc, #44]	; (8007428 <__libc_init_array+0x40>)
 80073fa:	4c0c      	ldr	r4, [pc, #48]	; (800742c <__libc_init_array+0x44>)
 80073fc:	f001 f824 	bl	8008448 <_init>
 8007400:	1b64      	subs	r4, r4, r5
 8007402:	10a4      	asrs	r4, r4, #2
 8007404:	2600      	movs	r6, #0
 8007406:	42a6      	cmp	r6, r4
 8007408:	d105      	bne.n	8007416 <__libc_init_array+0x2e>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007410:	4798      	blx	r3
 8007412:	3601      	adds	r6, #1
 8007414:	e7ee      	b.n	80073f4 <__libc_init_array+0xc>
 8007416:	f855 3b04 	ldr.w	r3, [r5], #4
 800741a:	4798      	blx	r3
 800741c:	3601      	adds	r6, #1
 800741e:	e7f2      	b.n	8007406 <__libc_init_array+0x1e>
 8007420:	08008748 	.word	0x08008748
 8007424:	08008748 	.word	0x08008748
 8007428:	08008748 	.word	0x08008748
 800742c:	0800874c 	.word	0x0800874c

08007430 <memset>:
 8007430:	4402      	add	r2, r0
 8007432:	4603      	mov	r3, r0
 8007434:	4293      	cmp	r3, r2
 8007436:	d100      	bne.n	800743a <memset+0xa>
 8007438:	4770      	bx	lr
 800743a:	f803 1b01 	strb.w	r1, [r3], #1
 800743e:	e7f9      	b.n	8007434 <memset+0x4>

08007440 <iprintf>:
 8007440:	b40f      	push	{r0, r1, r2, r3}
 8007442:	4b0a      	ldr	r3, [pc, #40]	; (800746c <iprintf+0x2c>)
 8007444:	b513      	push	{r0, r1, r4, lr}
 8007446:	681c      	ldr	r4, [r3, #0]
 8007448:	b124      	cbz	r4, 8007454 <iprintf+0x14>
 800744a:	69a3      	ldr	r3, [r4, #24]
 800744c:	b913      	cbnz	r3, 8007454 <iprintf+0x14>
 800744e:	4620      	mov	r0, r4
 8007450:	f000 fa5e 	bl	8007910 <__sinit>
 8007454:	ab05      	add	r3, sp, #20
 8007456:	9a04      	ldr	r2, [sp, #16]
 8007458:	68a1      	ldr	r1, [r4, #8]
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	4620      	mov	r0, r4
 800745e:	f000 fc67 	bl	8007d30 <_vfiprintf_r>
 8007462:	b002      	add	sp, #8
 8007464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007468:	b004      	add	sp, #16
 800746a:	4770      	bx	lr
 800746c:	24000068 	.word	0x24000068

08007470 <_puts_r>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	460e      	mov	r6, r1
 8007474:	4605      	mov	r5, r0
 8007476:	b118      	cbz	r0, 8007480 <_puts_r+0x10>
 8007478:	6983      	ldr	r3, [r0, #24]
 800747a:	b90b      	cbnz	r3, 8007480 <_puts_r+0x10>
 800747c:	f000 fa48 	bl	8007910 <__sinit>
 8007480:	69ab      	ldr	r3, [r5, #24]
 8007482:	68ac      	ldr	r4, [r5, #8]
 8007484:	b913      	cbnz	r3, 800748c <_puts_r+0x1c>
 8007486:	4628      	mov	r0, r5
 8007488:	f000 fa42 	bl	8007910 <__sinit>
 800748c:	4b2c      	ldr	r3, [pc, #176]	; (8007540 <_puts_r+0xd0>)
 800748e:	429c      	cmp	r4, r3
 8007490:	d120      	bne.n	80074d4 <_puts_r+0x64>
 8007492:	686c      	ldr	r4, [r5, #4]
 8007494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007496:	07db      	lsls	r3, r3, #31
 8007498:	d405      	bmi.n	80074a6 <_puts_r+0x36>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0598      	lsls	r0, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_puts_r+0x36>
 80074a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074a2:	f000 fad3 	bl	8007a4c <__retarget_lock_acquire_recursive>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	0719      	lsls	r1, r3, #28
 80074aa:	d51d      	bpl.n	80074e8 <_puts_r+0x78>
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	b1db      	cbz	r3, 80074e8 <_puts_r+0x78>
 80074b0:	3e01      	subs	r6, #1
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074b8:	3b01      	subs	r3, #1
 80074ba:	60a3      	str	r3, [r4, #8]
 80074bc:	bb39      	cbnz	r1, 800750e <_puts_r+0x9e>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	da38      	bge.n	8007534 <_puts_r+0xc4>
 80074c2:	4622      	mov	r2, r4
 80074c4:	210a      	movs	r1, #10
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f848 	bl	800755c <__swbuf_r>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d011      	beq.n	80074f4 <_puts_r+0x84>
 80074d0:	250a      	movs	r5, #10
 80074d2:	e011      	b.n	80074f8 <_puts_r+0x88>
 80074d4:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <_puts_r+0xd4>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d101      	bne.n	80074de <_puts_r+0x6e>
 80074da:	68ac      	ldr	r4, [r5, #8]
 80074dc:	e7da      	b.n	8007494 <_puts_r+0x24>
 80074de:	4b1a      	ldr	r3, [pc, #104]	; (8007548 <_puts_r+0xd8>)
 80074e0:	429c      	cmp	r4, r3
 80074e2:	bf08      	it	eq
 80074e4:	68ec      	ldreq	r4, [r5, #12]
 80074e6:	e7d5      	b.n	8007494 <_puts_r+0x24>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f888 	bl	8007600 <__swsetup_r>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d0dd      	beq.n	80074b0 <_puts_r+0x40>
 80074f4:	f04f 35ff 	mov.w	r5, #4294967295
 80074f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074fa:	07da      	lsls	r2, r3, #31
 80074fc:	d405      	bmi.n	800750a <_puts_r+0x9a>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	059b      	lsls	r3, r3, #22
 8007502:	d402      	bmi.n	800750a <_puts_r+0x9a>
 8007504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007506:	f000 faa2 	bl	8007a4e <__retarget_lock_release_recursive>
 800750a:	4628      	mov	r0, r5
 800750c:	bd70      	pop	{r4, r5, r6, pc}
 800750e:	2b00      	cmp	r3, #0
 8007510:	da04      	bge.n	800751c <_puts_r+0xac>
 8007512:	69a2      	ldr	r2, [r4, #24]
 8007514:	429a      	cmp	r2, r3
 8007516:	dc06      	bgt.n	8007526 <_puts_r+0xb6>
 8007518:	290a      	cmp	r1, #10
 800751a:	d004      	beq.n	8007526 <_puts_r+0xb6>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	6022      	str	r2, [r4, #0]
 8007522:	7019      	strb	r1, [r3, #0]
 8007524:	e7c5      	b.n	80074b2 <_puts_r+0x42>
 8007526:	4622      	mov	r2, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f817 	bl	800755c <__swbuf_r>
 800752e:	3001      	adds	r0, #1
 8007530:	d1bf      	bne.n	80074b2 <_puts_r+0x42>
 8007532:	e7df      	b.n	80074f4 <_puts_r+0x84>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	250a      	movs	r5, #10
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	701d      	strb	r5, [r3, #0]
 800753e:	e7db      	b.n	80074f8 <_puts_r+0x88>
 8007540:	080086cc 	.word	0x080086cc
 8007544:	080086ec 	.word	0x080086ec
 8007548:	080086ac 	.word	0x080086ac

0800754c <puts>:
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <puts+0xc>)
 800754e:	4601      	mov	r1, r0
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f7ff bf8d 	b.w	8007470 <_puts_r>
 8007556:	bf00      	nop
 8007558:	24000068 	.word	0x24000068

0800755c <__swbuf_r>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	460e      	mov	r6, r1
 8007560:	4614      	mov	r4, r2
 8007562:	4605      	mov	r5, r0
 8007564:	b118      	cbz	r0, 800756e <__swbuf_r+0x12>
 8007566:	6983      	ldr	r3, [r0, #24]
 8007568:	b90b      	cbnz	r3, 800756e <__swbuf_r+0x12>
 800756a:	f000 f9d1 	bl	8007910 <__sinit>
 800756e:	4b21      	ldr	r3, [pc, #132]	; (80075f4 <__swbuf_r+0x98>)
 8007570:	429c      	cmp	r4, r3
 8007572:	d12b      	bne.n	80075cc <__swbuf_r+0x70>
 8007574:	686c      	ldr	r4, [r5, #4]
 8007576:	69a3      	ldr	r3, [r4, #24]
 8007578:	60a3      	str	r3, [r4, #8]
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	071a      	lsls	r2, r3, #28
 800757e:	d52f      	bpl.n	80075e0 <__swbuf_r+0x84>
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	b36b      	cbz	r3, 80075e0 <__swbuf_r+0x84>
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	1ac0      	subs	r0, r0, r3
 800758a:	6963      	ldr	r3, [r4, #20]
 800758c:	b2f6      	uxtb	r6, r6
 800758e:	4283      	cmp	r3, r0
 8007590:	4637      	mov	r7, r6
 8007592:	dc04      	bgt.n	800759e <__swbuf_r+0x42>
 8007594:	4621      	mov	r1, r4
 8007596:	4628      	mov	r0, r5
 8007598:	f000 f926 	bl	80077e8 <_fflush_r>
 800759c:	bb30      	cbnz	r0, 80075ec <__swbuf_r+0x90>
 800759e:	68a3      	ldr	r3, [r4, #8]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	60a3      	str	r3, [r4, #8]
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	6022      	str	r2, [r4, #0]
 80075aa:	701e      	strb	r6, [r3, #0]
 80075ac:	6963      	ldr	r3, [r4, #20]
 80075ae:	3001      	adds	r0, #1
 80075b0:	4283      	cmp	r3, r0
 80075b2:	d004      	beq.n	80075be <__swbuf_r+0x62>
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	07db      	lsls	r3, r3, #31
 80075b8:	d506      	bpl.n	80075c8 <__swbuf_r+0x6c>
 80075ba:	2e0a      	cmp	r6, #10
 80075bc:	d104      	bne.n	80075c8 <__swbuf_r+0x6c>
 80075be:	4621      	mov	r1, r4
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 f911 	bl	80077e8 <_fflush_r>
 80075c6:	b988      	cbnz	r0, 80075ec <__swbuf_r+0x90>
 80075c8:	4638      	mov	r0, r7
 80075ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075cc:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <__swbuf_r+0x9c>)
 80075ce:	429c      	cmp	r4, r3
 80075d0:	d101      	bne.n	80075d6 <__swbuf_r+0x7a>
 80075d2:	68ac      	ldr	r4, [r5, #8]
 80075d4:	e7cf      	b.n	8007576 <__swbuf_r+0x1a>
 80075d6:	4b09      	ldr	r3, [pc, #36]	; (80075fc <__swbuf_r+0xa0>)
 80075d8:	429c      	cmp	r4, r3
 80075da:	bf08      	it	eq
 80075dc:	68ec      	ldreq	r4, [r5, #12]
 80075de:	e7ca      	b.n	8007576 <__swbuf_r+0x1a>
 80075e0:	4621      	mov	r1, r4
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 f80c 	bl	8007600 <__swsetup_r>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d0cb      	beq.n	8007584 <__swbuf_r+0x28>
 80075ec:	f04f 37ff 	mov.w	r7, #4294967295
 80075f0:	e7ea      	b.n	80075c8 <__swbuf_r+0x6c>
 80075f2:	bf00      	nop
 80075f4:	080086cc 	.word	0x080086cc
 80075f8:	080086ec 	.word	0x080086ec
 80075fc:	080086ac 	.word	0x080086ac

08007600 <__swsetup_r>:
 8007600:	4b32      	ldr	r3, [pc, #200]	; (80076cc <__swsetup_r+0xcc>)
 8007602:	b570      	push	{r4, r5, r6, lr}
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	4606      	mov	r6, r0
 8007608:	460c      	mov	r4, r1
 800760a:	b125      	cbz	r5, 8007616 <__swsetup_r+0x16>
 800760c:	69ab      	ldr	r3, [r5, #24]
 800760e:	b913      	cbnz	r3, 8007616 <__swsetup_r+0x16>
 8007610:	4628      	mov	r0, r5
 8007612:	f000 f97d 	bl	8007910 <__sinit>
 8007616:	4b2e      	ldr	r3, [pc, #184]	; (80076d0 <__swsetup_r+0xd0>)
 8007618:	429c      	cmp	r4, r3
 800761a:	d10f      	bne.n	800763c <__swsetup_r+0x3c>
 800761c:	686c      	ldr	r4, [r5, #4]
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007624:	0719      	lsls	r1, r3, #28
 8007626:	d42c      	bmi.n	8007682 <__swsetup_r+0x82>
 8007628:	06dd      	lsls	r5, r3, #27
 800762a:	d411      	bmi.n	8007650 <__swsetup_r+0x50>
 800762c:	2309      	movs	r3, #9
 800762e:	6033      	str	r3, [r6, #0]
 8007630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	e03e      	b.n	80076ba <__swsetup_r+0xba>
 800763c:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <__swsetup_r+0xd4>)
 800763e:	429c      	cmp	r4, r3
 8007640:	d101      	bne.n	8007646 <__swsetup_r+0x46>
 8007642:	68ac      	ldr	r4, [r5, #8]
 8007644:	e7eb      	b.n	800761e <__swsetup_r+0x1e>
 8007646:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <__swsetup_r+0xd8>)
 8007648:	429c      	cmp	r4, r3
 800764a:	bf08      	it	eq
 800764c:	68ec      	ldreq	r4, [r5, #12]
 800764e:	e7e6      	b.n	800761e <__swsetup_r+0x1e>
 8007650:	0758      	lsls	r0, r3, #29
 8007652:	d512      	bpl.n	800767a <__swsetup_r+0x7a>
 8007654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007656:	b141      	cbz	r1, 800766a <__swsetup_r+0x6a>
 8007658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800765c:	4299      	cmp	r1, r3
 800765e:	d002      	beq.n	8007666 <__swsetup_r+0x66>
 8007660:	4630      	mov	r0, r6
 8007662:	f000 fa5b 	bl	8007b1c <_free_r>
 8007666:	2300      	movs	r3, #0
 8007668:	6363      	str	r3, [r4, #52]	; 0x34
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	2300      	movs	r3, #0
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f043 0308 	orr.w	r3, r3, #8
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	b94b      	cbnz	r3, 800769a <__swsetup_r+0x9a>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800768c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007690:	d003      	beq.n	800769a <__swsetup_r+0x9a>
 8007692:	4621      	mov	r1, r4
 8007694:	4630      	mov	r0, r6
 8007696:	f000 fa01 	bl	8007a9c <__smakebuf_r>
 800769a:	89a0      	ldrh	r0, [r4, #12]
 800769c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a0:	f010 0301 	ands.w	r3, r0, #1
 80076a4:	d00a      	beq.n	80076bc <__swsetup_r+0xbc>
 80076a6:	2300      	movs	r3, #0
 80076a8:	60a3      	str	r3, [r4, #8]
 80076aa:	6963      	ldr	r3, [r4, #20]
 80076ac:	425b      	negs	r3, r3
 80076ae:	61a3      	str	r3, [r4, #24]
 80076b0:	6923      	ldr	r3, [r4, #16]
 80076b2:	b943      	cbnz	r3, 80076c6 <__swsetup_r+0xc6>
 80076b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076b8:	d1ba      	bne.n	8007630 <__swsetup_r+0x30>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	0781      	lsls	r1, r0, #30
 80076be:	bf58      	it	pl
 80076c0:	6963      	ldrpl	r3, [r4, #20]
 80076c2:	60a3      	str	r3, [r4, #8]
 80076c4:	e7f4      	b.n	80076b0 <__swsetup_r+0xb0>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e7f7      	b.n	80076ba <__swsetup_r+0xba>
 80076ca:	bf00      	nop
 80076cc:	24000068 	.word	0x24000068
 80076d0:	080086cc 	.word	0x080086cc
 80076d4:	080086ec 	.word	0x080086ec
 80076d8:	080086ac 	.word	0x080086ac

080076dc <__sflush_r>:
 80076dc:	898a      	ldrh	r2, [r1, #12]
 80076de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e2:	4605      	mov	r5, r0
 80076e4:	0710      	lsls	r0, r2, #28
 80076e6:	460c      	mov	r4, r1
 80076e8:	d458      	bmi.n	800779c <__sflush_r+0xc0>
 80076ea:	684b      	ldr	r3, [r1, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dc05      	bgt.n	80076fc <__sflush_r+0x20>
 80076f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dc02      	bgt.n	80076fc <__sflush_r+0x20>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076fe:	2e00      	cmp	r6, #0
 8007700:	d0f9      	beq.n	80076f6 <__sflush_r+0x1a>
 8007702:	2300      	movs	r3, #0
 8007704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007708:	682f      	ldr	r7, [r5, #0]
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	d032      	beq.n	8007774 <__sflush_r+0x98>
 800770e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	075a      	lsls	r2, r3, #29
 8007714:	d505      	bpl.n	8007722 <__sflush_r+0x46>
 8007716:	6863      	ldr	r3, [r4, #4]
 8007718:	1ac0      	subs	r0, r0, r3
 800771a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800771c:	b10b      	cbz	r3, 8007722 <__sflush_r+0x46>
 800771e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007720:	1ac0      	subs	r0, r0, r3
 8007722:	2300      	movs	r3, #0
 8007724:	4602      	mov	r2, r0
 8007726:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007728:	6a21      	ldr	r1, [r4, #32]
 800772a:	4628      	mov	r0, r5
 800772c:	47b0      	blx	r6
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	d106      	bne.n	8007742 <__sflush_r+0x66>
 8007734:	6829      	ldr	r1, [r5, #0]
 8007736:	291d      	cmp	r1, #29
 8007738:	d82c      	bhi.n	8007794 <__sflush_r+0xb8>
 800773a:	4a2a      	ldr	r2, [pc, #168]	; (80077e4 <__sflush_r+0x108>)
 800773c:	40ca      	lsrs	r2, r1
 800773e:	07d6      	lsls	r6, r2, #31
 8007740:	d528      	bpl.n	8007794 <__sflush_r+0xb8>
 8007742:	2200      	movs	r2, #0
 8007744:	6062      	str	r2, [r4, #4]
 8007746:	04d9      	lsls	r1, r3, #19
 8007748:	6922      	ldr	r2, [r4, #16]
 800774a:	6022      	str	r2, [r4, #0]
 800774c:	d504      	bpl.n	8007758 <__sflush_r+0x7c>
 800774e:	1c42      	adds	r2, r0, #1
 8007750:	d101      	bne.n	8007756 <__sflush_r+0x7a>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	b903      	cbnz	r3, 8007758 <__sflush_r+0x7c>
 8007756:	6560      	str	r0, [r4, #84]	; 0x54
 8007758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800775a:	602f      	str	r7, [r5, #0]
 800775c:	2900      	cmp	r1, #0
 800775e:	d0ca      	beq.n	80076f6 <__sflush_r+0x1a>
 8007760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007764:	4299      	cmp	r1, r3
 8007766:	d002      	beq.n	800776e <__sflush_r+0x92>
 8007768:	4628      	mov	r0, r5
 800776a:	f000 f9d7 	bl	8007b1c <_free_r>
 800776e:	2000      	movs	r0, #0
 8007770:	6360      	str	r0, [r4, #52]	; 0x34
 8007772:	e7c1      	b.n	80076f8 <__sflush_r+0x1c>
 8007774:	6a21      	ldr	r1, [r4, #32]
 8007776:	2301      	movs	r3, #1
 8007778:	4628      	mov	r0, r5
 800777a:	47b0      	blx	r6
 800777c:	1c41      	adds	r1, r0, #1
 800777e:	d1c7      	bne.n	8007710 <__sflush_r+0x34>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0c4      	beq.n	8007710 <__sflush_r+0x34>
 8007786:	2b1d      	cmp	r3, #29
 8007788:	d001      	beq.n	800778e <__sflush_r+0xb2>
 800778a:	2b16      	cmp	r3, #22
 800778c:	d101      	bne.n	8007792 <__sflush_r+0xb6>
 800778e:	602f      	str	r7, [r5, #0]
 8007790:	e7b1      	b.n	80076f6 <__sflush_r+0x1a>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	e7ad      	b.n	80076f8 <__sflush_r+0x1c>
 800779c:	690f      	ldr	r7, [r1, #16]
 800779e:	2f00      	cmp	r7, #0
 80077a0:	d0a9      	beq.n	80076f6 <__sflush_r+0x1a>
 80077a2:	0793      	lsls	r3, r2, #30
 80077a4:	680e      	ldr	r6, [r1, #0]
 80077a6:	bf08      	it	eq
 80077a8:	694b      	ldreq	r3, [r1, #20]
 80077aa:	600f      	str	r7, [r1, #0]
 80077ac:	bf18      	it	ne
 80077ae:	2300      	movne	r3, #0
 80077b0:	eba6 0807 	sub.w	r8, r6, r7
 80077b4:	608b      	str	r3, [r1, #8]
 80077b6:	f1b8 0f00 	cmp.w	r8, #0
 80077ba:	dd9c      	ble.n	80076f6 <__sflush_r+0x1a>
 80077bc:	6a21      	ldr	r1, [r4, #32]
 80077be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077c0:	4643      	mov	r3, r8
 80077c2:	463a      	mov	r2, r7
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b0      	blx	r6
 80077c8:	2800      	cmp	r0, #0
 80077ca:	dc06      	bgt.n	80077da <__sflush_r+0xfe>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d2:	81a3      	strh	r3, [r4, #12]
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	e78e      	b.n	80076f8 <__sflush_r+0x1c>
 80077da:	4407      	add	r7, r0
 80077dc:	eba8 0800 	sub.w	r8, r8, r0
 80077e0:	e7e9      	b.n	80077b6 <__sflush_r+0xda>
 80077e2:	bf00      	nop
 80077e4:	20400001 	.word	0x20400001

080077e8 <_fflush_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	690b      	ldr	r3, [r1, #16]
 80077ec:	4605      	mov	r5, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	b913      	cbnz	r3, 80077f8 <_fflush_r+0x10>
 80077f2:	2500      	movs	r5, #0
 80077f4:	4628      	mov	r0, r5
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	b118      	cbz	r0, 8007802 <_fflush_r+0x1a>
 80077fa:	6983      	ldr	r3, [r0, #24]
 80077fc:	b90b      	cbnz	r3, 8007802 <_fflush_r+0x1a>
 80077fe:	f000 f887 	bl	8007910 <__sinit>
 8007802:	4b14      	ldr	r3, [pc, #80]	; (8007854 <_fflush_r+0x6c>)
 8007804:	429c      	cmp	r4, r3
 8007806:	d11b      	bne.n	8007840 <_fflush_r+0x58>
 8007808:	686c      	ldr	r4, [r5, #4]
 800780a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0ef      	beq.n	80077f2 <_fflush_r+0xa>
 8007812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007814:	07d0      	lsls	r0, r2, #31
 8007816:	d404      	bmi.n	8007822 <_fflush_r+0x3a>
 8007818:	0599      	lsls	r1, r3, #22
 800781a:	d402      	bmi.n	8007822 <_fflush_r+0x3a>
 800781c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781e:	f000 f915 	bl	8007a4c <__retarget_lock_acquire_recursive>
 8007822:	4628      	mov	r0, r5
 8007824:	4621      	mov	r1, r4
 8007826:	f7ff ff59 	bl	80076dc <__sflush_r>
 800782a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800782c:	07da      	lsls	r2, r3, #31
 800782e:	4605      	mov	r5, r0
 8007830:	d4e0      	bmi.n	80077f4 <_fflush_r+0xc>
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	059b      	lsls	r3, r3, #22
 8007836:	d4dd      	bmi.n	80077f4 <_fflush_r+0xc>
 8007838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800783a:	f000 f908 	bl	8007a4e <__retarget_lock_release_recursive>
 800783e:	e7d9      	b.n	80077f4 <_fflush_r+0xc>
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <_fflush_r+0x70>)
 8007842:	429c      	cmp	r4, r3
 8007844:	d101      	bne.n	800784a <_fflush_r+0x62>
 8007846:	68ac      	ldr	r4, [r5, #8]
 8007848:	e7df      	b.n	800780a <_fflush_r+0x22>
 800784a:	4b04      	ldr	r3, [pc, #16]	; (800785c <_fflush_r+0x74>)
 800784c:	429c      	cmp	r4, r3
 800784e:	bf08      	it	eq
 8007850:	68ec      	ldreq	r4, [r5, #12]
 8007852:	e7da      	b.n	800780a <_fflush_r+0x22>
 8007854:	080086cc 	.word	0x080086cc
 8007858:	080086ec 	.word	0x080086ec
 800785c:	080086ac 	.word	0x080086ac

08007860 <std>:
 8007860:	2300      	movs	r3, #0
 8007862:	b510      	push	{r4, lr}
 8007864:	4604      	mov	r4, r0
 8007866:	e9c0 3300 	strd	r3, r3, [r0]
 800786a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800786e:	6083      	str	r3, [r0, #8]
 8007870:	8181      	strh	r1, [r0, #12]
 8007872:	6643      	str	r3, [r0, #100]	; 0x64
 8007874:	81c2      	strh	r2, [r0, #14]
 8007876:	6183      	str	r3, [r0, #24]
 8007878:	4619      	mov	r1, r3
 800787a:	2208      	movs	r2, #8
 800787c:	305c      	adds	r0, #92	; 0x5c
 800787e:	f7ff fdd7 	bl	8007430 <memset>
 8007882:	4b05      	ldr	r3, [pc, #20]	; (8007898 <std+0x38>)
 8007884:	6263      	str	r3, [r4, #36]	; 0x24
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <std+0x3c>)
 8007888:	62a3      	str	r3, [r4, #40]	; 0x28
 800788a:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <std+0x40>)
 800788c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800788e:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <std+0x44>)
 8007890:	6224      	str	r4, [r4, #32]
 8007892:	6323      	str	r3, [r4, #48]	; 0x30
 8007894:	bd10      	pop	{r4, pc}
 8007896:	bf00      	nop
 8007898:	080082d9 	.word	0x080082d9
 800789c:	080082fb 	.word	0x080082fb
 80078a0:	08008333 	.word	0x08008333
 80078a4:	08008357 	.word	0x08008357

080078a8 <_cleanup_r>:
 80078a8:	4901      	ldr	r1, [pc, #4]	; (80078b0 <_cleanup_r+0x8>)
 80078aa:	f000 b8af 	b.w	8007a0c <_fwalk_reent>
 80078ae:	bf00      	nop
 80078b0:	080077e9 	.word	0x080077e9

080078b4 <__sfmoreglue>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	2268      	movs	r2, #104	; 0x68
 80078b8:	1e4d      	subs	r5, r1, #1
 80078ba:	4355      	muls	r5, r2
 80078bc:	460e      	mov	r6, r1
 80078be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078c2:	f000 f997 	bl	8007bf4 <_malloc_r>
 80078c6:	4604      	mov	r4, r0
 80078c8:	b140      	cbz	r0, 80078dc <__sfmoreglue+0x28>
 80078ca:	2100      	movs	r1, #0
 80078cc:	e9c0 1600 	strd	r1, r6, [r0]
 80078d0:	300c      	adds	r0, #12
 80078d2:	60a0      	str	r0, [r4, #8]
 80078d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078d8:	f7ff fdaa 	bl	8007430 <memset>
 80078dc:	4620      	mov	r0, r4
 80078de:	bd70      	pop	{r4, r5, r6, pc}

080078e0 <__sfp_lock_acquire>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__sfp_lock_acquire+0x8>)
 80078e2:	f000 b8b3 	b.w	8007a4c <__retarget_lock_acquire_recursive>
 80078e6:	bf00      	nop
 80078e8:	240009fd 	.word	0x240009fd

080078ec <__sfp_lock_release>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__sfp_lock_release+0x8>)
 80078ee:	f000 b8ae 	b.w	8007a4e <__retarget_lock_release_recursive>
 80078f2:	bf00      	nop
 80078f4:	240009fd 	.word	0x240009fd

080078f8 <__sinit_lock_acquire>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__sinit_lock_acquire+0x8>)
 80078fa:	f000 b8a7 	b.w	8007a4c <__retarget_lock_acquire_recursive>
 80078fe:	bf00      	nop
 8007900:	240009fe 	.word	0x240009fe

08007904 <__sinit_lock_release>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__sinit_lock_release+0x8>)
 8007906:	f000 b8a2 	b.w	8007a4e <__retarget_lock_release_recursive>
 800790a:	bf00      	nop
 800790c:	240009fe 	.word	0x240009fe

08007910 <__sinit>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4604      	mov	r4, r0
 8007914:	f7ff fff0 	bl	80078f8 <__sinit_lock_acquire>
 8007918:	69a3      	ldr	r3, [r4, #24]
 800791a:	b11b      	cbz	r3, 8007924 <__sinit+0x14>
 800791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007920:	f7ff bff0 	b.w	8007904 <__sinit_lock_release>
 8007924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007928:	6523      	str	r3, [r4, #80]	; 0x50
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <__sinit+0x68>)
 800792c:	4a13      	ldr	r2, [pc, #76]	; (800797c <__sinit+0x6c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	62a2      	str	r2, [r4, #40]	; 0x28
 8007932:	42a3      	cmp	r3, r4
 8007934:	bf04      	itt	eq
 8007936:	2301      	moveq	r3, #1
 8007938:	61a3      	streq	r3, [r4, #24]
 800793a:	4620      	mov	r0, r4
 800793c:	f000 f820 	bl	8007980 <__sfp>
 8007940:	6060      	str	r0, [r4, #4]
 8007942:	4620      	mov	r0, r4
 8007944:	f000 f81c 	bl	8007980 <__sfp>
 8007948:	60a0      	str	r0, [r4, #8]
 800794a:	4620      	mov	r0, r4
 800794c:	f000 f818 	bl	8007980 <__sfp>
 8007950:	2200      	movs	r2, #0
 8007952:	60e0      	str	r0, [r4, #12]
 8007954:	2104      	movs	r1, #4
 8007956:	6860      	ldr	r0, [r4, #4]
 8007958:	f7ff ff82 	bl	8007860 <std>
 800795c:	68a0      	ldr	r0, [r4, #8]
 800795e:	2201      	movs	r2, #1
 8007960:	2109      	movs	r1, #9
 8007962:	f7ff ff7d 	bl	8007860 <std>
 8007966:	68e0      	ldr	r0, [r4, #12]
 8007968:	2202      	movs	r2, #2
 800796a:	2112      	movs	r1, #18
 800796c:	f7ff ff78 	bl	8007860 <std>
 8007970:	2301      	movs	r3, #1
 8007972:	61a3      	str	r3, [r4, #24]
 8007974:	e7d2      	b.n	800791c <__sinit+0xc>
 8007976:	bf00      	nop
 8007978:	080086a8 	.word	0x080086a8
 800797c:	080078a9 	.word	0x080078a9

08007980 <__sfp>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	4607      	mov	r7, r0
 8007984:	f7ff ffac 	bl	80078e0 <__sfp_lock_acquire>
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <__sfp+0x84>)
 800798a:	681e      	ldr	r6, [r3, #0]
 800798c:	69b3      	ldr	r3, [r6, #24]
 800798e:	b913      	cbnz	r3, 8007996 <__sfp+0x16>
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff ffbd 	bl	8007910 <__sinit>
 8007996:	3648      	adds	r6, #72	; 0x48
 8007998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	d503      	bpl.n	80079a8 <__sfp+0x28>
 80079a0:	6833      	ldr	r3, [r6, #0]
 80079a2:	b30b      	cbz	r3, 80079e8 <__sfp+0x68>
 80079a4:	6836      	ldr	r6, [r6, #0]
 80079a6:	e7f7      	b.n	8007998 <__sfp+0x18>
 80079a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079ac:	b9d5      	cbnz	r5, 80079e4 <__sfp+0x64>
 80079ae:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <__sfp+0x88>)
 80079b0:	60e3      	str	r3, [r4, #12]
 80079b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079b6:	6665      	str	r5, [r4, #100]	; 0x64
 80079b8:	f000 f847 	bl	8007a4a <__retarget_lock_init_recursive>
 80079bc:	f7ff ff96 	bl	80078ec <__sfp_lock_release>
 80079c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079c8:	6025      	str	r5, [r4, #0]
 80079ca:	61a5      	str	r5, [r4, #24]
 80079cc:	2208      	movs	r2, #8
 80079ce:	4629      	mov	r1, r5
 80079d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079d4:	f7ff fd2c 	bl	8007430 <memset>
 80079d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079e0:	4620      	mov	r0, r4
 80079e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e4:	3468      	adds	r4, #104	; 0x68
 80079e6:	e7d9      	b.n	800799c <__sfp+0x1c>
 80079e8:	2104      	movs	r1, #4
 80079ea:	4638      	mov	r0, r7
 80079ec:	f7ff ff62 	bl	80078b4 <__sfmoreglue>
 80079f0:	4604      	mov	r4, r0
 80079f2:	6030      	str	r0, [r6, #0]
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1d5      	bne.n	80079a4 <__sfp+0x24>
 80079f8:	f7ff ff78 	bl	80078ec <__sfp_lock_release>
 80079fc:	230c      	movs	r3, #12
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	e7ee      	b.n	80079e0 <__sfp+0x60>
 8007a02:	bf00      	nop
 8007a04:	080086a8 	.word	0x080086a8
 8007a08:	ffff0001 	.word	0xffff0001

08007a0c <_fwalk_reent>:
 8007a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a10:	4606      	mov	r6, r0
 8007a12:	4688      	mov	r8, r1
 8007a14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a18:	2700      	movs	r7, #0
 8007a1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a1e:	f1b9 0901 	subs.w	r9, r9, #1
 8007a22:	d505      	bpl.n	8007a30 <_fwalk_reent+0x24>
 8007a24:	6824      	ldr	r4, [r4, #0]
 8007a26:	2c00      	cmp	r4, #0
 8007a28:	d1f7      	bne.n	8007a1a <_fwalk_reent+0xe>
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a30:	89ab      	ldrh	r3, [r5, #12]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d907      	bls.n	8007a46 <_fwalk_reent+0x3a>
 8007a36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	d003      	beq.n	8007a46 <_fwalk_reent+0x3a>
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4630      	mov	r0, r6
 8007a42:	47c0      	blx	r8
 8007a44:	4307      	orrs	r7, r0
 8007a46:	3568      	adds	r5, #104	; 0x68
 8007a48:	e7e9      	b.n	8007a1e <_fwalk_reent+0x12>

08007a4a <__retarget_lock_init_recursive>:
 8007a4a:	4770      	bx	lr

08007a4c <__retarget_lock_acquire_recursive>:
 8007a4c:	4770      	bx	lr

08007a4e <__retarget_lock_release_recursive>:
 8007a4e:	4770      	bx	lr

08007a50 <__swhatbuf_r>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	460e      	mov	r6, r1
 8007a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	b096      	sub	sp, #88	; 0x58
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	461d      	mov	r5, r3
 8007a60:	da08      	bge.n	8007a74 <__swhatbuf_r+0x24>
 8007a62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	061a      	lsls	r2, r3, #24
 8007a6c:	d410      	bmi.n	8007a90 <__swhatbuf_r+0x40>
 8007a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a72:	e00e      	b.n	8007a92 <__swhatbuf_r+0x42>
 8007a74:	466a      	mov	r2, sp
 8007a76:	f000 fc95 	bl	80083a4 <_fstat_r>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	dbf1      	blt.n	8007a62 <__swhatbuf_r+0x12>
 8007a7e:	9a01      	ldr	r2, [sp, #4]
 8007a80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a88:	425a      	negs	r2, r3
 8007a8a:	415a      	adcs	r2, r3
 8007a8c:	602a      	str	r2, [r5, #0]
 8007a8e:	e7ee      	b.n	8007a6e <__swhatbuf_r+0x1e>
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	2000      	movs	r0, #0
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	b016      	add	sp, #88	; 0x58
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a9c <__smakebuf_r>:
 8007a9c:	898b      	ldrh	r3, [r1, #12]
 8007a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa0:	079d      	lsls	r5, r3, #30
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	d507      	bpl.n	8007ab8 <__smakebuf_r+0x1c>
 8007aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	6123      	str	r3, [r4, #16]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	6163      	str	r3, [r4, #20]
 8007ab4:	b002      	add	sp, #8
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	ab01      	add	r3, sp, #4
 8007aba:	466a      	mov	r2, sp
 8007abc:	f7ff ffc8 	bl	8007a50 <__swhatbuf_r>
 8007ac0:	9900      	ldr	r1, [sp, #0]
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f000 f895 	bl	8007bf4 <_malloc_r>
 8007aca:	b948      	cbnz	r0, 8007ae0 <__smakebuf_r+0x44>
 8007acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad0:	059a      	lsls	r2, r3, #22
 8007ad2:	d4ef      	bmi.n	8007ab4 <__smakebuf_r+0x18>
 8007ad4:	f023 0303 	bic.w	r3, r3, #3
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	e7e3      	b.n	8007aa8 <__smakebuf_r+0xc>
 8007ae0:	4b0d      	ldr	r3, [pc, #52]	; (8007b18 <__smakebuf_r+0x7c>)
 8007ae2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	6020      	str	r0, [r4, #0]
 8007ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	9b00      	ldr	r3, [sp, #0]
 8007af0:	6163      	str	r3, [r4, #20]
 8007af2:	9b01      	ldr	r3, [sp, #4]
 8007af4:	6120      	str	r0, [r4, #16]
 8007af6:	b15b      	cbz	r3, 8007b10 <__smakebuf_r+0x74>
 8007af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007afc:	4630      	mov	r0, r6
 8007afe:	f000 fc63 	bl	80083c8 <_isatty_r>
 8007b02:	b128      	cbz	r0, 8007b10 <__smakebuf_r+0x74>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f023 0303 	bic.w	r3, r3, #3
 8007b0a:	f043 0301 	orr.w	r3, r3, #1
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	89a0      	ldrh	r0, [r4, #12]
 8007b12:	4305      	orrs	r5, r0
 8007b14:	81a5      	strh	r5, [r4, #12]
 8007b16:	e7cd      	b.n	8007ab4 <__smakebuf_r+0x18>
 8007b18:	080078a9 	.word	0x080078a9

08007b1c <_free_r>:
 8007b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	d044      	beq.n	8007bac <_free_r+0x90>
 8007b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b26:	9001      	str	r0, [sp, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b2e:	bfb8      	it	lt
 8007b30:	18e4      	addlt	r4, r4, r3
 8007b32:	f000 fc6b 	bl	800840c <__malloc_lock>
 8007b36:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <_free_r+0x94>)
 8007b38:	9801      	ldr	r0, [sp, #4]
 8007b3a:	6813      	ldr	r3, [r2, #0]
 8007b3c:	b933      	cbnz	r3, 8007b4c <_free_r+0x30>
 8007b3e:	6063      	str	r3, [r4, #4]
 8007b40:	6014      	str	r4, [r2, #0]
 8007b42:	b003      	add	sp, #12
 8007b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b48:	f000 bc66 	b.w	8008418 <__malloc_unlock>
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	d908      	bls.n	8007b62 <_free_r+0x46>
 8007b50:	6825      	ldr	r5, [r4, #0]
 8007b52:	1961      	adds	r1, r4, r5
 8007b54:	428b      	cmp	r3, r1
 8007b56:	bf01      	itttt	eq
 8007b58:	6819      	ldreq	r1, [r3, #0]
 8007b5a:	685b      	ldreq	r3, [r3, #4]
 8007b5c:	1949      	addeq	r1, r1, r5
 8007b5e:	6021      	streq	r1, [r4, #0]
 8007b60:	e7ed      	b.n	8007b3e <_free_r+0x22>
 8007b62:	461a      	mov	r2, r3
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	b10b      	cbz	r3, 8007b6c <_free_r+0x50>
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	d9fa      	bls.n	8007b62 <_free_r+0x46>
 8007b6c:	6811      	ldr	r1, [r2, #0]
 8007b6e:	1855      	adds	r5, r2, r1
 8007b70:	42a5      	cmp	r5, r4
 8007b72:	d10b      	bne.n	8007b8c <_free_r+0x70>
 8007b74:	6824      	ldr	r4, [r4, #0]
 8007b76:	4421      	add	r1, r4
 8007b78:	1854      	adds	r4, r2, r1
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	6011      	str	r1, [r2, #0]
 8007b7e:	d1e0      	bne.n	8007b42 <_free_r+0x26>
 8007b80:	681c      	ldr	r4, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	6053      	str	r3, [r2, #4]
 8007b86:	4421      	add	r1, r4
 8007b88:	6011      	str	r1, [r2, #0]
 8007b8a:	e7da      	b.n	8007b42 <_free_r+0x26>
 8007b8c:	d902      	bls.n	8007b94 <_free_r+0x78>
 8007b8e:	230c      	movs	r3, #12
 8007b90:	6003      	str	r3, [r0, #0]
 8007b92:	e7d6      	b.n	8007b42 <_free_r+0x26>
 8007b94:	6825      	ldr	r5, [r4, #0]
 8007b96:	1961      	adds	r1, r4, r5
 8007b98:	428b      	cmp	r3, r1
 8007b9a:	bf04      	itt	eq
 8007b9c:	6819      	ldreq	r1, [r3, #0]
 8007b9e:	685b      	ldreq	r3, [r3, #4]
 8007ba0:	6063      	str	r3, [r4, #4]
 8007ba2:	bf04      	itt	eq
 8007ba4:	1949      	addeq	r1, r1, r5
 8007ba6:	6021      	streq	r1, [r4, #0]
 8007ba8:	6054      	str	r4, [r2, #4]
 8007baa:	e7ca      	b.n	8007b42 <_free_r+0x26>
 8007bac:	b003      	add	sp, #12
 8007bae:	bd30      	pop	{r4, r5, pc}
 8007bb0:	24000a00 	.word	0x24000a00

08007bb4 <sbrk_aligned>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	4e0e      	ldr	r6, [pc, #56]	; (8007bf0 <sbrk_aligned+0x3c>)
 8007bb8:	460c      	mov	r4, r1
 8007bba:	6831      	ldr	r1, [r6, #0]
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	b911      	cbnz	r1, 8007bc6 <sbrk_aligned+0x12>
 8007bc0:	f000 fb7a 	bl	80082b8 <_sbrk_r>
 8007bc4:	6030      	str	r0, [r6, #0]
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 fb75 	bl	80082b8 <_sbrk_r>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	d00a      	beq.n	8007be8 <sbrk_aligned+0x34>
 8007bd2:	1cc4      	adds	r4, r0, #3
 8007bd4:	f024 0403 	bic.w	r4, r4, #3
 8007bd8:	42a0      	cmp	r0, r4
 8007bda:	d007      	beq.n	8007bec <sbrk_aligned+0x38>
 8007bdc:	1a21      	subs	r1, r4, r0
 8007bde:	4628      	mov	r0, r5
 8007be0:	f000 fb6a 	bl	80082b8 <_sbrk_r>
 8007be4:	3001      	adds	r0, #1
 8007be6:	d101      	bne.n	8007bec <sbrk_aligned+0x38>
 8007be8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bec:	4620      	mov	r0, r4
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	24000a04 	.word	0x24000a04

08007bf4 <_malloc_r>:
 8007bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf8:	1ccd      	adds	r5, r1, #3
 8007bfa:	f025 0503 	bic.w	r5, r5, #3
 8007bfe:	3508      	adds	r5, #8
 8007c00:	2d0c      	cmp	r5, #12
 8007c02:	bf38      	it	cc
 8007c04:	250c      	movcc	r5, #12
 8007c06:	2d00      	cmp	r5, #0
 8007c08:	4607      	mov	r7, r0
 8007c0a:	db01      	blt.n	8007c10 <_malloc_r+0x1c>
 8007c0c:	42a9      	cmp	r1, r5
 8007c0e:	d905      	bls.n	8007c1c <_malloc_r+0x28>
 8007c10:	230c      	movs	r3, #12
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	2600      	movs	r6, #0
 8007c16:	4630      	mov	r0, r6
 8007c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1c:	4e2e      	ldr	r6, [pc, #184]	; (8007cd8 <_malloc_r+0xe4>)
 8007c1e:	f000 fbf5 	bl	800840c <__malloc_lock>
 8007c22:	6833      	ldr	r3, [r6, #0]
 8007c24:	461c      	mov	r4, r3
 8007c26:	bb34      	cbnz	r4, 8007c76 <_malloc_r+0x82>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	f7ff ffc2 	bl	8007bb4 <sbrk_aligned>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	4604      	mov	r4, r0
 8007c34:	d14d      	bne.n	8007cd2 <_malloc_r+0xde>
 8007c36:	6834      	ldr	r4, [r6, #0]
 8007c38:	4626      	mov	r6, r4
 8007c3a:	2e00      	cmp	r6, #0
 8007c3c:	d140      	bne.n	8007cc0 <_malloc_r+0xcc>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	4631      	mov	r1, r6
 8007c42:	4638      	mov	r0, r7
 8007c44:	eb04 0803 	add.w	r8, r4, r3
 8007c48:	f000 fb36 	bl	80082b8 <_sbrk_r>
 8007c4c:	4580      	cmp	r8, r0
 8007c4e:	d13a      	bne.n	8007cc6 <_malloc_r+0xd2>
 8007c50:	6821      	ldr	r1, [r4, #0]
 8007c52:	3503      	adds	r5, #3
 8007c54:	1a6d      	subs	r5, r5, r1
 8007c56:	f025 0503 	bic.w	r5, r5, #3
 8007c5a:	3508      	adds	r5, #8
 8007c5c:	2d0c      	cmp	r5, #12
 8007c5e:	bf38      	it	cc
 8007c60:	250c      	movcc	r5, #12
 8007c62:	4629      	mov	r1, r5
 8007c64:	4638      	mov	r0, r7
 8007c66:	f7ff ffa5 	bl	8007bb4 <sbrk_aligned>
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d02b      	beq.n	8007cc6 <_malloc_r+0xd2>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	442b      	add	r3, r5
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	e00e      	b.n	8007c94 <_malloc_r+0xa0>
 8007c76:	6822      	ldr	r2, [r4, #0]
 8007c78:	1b52      	subs	r2, r2, r5
 8007c7a:	d41e      	bmi.n	8007cba <_malloc_r+0xc6>
 8007c7c:	2a0b      	cmp	r2, #11
 8007c7e:	d916      	bls.n	8007cae <_malloc_r+0xba>
 8007c80:	1961      	adds	r1, r4, r5
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	6025      	str	r5, [r4, #0]
 8007c86:	bf18      	it	ne
 8007c88:	6059      	strne	r1, [r3, #4]
 8007c8a:	6863      	ldr	r3, [r4, #4]
 8007c8c:	bf08      	it	eq
 8007c8e:	6031      	streq	r1, [r6, #0]
 8007c90:	5162      	str	r2, [r4, r5]
 8007c92:	604b      	str	r3, [r1, #4]
 8007c94:	4638      	mov	r0, r7
 8007c96:	f104 060b 	add.w	r6, r4, #11
 8007c9a:	f000 fbbd 	bl	8008418 <__malloc_unlock>
 8007c9e:	f026 0607 	bic.w	r6, r6, #7
 8007ca2:	1d23      	adds	r3, r4, #4
 8007ca4:	1af2      	subs	r2, r6, r3
 8007ca6:	d0b6      	beq.n	8007c16 <_malloc_r+0x22>
 8007ca8:	1b9b      	subs	r3, r3, r6
 8007caa:	50a3      	str	r3, [r4, r2]
 8007cac:	e7b3      	b.n	8007c16 <_malloc_r+0x22>
 8007cae:	6862      	ldr	r2, [r4, #4]
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	bf0c      	ite	eq
 8007cb4:	6032      	streq	r2, [r6, #0]
 8007cb6:	605a      	strne	r2, [r3, #4]
 8007cb8:	e7ec      	b.n	8007c94 <_malloc_r+0xa0>
 8007cba:	4623      	mov	r3, r4
 8007cbc:	6864      	ldr	r4, [r4, #4]
 8007cbe:	e7b2      	b.n	8007c26 <_malloc_r+0x32>
 8007cc0:	4634      	mov	r4, r6
 8007cc2:	6876      	ldr	r6, [r6, #4]
 8007cc4:	e7b9      	b.n	8007c3a <_malloc_r+0x46>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	603b      	str	r3, [r7, #0]
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f000 fba4 	bl	8008418 <__malloc_unlock>
 8007cd0:	e7a1      	b.n	8007c16 <_malloc_r+0x22>
 8007cd2:	6025      	str	r5, [r4, #0]
 8007cd4:	e7de      	b.n	8007c94 <_malloc_r+0xa0>
 8007cd6:	bf00      	nop
 8007cd8:	24000a00 	.word	0x24000a00

08007cdc <__sfputc_r>:
 8007cdc:	6893      	ldr	r3, [r2, #8]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	b410      	push	{r4}
 8007ce4:	6093      	str	r3, [r2, #8]
 8007ce6:	da08      	bge.n	8007cfa <__sfputc_r+0x1e>
 8007ce8:	6994      	ldr	r4, [r2, #24]
 8007cea:	42a3      	cmp	r3, r4
 8007cec:	db01      	blt.n	8007cf2 <__sfputc_r+0x16>
 8007cee:	290a      	cmp	r1, #10
 8007cf0:	d103      	bne.n	8007cfa <__sfputc_r+0x1e>
 8007cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf6:	f7ff bc31 	b.w	800755c <__swbuf_r>
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	1c58      	adds	r0, r3, #1
 8007cfe:	6010      	str	r0, [r2, #0]
 8007d00:	7019      	strb	r1, [r3, #0]
 8007d02:	4608      	mov	r0, r1
 8007d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <__sfputs_r>:
 8007d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	460f      	mov	r7, r1
 8007d10:	4614      	mov	r4, r2
 8007d12:	18d5      	adds	r5, r2, r3
 8007d14:	42ac      	cmp	r4, r5
 8007d16:	d101      	bne.n	8007d1c <__sfputs_r+0x12>
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e007      	b.n	8007d2c <__sfputs_r+0x22>
 8007d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d20:	463a      	mov	r2, r7
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7ff ffda 	bl	8007cdc <__sfputc_r>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d1f3      	bne.n	8007d14 <__sfputs_r+0xa>
 8007d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d30 <_vfiprintf_r>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	460d      	mov	r5, r1
 8007d36:	b09d      	sub	sp, #116	; 0x74
 8007d38:	4614      	mov	r4, r2
 8007d3a:	4698      	mov	r8, r3
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	b118      	cbz	r0, 8007d48 <_vfiprintf_r+0x18>
 8007d40:	6983      	ldr	r3, [r0, #24]
 8007d42:	b90b      	cbnz	r3, 8007d48 <_vfiprintf_r+0x18>
 8007d44:	f7ff fde4 	bl	8007910 <__sinit>
 8007d48:	4b89      	ldr	r3, [pc, #548]	; (8007f70 <_vfiprintf_r+0x240>)
 8007d4a:	429d      	cmp	r5, r3
 8007d4c:	d11b      	bne.n	8007d86 <_vfiprintf_r+0x56>
 8007d4e:	6875      	ldr	r5, [r6, #4]
 8007d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d52:	07d9      	lsls	r1, r3, #31
 8007d54:	d405      	bmi.n	8007d62 <_vfiprintf_r+0x32>
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	059a      	lsls	r2, r3, #22
 8007d5a:	d402      	bmi.n	8007d62 <_vfiprintf_r+0x32>
 8007d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d5e:	f7ff fe75 	bl	8007a4c <__retarget_lock_acquire_recursive>
 8007d62:	89ab      	ldrh	r3, [r5, #12]
 8007d64:	071b      	lsls	r3, r3, #28
 8007d66:	d501      	bpl.n	8007d6c <_vfiprintf_r+0x3c>
 8007d68:	692b      	ldr	r3, [r5, #16]
 8007d6a:	b9eb      	cbnz	r3, 8007da8 <_vfiprintf_r+0x78>
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f7ff fc46 	bl	8007600 <__swsetup_r>
 8007d74:	b1c0      	cbz	r0, 8007da8 <_vfiprintf_r+0x78>
 8007d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d78:	07dc      	lsls	r4, r3, #31
 8007d7a:	d50e      	bpl.n	8007d9a <_vfiprintf_r+0x6a>
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	b01d      	add	sp, #116	; 0x74
 8007d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d86:	4b7b      	ldr	r3, [pc, #492]	; (8007f74 <_vfiprintf_r+0x244>)
 8007d88:	429d      	cmp	r5, r3
 8007d8a:	d101      	bne.n	8007d90 <_vfiprintf_r+0x60>
 8007d8c:	68b5      	ldr	r5, [r6, #8]
 8007d8e:	e7df      	b.n	8007d50 <_vfiprintf_r+0x20>
 8007d90:	4b79      	ldr	r3, [pc, #484]	; (8007f78 <_vfiprintf_r+0x248>)
 8007d92:	429d      	cmp	r5, r3
 8007d94:	bf08      	it	eq
 8007d96:	68f5      	ldreq	r5, [r6, #12]
 8007d98:	e7da      	b.n	8007d50 <_vfiprintf_r+0x20>
 8007d9a:	89ab      	ldrh	r3, [r5, #12]
 8007d9c:	0598      	lsls	r0, r3, #22
 8007d9e:	d4ed      	bmi.n	8007d7c <_vfiprintf_r+0x4c>
 8007da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007da2:	f7ff fe54 	bl	8007a4e <__retarget_lock_release_recursive>
 8007da6:	e7e9      	b.n	8007d7c <_vfiprintf_r+0x4c>
 8007da8:	2300      	movs	r3, #0
 8007daa:	9309      	str	r3, [sp, #36]	; 0x24
 8007dac:	2320      	movs	r3, #32
 8007dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db6:	2330      	movs	r3, #48	; 0x30
 8007db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f7c <_vfiprintf_r+0x24c>
 8007dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc0:	f04f 0901 	mov.w	r9, #1
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	469a      	mov	sl, r3
 8007dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dcc:	b10a      	cbz	r2, 8007dd2 <_vfiprintf_r+0xa2>
 8007dce:	2a25      	cmp	r2, #37	; 0x25
 8007dd0:	d1f9      	bne.n	8007dc6 <_vfiprintf_r+0x96>
 8007dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd6:	d00b      	beq.n	8007df0 <_vfiprintf_r+0xc0>
 8007dd8:	465b      	mov	r3, fp
 8007dda:	4622      	mov	r2, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff ff93 	bl	8007d0a <__sfputs_r>
 8007de4:	3001      	adds	r0, #1
 8007de6:	f000 80aa 	beq.w	8007f3e <_vfiprintf_r+0x20e>
 8007dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dec:	445a      	add	r2, fp
 8007dee:	9209      	str	r2, [sp, #36]	; 0x24
 8007df0:	f89a 3000 	ldrb.w	r3, [sl]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 80a2 	beq.w	8007f3e <_vfiprintf_r+0x20e>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e04:	f10a 0a01 	add.w	sl, sl, #1
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e10:	931a      	str	r3, [sp, #104]	; 0x68
 8007e12:	4654      	mov	r4, sl
 8007e14:	2205      	movs	r2, #5
 8007e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1a:	4858      	ldr	r0, [pc, #352]	; (8007f7c <_vfiprintf_r+0x24c>)
 8007e1c:	f7f8 fa60 	bl	80002e0 <memchr>
 8007e20:	9a04      	ldr	r2, [sp, #16]
 8007e22:	b9d8      	cbnz	r0, 8007e5c <_vfiprintf_r+0x12c>
 8007e24:	06d1      	lsls	r1, r2, #27
 8007e26:	bf44      	itt	mi
 8007e28:	2320      	movmi	r3, #32
 8007e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e2e:	0713      	lsls	r3, r2, #28
 8007e30:	bf44      	itt	mi
 8007e32:	232b      	movmi	r3, #43	; 0x2b
 8007e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e38:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3e:	d015      	beq.n	8007e6c <_vfiprintf_r+0x13c>
 8007e40:	9a07      	ldr	r2, [sp, #28]
 8007e42:	4654      	mov	r4, sl
 8007e44:	2000      	movs	r0, #0
 8007e46:	f04f 0c0a 	mov.w	ip, #10
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e50:	3b30      	subs	r3, #48	; 0x30
 8007e52:	2b09      	cmp	r3, #9
 8007e54:	d94e      	bls.n	8007ef4 <_vfiprintf_r+0x1c4>
 8007e56:	b1b0      	cbz	r0, 8007e86 <_vfiprintf_r+0x156>
 8007e58:	9207      	str	r2, [sp, #28]
 8007e5a:	e014      	b.n	8007e86 <_vfiprintf_r+0x156>
 8007e5c:	eba0 0308 	sub.w	r3, r0, r8
 8007e60:	fa09 f303 	lsl.w	r3, r9, r3
 8007e64:	4313      	orrs	r3, r2
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	46a2      	mov	sl, r4
 8007e6a:	e7d2      	b.n	8007e12 <_vfiprintf_r+0xe2>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	1d19      	adds	r1, r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	9103      	str	r1, [sp, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfbb      	ittet	lt
 8007e78:	425b      	neglt	r3, r3
 8007e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e7e:	9307      	strge	r3, [sp, #28]
 8007e80:	9307      	strlt	r3, [sp, #28]
 8007e82:	bfb8      	it	lt
 8007e84:	9204      	strlt	r2, [sp, #16]
 8007e86:	7823      	ldrb	r3, [r4, #0]
 8007e88:	2b2e      	cmp	r3, #46	; 0x2e
 8007e8a:	d10c      	bne.n	8007ea6 <_vfiprintf_r+0x176>
 8007e8c:	7863      	ldrb	r3, [r4, #1]
 8007e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e90:	d135      	bne.n	8007efe <_vfiprintf_r+0x1ce>
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	9203      	str	r2, [sp, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfb8      	it	lt
 8007e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ea2:	3402      	adds	r4, #2
 8007ea4:	9305      	str	r3, [sp, #20]
 8007ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f8c <_vfiprintf_r+0x25c>
 8007eaa:	7821      	ldrb	r1, [r4, #0]
 8007eac:	2203      	movs	r2, #3
 8007eae:	4650      	mov	r0, sl
 8007eb0:	f7f8 fa16 	bl	80002e0 <memchr>
 8007eb4:	b140      	cbz	r0, 8007ec8 <_vfiprintf_r+0x198>
 8007eb6:	2340      	movs	r3, #64	; 0x40
 8007eb8:	eba0 000a 	sub.w	r0, r0, sl
 8007ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8007ec0:	9b04      	ldr	r3, [sp, #16]
 8007ec2:	4303      	orrs	r3, r0
 8007ec4:	3401      	adds	r4, #1
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ecc:	482c      	ldr	r0, [pc, #176]	; (8007f80 <_vfiprintf_r+0x250>)
 8007ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ed2:	2206      	movs	r2, #6
 8007ed4:	f7f8 fa04 	bl	80002e0 <memchr>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d03f      	beq.n	8007f5c <_vfiprintf_r+0x22c>
 8007edc:	4b29      	ldr	r3, [pc, #164]	; (8007f84 <_vfiprintf_r+0x254>)
 8007ede:	bb1b      	cbnz	r3, 8007f28 <_vfiprintf_r+0x1f8>
 8007ee0:	9b03      	ldr	r3, [sp, #12]
 8007ee2:	3307      	adds	r3, #7
 8007ee4:	f023 0307 	bic.w	r3, r3, #7
 8007ee8:	3308      	adds	r3, #8
 8007eea:	9303      	str	r3, [sp, #12]
 8007eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eee:	443b      	add	r3, r7
 8007ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef2:	e767      	b.n	8007dc4 <_vfiprintf_r+0x94>
 8007ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef8:	460c      	mov	r4, r1
 8007efa:	2001      	movs	r0, #1
 8007efc:	e7a5      	b.n	8007e4a <_vfiprintf_r+0x11a>
 8007efe:	2300      	movs	r3, #0
 8007f00:	3401      	adds	r4, #1
 8007f02:	9305      	str	r3, [sp, #20]
 8007f04:	4619      	mov	r1, r3
 8007f06:	f04f 0c0a 	mov.w	ip, #10
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f10:	3a30      	subs	r2, #48	; 0x30
 8007f12:	2a09      	cmp	r2, #9
 8007f14:	d903      	bls.n	8007f1e <_vfiprintf_r+0x1ee>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0c5      	beq.n	8007ea6 <_vfiprintf_r+0x176>
 8007f1a:	9105      	str	r1, [sp, #20]
 8007f1c:	e7c3      	b.n	8007ea6 <_vfiprintf_r+0x176>
 8007f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f22:	4604      	mov	r4, r0
 8007f24:	2301      	movs	r3, #1
 8007f26:	e7f0      	b.n	8007f0a <_vfiprintf_r+0x1da>
 8007f28:	ab03      	add	r3, sp, #12
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <_vfiprintf_r+0x258>)
 8007f30:	a904      	add	r1, sp, #16
 8007f32:	4630      	mov	r0, r6
 8007f34:	f3af 8000 	nop.w
 8007f38:	4607      	mov	r7, r0
 8007f3a:	1c78      	adds	r0, r7, #1
 8007f3c:	d1d6      	bne.n	8007eec <_vfiprintf_r+0x1bc>
 8007f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f40:	07d9      	lsls	r1, r3, #31
 8007f42:	d405      	bmi.n	8007f50 <_vfiprintf_r+0x220>
 8007f44:	89ab      	ldrh	r3, [r5, #12]
 8007f46:	059a      	lsls	r2, r3, #22
 8007f48:	d402      	bmi.n	8007f50 <_vfiprintf_r+0x220>
 8007f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f4c:	f7ff fd7f 	bl	8007a4e <__retarget_lock_release_recursive>
 8007f50:	89ab      	ldrh	r3, [r5, #12]
 8007f52:	065b      	lsls	r3, r3, #25
 8007f54:	f53f af12 	bmi.w	8007d7c <_vfiprintf_r+0x4c>
 8007f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f5a:	e711      	b.n	8007d80 <_vfiprintf_r+0x50>
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <_vfiprintf_r+0x258>)
 8007f64:	a904      	add	r1, sp, #16
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 f880 	bl	800806c <_printf_i>
 8007f6c:	e7e4      	b.n	8007f38 <_vfiprintf_r+0x208>
 8007f6e:	bf00      	nop
 8007f70:	080086cc 	.word	0x080086cc
 8007f74:	080086ec 	.word	0x080086ec
 8007f78:	080086ac 	.word	0x080086ac
 8007f7c:	0800870c 	.word	0x0800870c
 8007f80:	08008716 	.word	0x08008716
 8007f84:	00000000 	.word	0x00000000
 8007f88:	08007d0b 	.word	0x08007d0b
 8007f8c:	08008712 	.word	0x08008712

08007f90 <_printf_common>:
 8007f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	4616      	mov	r6, r2
 8007f96:	4699      	mov	r9, r3
 8007f98:	688a      	ldr	r2, [r1, #8]
 8007f9a:	690b      	ldr	r3, [r1, #16]
 8007f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bfb8      	it	lt
 8007fa4:	4613      	movlt	r3, r2
 8007fa6:	6033      	str	r3, [r6, #0]
 8007fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fac:	4607      	mov	r7, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	b10a      	cbz	r2, 8007fb6 <_printf_common+0x26>
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	6033      	str	r3, [r6, #0]
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	0699      	lsls	r1, r3, #26
 8007fba:	bf42      	ittt	mi
 8007fbc:	6833      	ldrmi	r3, [r6, #0]
 8007fbe:	3302      	addmi	r3, #2
 8007fc0:	6033      	strmi	r3, [r6, #0]
 8007fc2:	6825      	ldr	r5, [r4, #0]
 8007fc4:	f015 0506 	ands.w	r5, r5, #6
 8007fc8:	d106      	bne.n	8007fd8 <_printf_common+0x48>
 8007fca:	f104 0a19 	add.w	sl, r4, #25
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	6832      	ldr	r2, [r6, #0]
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	dc26      	bgt.n	8008026 <_printf_common+0x96>
 8007fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fdc:	1e13      	subs	r3, r2, #0
 8007fde:	6822      	ldr	r2, [r4, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	0692      	lsls	r2, r2, #26
 8007fe6:	d42b      	bmi.n	8008040 <_printf_common+0xb0>
 8007fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fec:	4649      	mov	r1, r9
 8007fee:	4638      	mov	r0, r7
 8007ff0:	47c0      	blx	r8
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d01e      	beq.n	8008034 <_printf_common+0xa4>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	68e5      	ldr	r5, [r4, #12]
 8007ffa:	6832      	ldr	r2, [r6, #0]
 8007ffc:	f003 0306 	and.w	r3, r3, #6
 8008000:	2b04      	cmp	r3, #4
 8008002:	bf08      	it	eq
 8008004:	1aad      	subeq	r5, r5, r2
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	6922      	ldr	r2, [r4, #16]
 800800a:	bf0c      	ite	eq
 800800c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008010:	2500      	movne	r5, #0
 8008012:	4293      	cmp	r3, r2
 8008014:	bfc4      	itt	gt
 8008016:	1a9b      	subgt	r3, r3, r2
 8008018:	18ed      	addgt	r5, r5, r3
 800801a:	2600      	movs	r6, #0
 800801c:	341a      	adds	r4, #26
 800801e:	42b5      	cmp	r5, r6
 8008020:	d11a      	bne.n	8008058 <_printf_common+0xc8>
 8008022:	2000      	movs	r0, #0
 8008024:	e008      	b.n	8008038 <_printf_common+0xa8>
 8008026:	2301      	movs	r3, #1
 8008028:	4652      	mov	r2, sl
 800802a:	4649      	mov	r1, r9
 800802c:	4638      	mov	r0, r7
 800802e:	47c0      	blx	r8
 8008030:	3001      	adds	r0, #1
 8008032:	d103      	bne.n	800803c <_printf_common+0xac>
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803c:	3501      	adds	r5, #1
 800803e:	e7c6      	b.n	8007fce <_printf_common+0x3e>
 8008040:	18e1      	adds	r1, r4, r3
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	2030      	movs	r0, #48	; 0x30
 8008046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800804a:	4422      	add	r2, r4
 800804c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008054:	3302      	adds	r3, #2
 8008056:	e7c7      	b.n	8007fe8 <_printf_common+0x58>
 8008058:	2301      	movs	r3, #1
 800805a:	4622      	mov	r2, r4
 800805c:	4649      	mov	r1, r9
 800805e:	4638      	mov	r0, r7
 8008060:	47c0      	blx	r8
 8008062:	3001      	adds	r0, #1
 8008064:	d0e6      	beq.n	8008034 <_printf_common+0xa4>
 8008066:	3601      	adds	r6, #1
 8008068:	e7d9      	b.n	800801e <_printf_common+0x8e>
	...

0800806c <_printf_i>:
 800806c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	7e0f      	ldrb	r7, [r1, #24]
 8008072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008074:	2f78      	cmp	r7, #120	; 0x78
 8008076:	4691      	mov	r9, r2
 8008078:	4680      	mov	r8, r0
 800807a:	460c      	mov	r4, r1
 800807c:	469a      	mov	sl, r3
 800807e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008082:	d807      	bhi.n	8008094 <_printf_i+0x28>
 8008084:	2f62      	cmp	r7, #98	; 0x62
 8008086:	d80a      	bhi.n	800809e <_printf_i+0x32>
 8008088:	2f00      	cmp	r7, #0
 800808a:	f000 80d8 	beq.w	800823e <_printf_i+0x1d2>
 800808e:	2f58      	cmp	r7, #88	; 0x58
 8008090:	f000 80a3 	beq.w	80081da <_printf_i+0x16e>
 8008094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800809c:	e03a      	b.n	8008114 <_printf_i+0xa8>
 800809e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080a2:	2b15      	cmp	r3, #21
 80080a4:	d8f6      	bhi.n	8008094 <_printf_i+0x28>
 80080a6:	a101      	add	r1, pc, #4	; (adr r1, 80080ac <_printf_i+0x40>)
 80080a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080ac:	08008105 	.word	0x08008105
 80080b0:	08008119 	.word	0x08008119
 80080b4:	08008095 	.word	0x08008095
 80080b8:	08008095 	.word	0x08008095
 80080bc:	08008095 	.word	0x08008095
 80080c0:	08008095 	.word	0x08008095
 80080c4:	08008119 	.word	0x08008119
 80080c8:	08008095 	.word	0x08008095
 80080cc:	08008095 	.word	0x08008095
 80080d0:	08008095 	.word	0x08008095
 80080d4:	08008095 	.word	0x08008095
 80080d8:	08008225 	.word	0x08008225
 80080dc:	08008149 	.word	0x08008149
 80080e0:	08008207 	.word	0x08008207
 80080e4:	08008095 	.word	0x08008095
 80080e8:	08008095 	.word	0x08008095
 80080ec:	08008247 	.word	0x08008247
 80080f0:	08008095 	.word	0x08008095
 80080f4:	08008149 	.word	0x08008149
 80080f8:	08008095 	.word	0x08008095
 80080fc:	08008095 	.word	0x08008095
 8008100:	0800820f 	.word	0x0800820f
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	1d1a      	adds	r2, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	602a      	str	r2, [r5, #0]
 800810c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008114:	2301      	movs	r3, #1
 8008116:	e0a3      	b.n	8008260 <_printf_i+0x1f4>
 8008118:	6820      	ldr	r0, [r4, #0]
 800811a:	6829      	ldr	r1, [r5, #0]
 800811c:	0606      	lsls	r6, r0, #24
 800811e:	f101 0304 	add.w	r3, r1, #4
 8008122:	d50a      	bpl.n	800813a <_printf_i+0xce>
 8008124:	680e      	ldr	r6, [r1, #0]
 8008126:	602b      	str	r3, [r5, #0]
 8008128:	2e00      	cmp	r6, #0
 800812a:	da03      	bge.n	8008134 <_printf_i+0xc8>
 800812c:	232d      	movs	r3, #45	; 0x2d
 800812e:	4276      	negs	r6, r6
 8008130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008134:	485e      	ldr	r0, [pc, #376]	; (80082b0 <_printf_i+0x244>)
 8008136:	230a      	movs	r3, #10
 8008138:	e019      	b.n	800816e <_printf_i+0x102>
 800813a:	680e      	ldr	r6, [r1, #0]
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008142:	bf18      	it	ne
 8008144:	b236      	sxthne	r6, r6
 8008146:	e7ef      	b.n	8008128 <_printf_i+0xbc>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	6820      	ldr	r0, [r4, #0]
 800814c:	1d19      	adds	r1, r3, #4
 800814e:	6029      	str	r1, [r5, #0]
 8008150:	0601      	lsls	r1, r0, #24
 8008152:	d501      	bpl.n	8008158 <_printf_i+0xec>
 8008154:	681e      	ldr	r6, [r3, #0]
 8008156:	e002      	b.n	800815e <_printf_i+0xf2>
 8008158:	0646      	lsls	r6, r0, #25
 800815a:	d5fb      	bpl.n	8008154 <_printf_i+0xe8>
 800815c:	881e      	ldrh	r6, [r3, #0]
 800815e:	4854      	ldr	r0, [pc, #336]	; (80082b0 <_printf_i+0x244>)
 8008160:	2f6f      	cmp	r7, #111	; 0x6f
 8008162:	bf0c      	ite	eq
 8008164:	2308      	moveq	r3, #8
 8008166:	230a      	movne	r3, #10
 8008168:	2100      	movs	r1, #0
 800816a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800816e:	6865      	ldr	r5, [r4, #4]
 8008170:	60a5      	str	r5, [r4, #8]
 8008172:	2d00      	cmp	r5, #0
 8008174:	bfa2      	ittt	ge
 8008176:	6821      	ldrge	r1, [r4, #0]
 8008178:	f021 0104 	bicge.w	r1, r1, #4
 800817c:	6021      	strge	r1, [r4, #0]
 800817e:	b90e      	cbnz	r6, 8008184 <_printf_i+0x118>
 8008180:	2d00      	cmp	r5, #0
 8008182:	d04d      	beq.n	8008220 <_printf_i+0x1b4>
 8008184:	4615      	mov	r5, r2
 8008186:	fbb6 f1f3 	udiv	r1, r6, r3
 800818a:	fb03 6711 	mls	r7, r3, r1, r6
 800818e:	5dc7      	ldrb	r7, [r0, r7]
 8008190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008194:	4637      	mov	r7, r6
 8008196:	42bb      	cmp	r3, r7
 8008198:	460e      	mov	r6, r1
 800819a:	d9f4      	bls.n	8008186 <_printf_i+0x11a>
 800819c:	2b08      	cmp	r3, #8
 800819e:	d10b      	bne.n	80081b8 <_printf_i+0x14c>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	07de      	lsls	r6, r3, #31
 80081a4:	d508      	bpl.n	80081b8 <_printf_i+0x14c>
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	6861      	ldr	r1, [r4, #4]
 80081aa:	4299      	cmp	r1, r3
 80081ac:	bfde      	ittt	le
 80081ae:	2330      	movle	r3, #48	; 0x30
 80081b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081b8:	1b52      	subs	r2, r2, r5
 80081ba:	6122      	str	r2, [r4, #16]
 80081bc:	f8cd a000 	str.w	sl, [sp]
 80081c0:	464b      	mov	r3, r9
 80081c2:	aa03      	add	r2, sp, #12
 80081c4:	4621      	mov	r1, r4
 80081c6:	4640      	mov	r0, r8
 80081c8:	f7ff fee2 	bl	8007f90 <_printf_common>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d14c      	bne.n	800826a <_printf_i+0x1fe>
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	b004      	add	sp, #16
 80081d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081da:	4835      	ldr	r0, [pc, #212]	; (80082b0 <_printf_i+0x244>)
 80081dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081e0:	6829      	ldr	r1, [r5, #0]
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80081e8:	6029      	str	r1, [r5, #0]
 80081ea:	061d      	lsls	r5, r3, #24
 80081ec:	d514      	bpl.n	8008218 <_printf_i+0x1ac>
 80081ee:	07df      	lsls	r7, r3, #31
 80081f0:	bf44      	itt	mi
 80081f2:	f043 0320 	orrmi.w	r3, r3, #32
 80081f6:	6023      	strmi	r3, [r4, #0]
 80081f8:	b91e      	cbnz	r6, 8008202 <_printf_i+0x196>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	f023 0320 	bic.w	r3, r3, #32
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	2310      	movs	r3, #16
 8008204:	e7b0      	b.n	8008168 <_printf_i+0xfc>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	f043 0320 	orr.w	r3, r3, #32
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	2378      	movs	r3, #120	; 0x78
 8008210:	4828      	ldr	r0, [pc, #160]	; (80082b4 <_printf_i+0x248>)
 8008212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008216:	e7e3      	b.n	80081e0 <_printf_i+0x174>
 8008218:	0659      	lsls	r1, r3, #25
 800821a:	bf48      	it	mi
 800821c:	b2b6      	uxthmi	r6, r6
 800821e:	e7e6      	b.n	80081ee <_printf_i+0x182>
 8008220:	4615      	mov	r5, r2
 8008222:	e7bb      	b.n	800819c <_printf_i+0x130>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	6826      	ldr	r6, [r4, #0]
 8008228:	6961      	ldr	r1, [r4, #20]
 800822a:	1d18      	adds	r0, r3, #4
 800822c:	6028      	str	r0, [r5, #0]
 800822e:	0635      	lsls	r5, r6, #24
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	d501      	bpl.n	8008238 <_printf_i+0x1cc>
 8008234:	6019      	str	r1, [r3, #0]
 8008236:	e002      	b.n	800823e <_printf_i+0x1d2>
 8008238:	0670      	lsls	r0, r6, #25
 800823a:	d5fb      	bpl.n	8008234 <_printf_i+0x1c8>
 800823c:	8019      	strh	r1, [r3, #0]
 800823e:	2300      	movs	r3, #0
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	4615      	mov	r5, r2
 8008244:	e7ba      	b.n	80081bc <_printf_i+0x150>
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	602a      	str	r2, [r5, #0]
 800824c:	681d      	ldr	r5, [r3, #0]
 800824e:	6862      	ldr	r2, [r4, #4]
 8008250:	2100      	movs	r1, #0
 8008252:	4628      	mov	r0, r5
 8008254:	f7f8 f844 	bl	80002e0 <memchr>
 8008258:	b108      	cbz	r0, 800825e <_printf_i+0x1f2>
 800825a:	1b40      	subs	r0, r0, r5
 800825c:	6060      	str	r0, [r4, #4]
 800825e:	6863      	ldr	r3, [r4, #4]
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	2300      	movs	r3, #0
 8008264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008268:	e7a8      	b.n	80081bc <_printf_i+0x150>
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	462a      	mov	r2, r5
 800826e:	4649      	mov	r1, r9
 8008270:	4640      	mov	r0, r8
 8008272:	47d0      	blx	sl
 8008274:	3001      	adds	r0, #1
 8008276:	d0ab      	beq.n	80081d0 <_printf_i+0x164>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	079b      	lsls	r3, r3, #30
 800827c:	d413      	bmi.n	80082a6 <_printf_i+0x23a>
 800827e:	68e0      	ldr	r0, [r4, #12]
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	4298      	cmp	r0, r3
 8008284:	bfb8      	it	lt
 8008286:	4618      	movlt	r0, r3
 8008288:	e7a4      	b.n	80081d4 <_printf_i+0x168>
 800828a:	2301      	movs	r3, #1
 800828c:	4632      	mov	r2, r6
 800828e:	4649      	mov	r1, r9
 8008290:	4640      	mov	r0, r8
 8008292:	47d0      	blx	sl
 8008294:	3001      	adds	r0, #1
 8008296:	d09b      	beq.n	80081d0 <_printf_i+0x164>
 8008298:	3501      	adds	r5, #1
 800829a:	68e3      	ldr	r3, [r4, #12]
 800829c:	9903      	ldr	r1, [sp, #12]
 800829e:	1a5b      	subs	r3, r3, r1
 80082a0:	42ab      	cmp	r3, r5
 80082a2:	dcf2      	bgt.n	800828a <_printf_i+0x21e>
 80082a4:	e7eb      	b.n	800827e <_printf_i+0x212>
 80082a6:	2500      	movs	r5, #0
 80082a8:	f104 0619 	add.w	r6, r4, #25
 80082ac:	e7f5      	b.n	800829a <_printf_i+0x22e>
 80082ae:	bf00      	nop
 80082b0:	0800871d 	.word	0x0800871d
 80082b4:	0800872e 	.word	0x0800872e

080082b8 <_sbrk_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4d06      	ldr	r5, [pc, #24]	; (80082d4 <_sbrk_r+0x1c>)
 80082bc:	2300      	movs	r3, #0
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	602b      	str	r3, [r5, #0]
 80082c4:	f7fa fe68 	bl	8002f98 <_sbrk>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_sbrk_r+0x1a>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_sbrk_r+0x1a>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	24000a08 	.word	0x24000a08

080082d8 <__sread>:
 80082d8:	b510      	push	{r4, lr}
 80082da:	460c      	mov	r4, r1
 80082dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e0:	f000 f8a0 	bl	8008424 <_read_r>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	bfab      	itete	ge
 80082e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ea:	89a3      	ldrhlt	r3, [r4, #12]
 80082ec:	181b      	addge	r3, r3, r0
 80082ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082f2:	bfac      	ite	ge
 80082f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082f6:	81a3      	strhlt	r3, [r4, #12]
 80082f8:	bd10      	pop	{r4, pc}

080082fa <__swrite>:
 80082fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fe:	461f      	mov	r7, r3
 8008300:	898b      	ldrh	r3, [r1, #12]
 8008302:	05db      	lsls	r3, r3, #23
 8008304:	4605      	mov	r5, r0
 8008306:	460c      	mov	r4, r1
 8008308:	4616      	mov	r6, r2
 800830a:	d505      	bpl.n	8008318 <__swrite+0x1e>
 800830c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008310:	2302      	movs	r3, #2
 8008312:	2200      	movs	r2, #0
 8008314:	f000 f868 	bl	80083e8 <_lseek_r>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800831e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008322:	81a3      	strh	r3, [r4, #12]
 8008324:	4632      	mov	r2, r6
 8008326:	463b      	mov	r3, r7
 8008328:	4628      	mov	r0, r5
 800832a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800832e:	f000 b817 	b.w	8008360 <_write_r>

08008332 <__sseek>:
 8008332:	b510      	push	{r4, lr}
 8008334:	460c      	mov	r4, r1
 8008336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833a:	f000 f855 	bl	80083e8 <_lseek_r>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	bf15      	itete	ne
 8008344:	6560      	strne	r0, [r4, #84]	; 0x54
 8008346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800834a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800834e:	81a3      	strheq	r3, [r4, #12]
 8008350:	bf18      	it	ne
 8008352:	81a3      	strhne	r3, [r4, #12]
 8008354:	bd10      	pop	{r4, pc}

08008356 <__sclose>:
 8008356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835a:	f000 b813 	b.w	8008384 <_close_r>
	...

08008360 <_write_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	; (8008380 <_write_r+0x20>)
 8008364:	4604      	mov	r4, r0
 8008366:	4608      	mov	r0, r1
 8008368:	4611      	mov	r1, r2
 800836a:	2200      	movs	r2, #0
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7fa f93a 	bl	80025e8 <_write>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_write_r+0x1e>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_write_r+0x1e>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	24000a08 	.word	0x24000a08

08008384 <_close_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d06      	ldr	r5, [pc, #24]	; (80083a0 <_close_r+0x1c>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	f7fa fdcd 	bl	8002f2e <_close>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_close_r+0x1a>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_close_r+0x1a>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	24000a08 	.word	0x24000a08

080083a4 <_fstat_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d07      	ldr	r5, [pc, #28]	; (80083c4 <_fstat_r+0x20>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	4611      	mov	r1, r2
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	f7fa fdc8 	bl	8002f46 <_fstat>
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	d102      	bne.n	80083c0 <_fstat_r+0x1c>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	b103      	cbz	r3, 80083c0 <_fstat_r+0x1c>
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	bd38      	pop	{r3, r4, r5, pc}
 80083c2:	bf00      	nop
 80083c4:	24000a08 	.word	0x24000a08

080083c8 <_isatty_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d06      	ldr	r5, [pc, #24]	; (80083e4 <_isatty_r+0x1c>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7fa fdc7 	bl	8002f66 <_isatty>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_isatty_r+0x1a>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_isatty_r+0x1a>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	24000a08 	.word	0x24000a08

080083e8 <_lseek_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d07      	ldr	r5, [pc, #28]	; (8008408 <_lseek_r+0x20>)
 80083ec:	4604      	mov	r4, r0
 80083ee:	4608      	mov	r0, r1
 80083f0:	4611      	mov	r1, r2
 80083f2:	2200      	movs	r2, #0
 80083f4:	602a      	str	r2, [r5, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f7fa fdc0 	bl	8002f7c <_lseek>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_lseek_r+0x1e>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_lseek_r+0x1e>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	24000a08 	.word	0x24000a08

0800840c <__malloc_lock>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__malloc_lock+0x8>)
 800840e:	f7ff bb1d 	b.w	8007a4c <__retarget_lock_acquire_recursive>
 8008412:	bf00      	nop
 8008414:	240009fc 	.word	0x240009fc

08008418 <__malloc_unlock>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__malloc_unlock+0x8>)
 800841a:	f7ff bb18 	b.w	8007a4e <__retarget_lock_release_recursive>
 800841e:	bf00      	nop
 8008420:	240009fc 	.word	0x240009fc

08008424 <_read_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d07      	ldr	r5, [pc, #28]	; (8008444 <_read_r+0x20>)
 8008428:	4604      	mov	r4, r0
 800842a:	4608      	mov	r0, r1
 800842c:	4611      	mov	r1, r2
 800842e:	2200      	movs	r2, #0
 8008430:	602a      	str	r2, [r5, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	f7fa fd5e 	bl	8002ef4 <_read>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d102      	bne.n	8008442 <_read_r+0x1e>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b103      	cbz	r3, 8008442 <_read_r+0x1e>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	24000a08 	.word	0x24000a08

08008448 <_init>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	bf00      	nop
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr

08008454 <_fini>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	bf00      	nop
 8008458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845a:	bc08      	pop	{r3}
 800845c:	469e      	mov	lr, r3
 800845e:	4770      	bx	lr
