
ex11_w5300_tcp_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800920c  0800920c  0001920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  24000000  0800921c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f68  240000d8  080092f0  000200d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001040  080092f0  00021040  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028b56  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004838  00000000  00000000  00048c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001c802  00000000  00000000  0004d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001170  00000000  00000000  00069c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00003440  00000000  00000000  0006ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003946d  00000000  00000000  0006e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000274a9  00000000  00000000  000a76b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001644ef  00000000  00000000  000ceb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0023304d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004068  00000000  00000000  002330a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d8 	.word	0x240000d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800885c 	.word	0x0800885c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000dc 	.word	0x240000dc
 80002dc:	0800885c 	.word	0x0800885c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
#if 1
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8000684:	b510      	push	{r4, lr}
   WIZCHIP_CRITICAL_ENTER();
 8000686:	4c09      	ldr	r4, [pc, #36]	; (80006ac <WIZCHIP_WRITE+0x28>)
{
 8000688:	b082      	sub	sp, #8
   WIZCHIP_CRITICAL_ENTER();
 800068a:	68e3      	ldr	r3, [r4, #12]
{
 800068c:	9001      	str	r0, [sp, #4]
 800068e:	9100      	str	r1, [sp, #0]
   WIZCHIP_CRITICAL_ENTER();
 8000690:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000692:	6963      	ldr	r3, [r4, #20]
 8000694:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8000696:	6a23      	ldr	r3, [r4, #32]
 8000698:	e9dd 1000 	ldrd	r1, r0, [sp]
 800069c:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 800069e:	69a3      	ldr	r3, [r4, #24]
 80006a0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006a2:	6923      	ldr	r3, [r4, #16]
}
 80006a4:	b002      	add	sp, #8
 80006a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   WIZCHIP_CRITICAL_EXIT();
 80006aa:	4718      	bx	r3
 80006ac:	24000004 	.word	0x24000004

080006b0 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 80006b0:	b510      	push	{r4, lr}
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80006b2:	4c09      	ldr	r4, [pc, #36]	; (80006d8 <WIZCHIP_READ+0x28>)
{
 80006b4:	b082      	sub	sp, #8
   WIZCHIP_CRITICAL_ENTER();
 80006b6:	68e3      	ldr	r3, [r4, #12]
{
 80006b8:	9001      	str	r0, [sp, #4]
   WIZCHIP_CRITICAL_ENTER();
 80006ba:	4798      	blx	r3
   WIZCHIP.CS._select();
 80006bc:	6963      	ldr	r3, [r4, #20]
 80006be:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80006c0:	69e3      	ldr	r3, [r4, #28]
 80006c2:	9801      	ldr	r0, [sp, #4]
 80006c4:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80006c6:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80006c8:	9001      	str	r0, [sp, #4]
   WIZCHIP.CS._deselect();
 80006ca:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006cc:	6923      	ldr	r3, [r4, #16]
 80006ce:	4798      	blx	r3
   return ret;
}
 80006d0:	9801      	ldr	r0, [sp, #4]
 80006d2:	b002      	add	sp, #8
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	bf00      	nop
 80006d8:	24000004 	.word	0x24000004

080006dc <getTMSR>:
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
}
   
uint8_t getTMSR(uint8_t sn)
{
 80006dc:	b538      	push	{r3, r4, r5, lr}
   if(sn & 0x01)
 80006de:	07c2      	lsls	r2, r0, #31
   WIZCHIP_CRITICAL_ENTER();
 80006e0:	4d11      	ldr	r5, [pc, #68]	; (8000728 <getTMSR+0x4c>)
{
 80006e2:	4604      	mov	r4, r0
   WIZCHIP_CRITICAL_ENTER();
 80006e4:	68eb      	ldr	r3, [r5, #12]
   if(sn & 0x01)
 80006e6:	d40f      	bmi.n	8000708 <getTMSR+0x2c>
   WIZCHIP_CRITICAL_ENTER();
 80006e8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80006ea:	696b      	ldr	r3, [r5, #20]
 80006ec:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 80006ee:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80006f2:	69eb      	ldr	r3, [r5, #28]
 80006f4:	3020      	adds	r0, #32
 80006f6:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 80006f8:	69ab      	ldr	r3, [r5, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80006fa:	4604      	mov	r4, r0
   WIZCHIP.CS._deselect();
 80006fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006fe:	692b      	ldr	r3, [r5, #16]
 8000700:	4798      	blx	r3
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8000702:	f3c4 2007 	ubfx	r0, r4, #8, #8
}
 8000706:	bd38      	pop	{r3, r4, r5, pc}
   WIZCHIP_CRITICAL_ENTER();
 8000708:	4798      	blx	r3
   WIZCHIP.CS._select();
 800070a:	696b      	ldr	r3, [r5, #20]
 800070c:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 800070e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8000712:	69eb      	ldr	r3, [r5, #28]
 8000714:	3020      	adds	r0, #32
 8000716:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8000718:	69ab      	ldr	r3, [r5, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 800071a:	4604      	mov	r4, r0
   WIZCHIP.CS._deselect();
 800071c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800071e:	692b      	ldr	r3, [r5, #16]
 8000720:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8000722:	b2e0      	uxtb	r0, r4
}
 8000724:	bd38      	pop	{r3, r4, r5, pc}
 8000726:	bf00      	nop
 8000728:	24000004 	.word	0x24000004

0800072c <getRMSR>:
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
}
   
uint8_t getRMSR(uint8_t sn)
{
 800072c:	b538      	push	{r3, r4, r5, lr}
   if(sn & 0x01)
 800072e:	07c2      	lsls	r2, r0, #31
   WIZCHIP_CRITICAL_ENTER();
 8000730:	4d11      	ldr	r5, [pc, #68]	; (8000778 <getRMSR+0x4c>)
{
 8000732:	4604      	mov	r4, r0
   WIZCHIP_CRITICAL_ENTER();
 8000734:	68eb      	ldr	r3, [r5, #12]
   if(sn & 0x01)
 8000736:	d40f      	bmi.n	8000758 <getRMSR+0x2c>
   WIZCHIP_CRITICAL_ENTER();
 8000738:	4798      	blx	r3
   WIZCHIP.CS._select();
 800073a:	696b      	ldr	r3, [r5, #20]
 800073c:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 800073e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8000742:	69eb      	ldr	r3, [r5, #28]
 8000744:	3028      	adds	r0, #40	; 0x28
 8000746:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8000748:	69ab      	ldr	r3, [r5, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 800074a:	4604      	mov	r4, r0
   WIZCHIP.CS._deselect();
 800074c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800074e:	692b      	ldr	r3, [r5, #16]
 8000750:	4798      	blx	r3
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8000752:	f3c4 2007 	ubfx	r0, r4, #8, #8
}
 8000756:	bd38      	pop	{r3, r4, r5, pc}
   WIZCHIP_CRITICAL_ENTER();
 8000758:	4798      	blx	r3
   WIZCHIP.CS._select();
 800075a:	696b      	ldr	r3, [r5, #20]
 800075c:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 800075e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8000762:	69eb      	ldr	r3, [r5, #28]
 8000764:	3028      	adds	r0, #40	; 0x28
 8000766:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8000768:	69ab      	ldr	r3, [r5, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 800076a:	4604      	mov	r4, r0
   WIZCHIP.CS._deselect();
 800076c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800076e:	692b      	ldr	r3, [r5, #16]
 8000770:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8000772:	b2e0      	uxtb	r0, r4
}
 8000774:	bd38      	pop	{r3, r4, r5, pc}
 8000776:	bf00      	nop
 8000778:	24000004 	.word	0x24000004

0800077c <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 800077c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8000780:	f100 0808 	add.w	r8, r0, #8
   uint32_t free_tx_size1=1;
 8000784:	2701      	movs	r7, #1
 8000786:	4c13      	ldr	r4, [pc, #76]	; (80007d4 <getSn_TX_FSR+0x58>)
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8000788:	ea4f 1888 	mov.w	r8, r8, lsl #6
 800078c:	f108 0924 	add.w	r9, r8, #36	; 0x24
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8000790:	f108 0826 	add.w	r8, r8, #38	; 0x26
   WIZCHIP_CRITICAL_ENTER();
 8000794:	68e3      	ldr	r3, [r4, #12]
 8000796:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000798:	6963      	ldr	r3, [r4, #20]
 800079a:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 800079c:	69e3      	ldr	r3, [r4, #28]
 800079e:	4648      	mov	r0, r9
 80007a0:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 80007a2:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80007a4:	4606      	mov	r6, r0
   WIZCHIP.CS._deselect();
 80007a6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80007a8:	6923      	ldr	r3, [r4, #16]
 80007aa:	4798      	blx	r3
   WIZCHIP_CRITICAL_ENTER();
 80007ac:	68e3      	ldr	r3, [r4, #12]
 80007ae:	4798      	blx	r3
   WIZCHIP.CS._select();
 80007b0:	6963      	ldr	r3, [r4, #20]
 80007b2:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80007b4:	69e3      	ldr	r3, [r4, #28]
 80007b6:	4640      	mov	r0, r8
 80007b8:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 80007ba:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80007bc:	4605      	mov	r5, r0
   WIZCHIP.CS._deselect();
 80007be:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80007c0:	6923      	ldr	r3, [r4, #16]
 80007c2:	4798      	blx	r3
   return ret;
 80007c4:	463b      	mov	r3, r7
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80007c6:	ea45 4706 	orr.w	r7, r5, r6, lsl #16
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80007ca:	42bb      	cmp	r3, r7
 80007cc:	d1e2      	bne.n	8000794 <getSn_TX_FSR+0x18>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
   }                                                                       
   return free_tx_size;                                                    
}                                                                          
 80007ce:	4638      	mov	r0, r7
 80007d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007d4:	24000004 	.word	0x24000004

080007d8 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80007dc:	f100 0708 	add.w	r7, r0, #8
   uint32_t received_rx_size1=1;
 80007e0:	f04f 0a01 	mov.w	sl, #1
 80007e4:	4c15      	ldr	r4, [pc, #84]	; (800083c <getSn_RX_RSR+0x64>)
{
 80007e6:	4681      	mov	r9, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80007e8:	01bf      	lsls	r7, r7, #6
 80007ea:	f107 0828 	add.w	r8, r7, #40	; 0x28
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 80007ee:	372a      	adds	r7, #42	; 0x2a
   WIZCHIP_CRITICAL_ENTER();
 80007f0:	68e3      	ldr	r3, [r4, #12]
 80007f2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80007f4:	6963      	ldr	r3, [r4, #20]
 80007f6:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80007f8:	69e3      	ldr	r3, [r4, #28]
 80007fa:	4640      	mov	r0, r8
 80007fc:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 80007fe:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8000800:	4606      	mov	r6, r0
   WIZCHIP.CS._deselect();
 8000802:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000804:	6923      	ldr	r3, [r4, #16]
 8000806:	4798      	blx	r3
   WIZCHIP_CRITICAL_ENTER();
 8000808:	68e3      	ldr	r3, [r4, #12]
 800080a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800080c:	6963      	ldr	r3, [r4, #20]
 800080e:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8000810:	69e3      	ldr	r3, [r4, #28]
 8000812:	4638      	mov	r0, r7
 8000814:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8000816:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8000818:	4605      	mov	r5, r0
   WIZCHIP.CS._deselect();
 800081a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800081c:	6923      	ldr	r3, [r4, #16]
 800081e:	4798      	blx	r3
   return ret;
 8000820:	4653      	mov	r3, sl
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8000822:	ea45 4a06 	orr.w	sl, r5, r6, lsl #16
      if(received_rx_size == received_rx_size1) break;                                                                         
 8000826:	4553      	cmp	r3, sl
 8000828:	d1e2      	bne.n	80007f0 <getSn_RX_RSR+0x18>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <getSn_RX_RSR+0x68>)
 800082c:	f813 0009 	ldrb.w	r0, [r3, r9]
 8000830:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8000834:	4450      	add	r0, sl
 8000836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083a:	bf00      	nop
 800083c:	24000004 	.word	0x24000004
 8000840:	240000f8 	.word	0x240000f8

08000844 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint32_t i = 0;
   if(len == 0)  return;
 8000844:	b312      	cbz	r2, 800088c <wiz_send_data+0x48>
   
   for(i = 0; i < len ; i += 2)
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8000846:	0180      	lsls	r0, r0, #6
{
 8000848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800084c:	4690      	mov	r8, r2
 800084e:	b082      	sub	sp, #8
 8000850:	1c4d      	adds	r5, r1, #1
 8000852:	4c0f      	ldr	r4, [pc, #60]	; (8000890 <wiz_send_data+0x4c>)
 8000854:	43cf      	mvns	r7, r1
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8000856:	f200 262e 	addw	r6, r0, #558	; 0x22e
 800085a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800085e:	f815 1b02 	ldrb.w	r1, [r5], #2
   WIZCHIP_CRITICAL_ENTER();
 8000862:	68e3      	ldr	r3, [r4, #12]
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8000864:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000868:	9101      	str	r1, [sp, #4]
   WIZCHIP_CRITICAL_ENTER();
 800086a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800086c:	6963      	ldr	r3, [r4, #20]
 800086e:	4798      	blx	r3
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8000870:	9901      	ldr	r1, [sp, #4]
 8000872:	4630      	mov	r0, r6
 8000874:	6a23      	ldr	r3, [r4, #32]
 8000876:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8000878:	69a3      	ldr	r3, [r4, #24]
 800087a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800087c:	6923      	ldr	r3, [r4, #16]
 800087e:	4798      	blx	r3
   for(i = 0; i < len ; i += 2)
 8000880:	197b      	adds	r3, r7, r5
 8000882:	4598      	cmp	r8, r3
 8000884:	d8e9      	bhi.n	800085a <wiz_send_data+0x16>
}
 8000886:	b002      	add	sp, #8
 8000888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	24000004 	.word	0x24000004

08000894 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
 8000894:	b362      	cbz	r2, 80008f0 <wiz_recv_data+0x5c>
{
 8000896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      
   for(i = 0; i < len; i++)
   {
      if((i & 0x01)==0)
      {
         rd = getSn_RX_FIFOR(sn);
 800089a:	ea4f 1980 	mov.w	r9, r0, lsl #6
   for(i = 0; i < len; i++)
 800089e:	2400      	movs	r4, #0
 80008a0:	4680      	mov	r8, r0
 80008a2:	4692      	mov	sl, r2
 80008a4:	460d      	mov	r5, r1
         rd = getSn_RX_FIFOR(sn);
 80008a6:	f509 790c 	add.w	r9, r9, #560	; 0x230
   uint16_t rd = 0;
 80008aa:	4626      	mov	r6, r4
   WIZCHIP_CRITICAL_ENTER();
 80008ac:	4f11      	ldr	r7, [pc, #68]	; (80008f4 <wiz_recv_data+0x60>)
 80008ae:	e004      	b.n	80008ba <wiz_recv_data+0x26>
   for(i = 0; i < len; i++)
 80008b0:	3401      	adds	r4, #1
         wizdata[i]   = (uint8_t)(rd >> 8);
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 80008b2:	702e      	strb	r6, [r5, #0]
   for(i = 0; i < len; i++)
 80008b4:	3501      	adds	r5, #1
 80008b6:	45a2      	cmp	sl, r4
 80008b8:	d015      	beq.n	80008e6 <wiz_recv_data+0x52>
      if((i & 0x01)==0)
 80008ba:	07e3      	lsls	r3, r4, #31
 80008bc:	d4f8      	bmi.n	80008b0 <wiz_recv_data+0x1c>
   WIZCHIP_CRITICAL_ENTER();
 80008be:	68fb      	ldr	r3, [r7, #12]
   for(i = 0; i < len; i++)
 80008c0:	3401      	adds	r4, #1
   WIZCHIP_CRITICAL_ENTER();
 80008c2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	4648      	mov	r0, r9
   for(i = 0; i < len; i++)
 80008cc:	3501      	adds	r5, #1
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80008ce:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 80008d0:	69bb      	ldr	r3, [r7, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80008d2:	4606      	mov	r6, r0
   WIZCHIP.CS._deselect();
 80008d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	4798      	blx	r3
   for(i = 0; i < len; i++)
 80008da:	45a2      	cmp	sl, r4
         wizdata[i]   = (uint8_t)(rd >> 8);
 80008dc:	ea4f 2316 	mov.w	r3, r6, lsr #8
 80008e0:	f805 3c01 	strb.w	r3, [r5, #-1]
   for(i = 0; i < len; i++)
 80008e4:	d1e9      	bne.n	80008ba <wiz_recv_data+0x26>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <wiz_recv_data+0x64>)
 80008e8:	f803 6008 	strb.w	r6, [r3, r8]
}
 80008ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	24000004 	.word	0x24000004
 80008f8:	24000100 	.word	0x24000100

080008fc <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80008fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 8000900:	2808      	cmp	r0, #8
{
 8000902:	b083      	sub	sp, #12
 8000904:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   CHECK_SOCKNUM();
 8000908:	f200 812c 	bhi.w	8000b64 <sendto+0x268>
   switch(getSn_MR(sn) & 0x0F)
 800090c:	f100 0708 	add.w	r7, r0, #8
 8000910:	4606      	mov	r6, r0
 8000912:	468b      	mov	fp, r1
 8000914:	4615      	mov	r5, r2
 8000916:	01bf      	lsls	r7, r7, #6
 8000918:	461c      	mov	r4, r3
 800091a:	4638      	mov	r0, r7
 800091c:	f7ff fec8 	bl	80006b0 <WIZCHIP_READ>
 8000920:	f000 000f 	and.w	r0, r0, #15
 8000924:	3802      	subs	r0, #2
 8000926:	2802      	cmp	r0, #2
 8000928:	f200 811f 	bhi.w	8000b6a <sendto+0x26e>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 800092c:	2d00      	cmp	r5, #0
 800092e:	f000 811f 	beq.w	8000b70 <sendto+0x274>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8000932:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000934:	7862      	ldrb	r2, [r4, #1]
 8000936:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800093a:	78a3      	ldrb	r3, [r4, #2]
 800093c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000940:	78e3      	ldrb	r3, [r4, #3]
 8000942:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000946:	9301      	str	r3, [sp, #4]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 80a3 	beq.w	8000a94 <sendto+0x198>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800094e:	f1b8 0f00 	cmp.w	r8, #0
 8000952:	d105      	bne.n	8000960 <sendto+0x64>
 8000954:	4638      	mov	r0, r7
 8000956:	f7ff feab 	bl	80006b0 <WIZCHIP_READ>
 800095a:	0741      	lsls	r1, r0, #29
 800095c:	f140 80ff 	bpl.w	8000b5e <sendto+0x262>
   tmp = getSn_SR(sn);
 8000960:	f107 0908 	add.w	r9, r7, #8
 8000964:	4648      	mov	r0, r9
 8000966:	f7ff fea3 	bl	80006b0 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800096a:	f000 03ef 	and.w	r3, r0, #239	; 0xef
   tmp = getSn_SR(sn);
 800096e:	b2c0      	uxtb	r0, r0
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8000970:	2b22      	cmp	r3, #34	; 0x22
 8000972:	d002      	beq.n	800097a <sendto+0x7e>
 8000974:	2842      	cmp	r0, #66	; 0x42
 8000976:	f040 80ef 	bne.w	8000b58 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800097a:	7823      	ldrb	r3, [r4, #0]
 800097c:	f107 0014 	add.w	r0, r7, #20
 8000980:	7861      	ldrb	r1, [r4, #1]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000982:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8000b78 <sendto+0x27c>
   setSn_DIPR(sn,addr);
 8000986:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800098a:	b289      	uxth	r1, r1
 800098c:	f7ff fe7a 	bl	8000684 <WIZCHIP_WRITE>
 8000990:	78a3      	ldrb	r3, [r4, #2]
 8000992:	78e1      	ldrb	r1, [r4, #3]
 8000994:	f107 0016 	add.w	r0, r7, #22
 8000998:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800099c:	b289      	uxth	r1, r1
 800099e:	f7ff fe71 	bl	8000684 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 80009a2:	4641      	mov	r1, r8
 80009a4:	f107 0012 	add.w	r0, r7, #18
 80009a8:	f04f 0801 	mov.w	r8, #1
 80009ac:	f7ff fe6a 	bl	8000684 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80009b0:	4630      	mov	r0, r6
 80009b2:	f7ff fe93 	bl	80006dc <getTMSR>
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80009b6:	fa08 f806 	lsl.w	r8, r8, r6
   freesize = getSn_TxMAX(sn);
 80009ba:	0280      	lsls	r0, r0, #10
 80009bc:	b280      	uxth	r0, r0
 80009be:	4285      	cmp	r5, r0
 80009c0:	bf28      	it	cs
 80009c2:	4605      	movcs	r5, r0
      freesize = getSn_TX_FSR(sn);
 80009c4:	4630      	mov	r0, r6
 80009c6:	f7ff fed9 	bl	800077c <getSn_TX_FSR>
 80009ca:	4604      	mov	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80009cc:	4648      	mov	r0, r9
 80009ce:	f7ff fe6f 	bl	80006b0 <WIZCHIP_READ>
 80009d2:	b2c0      	uxtb	r0, r0
      freesize = getSn_TX_FSR(sn);
 80009d4:	b2a4      	uxth	r4, r4
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80009d6:	2800      	cmp	r0, #0
 80009d8:	d065      	beq.n	8000aa6 <sendto+0x1aa>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80009da:	f8ba 3000 	ldrh.w	r3, [sl]
 80009de:	ea13 0f08 	tst.w	r3, r8
 80009e2:	d054      	beq.n	8000a8e <sendto+0x192>
 80009e4:	42a5      	cmp	r5, r4
 80009e6:	f200 8098 	bhi.w	8000b1a <sendto+0x21e>
      if(len <= freesize) break;
   };
	wiz_send_data(sn, buf, len);
 80009ea:	462a      	mov	r2, r5
 80009ec:	4659      	mov	r1, fp
 80009ee:	4630      	mov	r0, r6
 80009f0:	f7ff ff28 	bl	8000844 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 80009f4:	2018      	movs	r0, #24
 80009f6:	f7ff fe5b 	bl	80006b0 <WIZCHIP_READ>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2018      	movs	r0, #24
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a04:	f7ff fe54 	bl	80006b0 <WIZCHIP_READ>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	201a      	movs	r0, #26
 8000a0c:	f88d 3005 	strb.w	r3, [sp, #5]
 8000a10:	f7ff fe4e 	bl	80006b0 <WIZCHIP_READ>
 8000a14:	4603      	mov	r3, r0
 8000a16:	201a      	movs	r0, #26
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f88d 3006 	strb.w	r3, [sp, #6]
 8000a1e:	f7ff fe47 	bl	80006b0 <WIZCHIP_READ>
 8000a22:	f88d 0007 	strb.w	r0, [sp, #7]
      if(taddr == 0)
 8000a26:	9c01      	ldr	r4, [sp, #4]
 8000a28:	2c00      	cmp	r4, #0
 8000a2a:	d041      	beq.n	8000ab0 <sendto+0x1b4>
      {
         getSUBR((uint8_t*)&taddr);
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
      }
      else taddr = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	461e      	mov	r6, r3
 8000a30:	4699      	mov	r9, r3
 8000a32:	4698      	mov	r8, r3
 8000a34:	469a      	mov	sl, r3
 8000a36:	469b      	mov	fp, r3
 8000a38:	9301      	str	r3, [sp, #4]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 8000a3a:	f107 0020 	add.w	r0, r7, #32
 8000a3e:	2100      	movs	r1, #0
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8000a40:	1cbc      	adds	r4, r7, #2
   setSn_TX_WRSR(sn, len);
 8000a42:	f7ff fe1f 	bl	8000684 <WIZCHIP_WRITE>
 8000a46:	4629      	mov	r1, r5
 8000a48:	f107 0022 	add.w	r0, r7, #34	; 0x22
 8000a4c:	f7ff fe1a 	bl	8000684 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_SEND);
 8000a50:	2120      	movs	r1, #32
 8000a52:	4620      	mov	r0, r4
 8000a54:	f7ff fe16 	bl	8000684 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000a58:	4620      	mov	r0, r4
 8000a5a:	f7ff fe29 	bl	80006b0 <WIZCHIP_READ>
 8000a5e:	b2c0      	uxtb	r0, r0
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d1f9      	bne.n	8000a58 <sendto+0x15c>
   while(1)
   {
      tmp = getSn_IR(sn);
 8000a64:	3706      	adds	r7, #6
 8000a66:	e001      	b.n	8000a6c <sendto+0x170>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
 8000a68:	071b      	lsls	r3, r3, #28
 8000a6a:	d45a      	bmi.n	8000b22 <sendto+0x226>
      tmp = getSn_IR(sn);
 8000a6c:	4638      	mov	r0, r7
 8000a6e:	f7ff fe1f 	bl	80006b0 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8000a72:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(sn);
 8000a74:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 8000a76:	d5f7      	bpl.n	8000a68 <sendto+0x16c>
         setSn_IR(sn, Sn_IR_SENDOK);
 8000a78:	4638      	mov	r0, r7
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	f7ff fe02 	bl	8000684 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8000a80:	f1bb 0f00 	cmp.w	fp, #0
 8000a84:	d13b      	bne.n	8000afe <sendto+0x202>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000a86:	4628      	mov	r0, r5
}
 8000a88:	b003      	add	sp, #12
 8000a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8000a8e:	42a5      	cmp	r5, r4
 8000a90:	d898      	bhi.n	80009c4 <sendto+0xc8>
 8000a92:	e7aa      	b.n	80009ea <sendto+0xee>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8000a94:	4638      	mov	r0, r7
 8000a96:	f7ff fe0b 	bl	80006b0 <WIZCHIP_READ>
 8000a9a:	0740      	lsls	r0, r0, #29
 8000a9c:	f53f af57 	bmi.w	800094e <sendto+0x52>
 8000aa0:	f06f 000b 	mvn.w	r0, #11
 8000aa4:	e001      	b.n	8000aaa <sendto+0x1ae>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8000aa6:	f06f 0003 	mvn.w	r0, #3
}
 8000aaa:	b003      	add	sp, #12
 8000aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         getSUBR((uint8_t*)&taddr);
 8000ab0:	2014      	movs	r0, #20
 8000ab2:	f7ff fdfd 	bl	80006b0 <WIZCHIP_READ>
 8000ab6:	4682      	mov	sl, r0
 8000ab8:	2014      	movs	r0, #20
 8000aba:	f3ca 2a0f 	ubfx	sl, sl, #8, #16
 8000abe:	f88d a004 	strb.w	sl, [sp, #4]
 8000ac2:	f7ff fdf5 	bl	80006b0 <WIZCHIP_READ>
 8000ac6:	fa5f f880 	uxtb.w	r8, r0
 8000aca:	2016      	movs	r0, #22
 8000acc:	f88d 8005 	strb.w	r8, [sp, #5]
 8000ad0:	f7ff fdee 	bl	80006b0 <WIZCHIP_READ>
 8000ad4:	f3c0 290f 	ubfx	r9, r0, #8, #16
 8000ad8:	2016      	movs	r0, #22
 8000ada:	f88d 9006 	strb.w	r9, [sp, #6]
 8000ade:	f7ff fde7 	bl	80006b0 <WIZCHIP_READ>
 8000ae2:	b2c6      	uxtb	r6, r0
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8000ae4:	4621      	mov	r1, r4
 8000ae6:	2014      	movs	r0, #20
         getSUBR((uint8_t*)&taddr);
 8000ae8:	f88d 6007 	strb.w	r6, [sp, #7]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8000aec:	f7ff fdca 	bl	8000684 <WIZCHIP_WRITE>
 8000af0:	4621      	mov	r1, r4
 8000af2:	2016      	movs	r0, #22
 8000af4:	f7ff fdc6 	bl	8000684 <WIZCHIP_WRITE>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8000af8:	f8dd b004 	ldr.w	fp, [sp, #4]
 8000afc:	e79d      	b.n	8000a3a <sendto+0x13e>
 8000afe:	eb08 210a 	add.w	r1, r8, sl, lsl #8
 8000b02:	2014      	movs	r0, #20
 8000b04:	b289      	uxth	r1, r1
 8000b06:	f7ff fdbd 	bl	8000684 <WIZCHIP_WRITE>
 8000b0a:	2016      	movs	r0, #22
 8000b0c:	eb06 2109 	add.w	r1, r6, r9, lsl #8
 8000b10:	b289      	uxth	r1, r1
 8000b12:	f7ff fdb7 	bl	8000684 <WIZCHIP_WRITE>
   return (int32_t)len;
 8000b16:	4628      	mov	r0, r5
 8000b18:	e7b6      	b.n	8000a88 <sendto+0x18c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000b1a:	2000      	movs	r0, #0
}
 8000b1c:	b003      	add	sp, #12
 8000b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8000b22:	4638      	mov	r0, r7
 8000b24:	2108      	movs	r1, #8
 8000b26:	f7ff fdad 	bl	8000684 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8000b2a:	f1bb 0f00 	cmp.w	fp, #0
 8000b2e:	d104      	bne.n	8000b3a <sendto+0x23e>
         return SOCKERR_TIMEOUT;
 8000b30:	f06f 000c 	mvn.w	r0, #12
}
 8000b34:	b003      	add	sp, #12
 8000b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(taddr) setSUBR((uint8_t*)&taddr);
 8000b3a:	eb08 210a 	add.w	r1, r8, sl, lsl #8
 8000b3e:	2014      	movs	r0, #20
 8000b40:	b289      	uxth	r1, r1
 8000b42:	f7ff fd9f 	bl	8000684 <WIZCHIP_WRITE>
 8000b46:	2016      	movs	r0, #22
 8000b48:	eb06 2109 	add.w	r1, r6, r9, lsl #8
 8000b4c:	b289      	uxth	r1, r1
 8000b4e:	f7ff fd99 	bl	8000684 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8000b52:	f06f 000c 	mvn.w	r0, #12
 8000b56:	e7a8      	b.n	8000aaa <sendto+0x1ae>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8000b58:	f06f 0006 	mvn.w	r0, #6
 8000b5c:	e7a5      	b.n	8000aaa <sendto+0x1ae>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8000b5e:	f06f 000a 	mvn.w	r0, #10
 8000b62:	e7a2      	b.n	8000aaa <sendto+0x1ae>
   CHECK_SOCKNUM();
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	e79f      	b.n	8000aaa <sendto+0x1ae>
         return SOCKERR_SOCKMODE;
 8000b6a:	f06f 0004 	mvn.w	r0, #4
 8000b6e:	e79c      	b.n	8000aaa <sendto+0x1ae>
   CHECK_SOCKDATA();
 8000b70:	f06f 000d 	mvn.w	r0, #13
 8000b74:	e799      	b.n	8000aaa <sendto+0x1ae>
 8000b76:	bf00      	nop
 8000b78:	240000f4 	.word	0x240000f4

08000b7c <close.part.0>:
int8_t close(uint8_t sn)
 8000b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8000b80:	f100 0808 	add.w	r8, r0, #8
int8_t close(uint8_t sn)
 8000b84:	b084      	sub	sp, #16
 8000b86:	4607      	mov	r7, r0
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8000b88:	ea4f 1888 	mov.w	r8, r8, lsl #6
 8000b8c:	4640      	mov	r0, r8
 8000b8e:	f7ff fd8f 	bl	80006b0 <WIZCHIP_READ>
 8000b92:	f000 040f 	and.w	r4, r0, #15
 8000b96:	2c01      	cmp	r4, #1
 8000b98:	d02d      	beq.n	8000bf6 <close.part.0+0x7a>
      setSn_CR(sn,Sn_CR_OPEN);
 8000b9a:	f108 0502 	add.w	r5, r8, #2
      while(getSn_SR(sn) != SOCK_UDP);
 8000b9e:	f108 0608 	add.w	r6, r8, #8
	setSn_CR(sn,Sn_CR_CLOSE);
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f7ff fd6d 	bl	8000684 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 8000baa:	4628      	mov	r0, r5
 8000bac:	f7ff fd80 	bl	80006b0 <WIZCHIP_READ>
 8000bb0:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8000bb4:	d1f9      	bne.n	8000baa <close.part.0+0x2e>
	setSn_IR(sn, 0xFF);
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	f108 0006 	add.w	r0, r8, #6
 8000bbc:	f7ff fd62 	bl	8000684 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	4827      	ldr	r0, [pc, #156]	; (8000c60 <close.part.0+0xe4>)
 8000bc4:	40bb      	lsls	r3, r7
	sock_is_sending &= ~(1<<sn);
 8000bc6:	4927      	ldr	r1, [pc, #156]	; (8000c64 <close.part.0+0xe8>)
	sock_io_mode &= ~(1<<sn);
 8000bc8:	8802      	ldrh	r2, [r0, #0]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	401a      	ands	r2, r3
 8000bd0:	8002      	strh	r2, [r0, #0]
	sock_is_sending &= ~(1<<sn);
 8000bd2:	880a      	ldrh	r2, [r1, #0]
 8000bd4:	4013      	ands	r3, r2
	sock_remained_size[sn] = 0;
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <close.part.0+0xec>)
	sock_is_sending &= ~(1<<sn);
 8000bd8:	800b      	strh	r3, [r1, #0]
	sock_pack_info[sn] = 0;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <close.part.0+0xf0>)
	sock_remained_size[sn] = 0;
 8000bdc:	f822 4017 	strh.w	r4, [r2, r7, lsl #1]
	sock_pack_info[sn] = 0;
 8000be0:	55dc      	strb	r4, [r3, r7]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000be2:	4630      	mov	r0, r6
 8000be4:	f7ff fd64 	bl	80006b0 <WIZCHIP_READ>
 8000be8:	b2c0      	uxtb	r0, r0
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d1f9      	bne.n	8000be2 <close.part.0+0x66>
}
 8000bee:	2001      	movs	r0, #1
 8000bf0:	b004      	add	sp, #16
 8000bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	f7ff fdc0 	bl	800077c <getSn_TX_FSR>
 8000bfc:	4605      	mov	r5, r0
 8000bfe:	4638      	mov	r0, r7
 8000c00:	f7ff fd6c 	bl	80006dc <getTMSR>
 8000c04:	ebb5 2f80 	cmp.w	r5, r0, lsl #10
 8000c08:	d0c7      	beq.n	8000b9a <close.part.0+0x1e>
      uint8_t destip[4] = {0, 0, 0, 1};
 8000c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      setSn_MR(sn,Sn_MR_UDP);
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4640      	mov	r0, r8
      setSn_CR(sn,Sn_CR_OPEN);
 8000c12:	f108 0502 	add.w	r5, r8, #2
      uint8_t destip[4] = {0, 0, 0, 1};
 8000c16:	9303      	str	r3, [sp, #12]
      setSn_MR(sn,Sn_MR_UDP);
 8000c18:	f7ff fd34 	bl	8000684 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8000c1c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c20:	f108 000a 	add.w	r0, r8, #10
 8000c24:	f7ff fd2e 	bl	8000684 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8000c28:	4621      	mov	r1, r4
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f7ff fd2a 	bl	8000684 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8000c30:	4628      	mov	r0, r5
 8000c32:	f7ff fd3d 	bl	80006b0 <WIZCHIP_READ>
 8000c36:	b2c0      	uxtb	r0, r0
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d1f9      	bne.n	8000c30 <close.part.0+0xb4>
      while(getSn_SR(sn) != SOCK_UDP);
 8000c3c:	f108 0608 	add.w	r6, r8, #8
 8000c40:	4630      	mov	r0, r6
 8000c42:	f7ff fd35 	bl	80006b0 <WIZCHIP_READ>
 8000c46:	b2c0      	uxtb	r0, r0
 8000c48:	2822      	cmp	r0, #34	; 0x22
 8000c4a:	d1f9      	bne.n	8000c40 <close.part.0+0xc4>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8000c4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c50:	2201      	movs	r2, #1
 8000c52:	4638      	mov	r0, r7
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	ab03      	add	r3, sp, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f7ff fe4f 	bl	80008fc <sendto>
 8000c5e:	e7a0      	b.n	8000ba2 <close.part.0+0x26>
 8000c60:	240000f4 	.word	0x240000f4
 8000c64:	240000f6 	.word	0x240000f6
 8000c68:	24000108 	.word	0x24000108
 8000c6c:	240000f8 	.word	0x240000f8

08000c70 <socket>:
	CHECK_SOCKNUM();
 8000c70:	2808      	cmp	r0, #8
 8000c72:	f200 8091 	bhi.w	8000d98 <socket+0x128>
	switch(protocol)
 8000c76:	2901      	cmp	r1, #1
{
 8000c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	b082      	sub	sp, #8
 8000c80:	460f      	mov	r7, r1
 8000c82:	4690      	mov	r8, r2
 8000c84:	461e      	mov	r6, r3
	switch(protocol)
 8000c86:	d05a      	beq.n	8000d3e <socket+0xce>
 8000c88:	1e8b      	subs	r3, r1, #2
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d873      	bhi.n	8000d76 <socket+0x106>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000c8e:	0771      	lsls	r1, r6, #29
 8000c90:	d479      	bmi.n	8000d86 <socket+0x116>
	if(flag != 0)
 8000c92:	b13e      	cbz	r6, 8000ca4 <socket+0x34>
   	switch(protocol)
 8000c94:	2f01      	cmp	r7, #1
 8000c96:	d073      	beq.n	8000d80 <socket+0x110>
 8000c98:	2f02      	cmp	r7, #2
 8000c9a:	d103      	bne.n	8000ca4 <socket+0x34>
   	      if(flag & SF_IGMP_VER2)
 8000c9c:	06b2      	lsls	r2, r6, #26
 8000c9e:	d501      	bpl.n	8000ca4 <socket+0x34>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000ca0:	0633      	lsls	r3, r6, #24
 8000ca2:	d570      	bpl.n	8000d86 <socket+0x116>
	CHECK_SOCKNUM();
 8000ca4:	4628      	mov	r0, r5
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8000ca6:	f105 0408 	add.w	r4, r5, #8
 8000caa:	f7ff ff67 	bl	8000b7c <close.part.0>
 8000cae:	f026 010f 	bic.w	r1, r6, #15
 8000cb2:	01a4      	lsls	r4, r4, #6
 8000cb4:	430f      	orrs	r7, r1
 8000cb6:	01f1      	lsls	r1, r6, #7
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8000cbe:	4339      	orrs	r1, r7
 8000cc0:	f7ff fce0 	bl	8000684 <WIZCHIP_WRITE>
	if(!port)
 8000cc4:	f1b8 0f00 	cmp.w	r8, #0
 8000cc8:	d10a      	bne.n	8000ce0 <socket+0x70>
	   port = sock_any_port++;
 8000cca:	4a35      	ldr	r2, [pc, #212]	; (8000da0 <socket+0x130>)
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000ccc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
	   port = sock_any_port++;
 8000cd0:	f8b2 8000 	ldrh.w	r8, [r2]
 8000cd4:	f108 0301 	add.w	r3, r8, #1
 8000cd8:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d056      	beq.n	8000d8c <socket+0x11c>
	   port = sock_any_port++;
 8000cde:	8013      	strh	r3, [r2, #0]
   setSn_CR(sn,Sn_CR_OPEN);
 8000ce0:	1ca7      	adds	r7, r4, #2
   setSn_PORT(sn,port);	
 8000ce2:	4641      	mov	r1, r8
 8000ce4:	f104 000a 	add.w	r0, r4, #10
 8000ce8:	f7ff fccc 	bl	8000684 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000cec:	2101      	movs	r1, #1
 8000cee:	4638      	mov	r0, r7
 8000cf0:	f7ff fcc8 	bl	8000684 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000cf4:	4638      	mov	r0, r7
 8000cf6:	f7ff fcdb 	bl	80006b0 <WIZCHIP_READ>
 8000cfa:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8000cfe:	d1f9      	bne.n	8000cf4 <socket+0x84>
   sock_io_mode &= ~(1 <<sn);
 8000d00:	2301      	movs	r3, #1
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000d02:	4f28      	ldr	r7, [pc, #160]	; (8000da4 <socket+0x134>)
   sock_remained_size[sn] = 0;
 8000d04:	4928      	ldr	r1, [pc, #160]	; (8000da8 <socket+0x138>)
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000d06:	3408      	adds	r4, #8
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000d08:	401e      	ands	r6, r3
   sock_io_mode &= ~(1 <<sn);
 8000d0a:	40ab      	lsls	r3, r5
   sock_remained_size[sn] = 0;
 8000d0c:	f821 2015 	strh.w	r2, [r1, r5, lsl #1]
   sock_io_mode &= ~(1 <<sn);
 8000d10:	43db      	mvns	r3, r3
 8000d12:	8839      	ldrh	r1, [r7, #0]
   sock_is_sending &= ~(1<<sn);
 8000d14:	4825      	ldr	r0, [pc, #148]	; (8000dac <socket+0x13c>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000d16:	40ae      	lsls	r6, r5
   sock_io_mode &= ~(1 <<sn);
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	4019      	ands	r1, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000d1c:	430e      	orrs	r6, r1
   sock_is_sending &= ~(1<<sn);
 8000d1e:	8801      	ldrh	r1, [r0, #0]
 8000d20:	400b      	ands	r3, r1
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000d22:	803e      	strh	r6, [r7, #0]
   sock_is_sending &= ~(1<<sn);
 8000d24:	8003      	strh	r3, [r0, #0]
   sock_pack_info[sn] = PACK_COMPLETED;
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <socket+0x140>)
 8000d28:	555a      	strb	r2, [r3, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f7ff fcc0 	bl	80006b0 <WIZCHIP_READ>
 8000d30:	b2c0      	uxtb	r0, r0
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d0f9      	beq.n	8000d2a <socket+0xba>
   return (int8_t)sn;
 8000d36:	b268      	sxtb	r0, r5
}	   
 8000d38:	b002      	add	sp, #8
 8000d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 8000d3e:	2018      	movs	r0, #24
 8000d40:	f7ff fcb6 	bl	80006b0 <WIZCHIP_READ>
 8000d44:	0a00      	lsrs	r0, r0, #8
 8000d46:	f88d 0004 	strb.w	r0, [sp, #4]
 8000d4a:	2018      	movs	r0, #24
 8000d4c:	f7ff fcb0 	bl	80006b0 <WIZCHIP_READ>
 8000d50:	f88d 0005 	strb.w	r0, [sp, #5]
 8000d54:	201a      	movs	r0, #26
 8000d56:	f7ff fcab 	bl	80006b0 <WIZCHIP_READ>
 8000d5a:	0a00      	lsrs	r0, r0, #8
 8000d5c:	f88d 0006 	strb.w	r0, [sp, #6]
 8000d60:	201a      	movs	r0, #26
 8000d62:	f7ff fca5 	bl	80006b0 <WIZCHIP_READ>
 8000d66:	f88d 0007 	strb.w	r0, [sp, #7]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000d6a:	9b01      	ldr	r3, [sp, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d18e      	bne.n	8000c8e <socket+0x1e>
 8000d70:	f06f 0002 	mvn.w	r0, #2
 8000d74:	e7e0      	b.n	8000d38 <socket+0xc8>
	switch(protocol)
 8000d76:	f06f 0004 	mvn.w	r0, #4
}	   
 8000d7a:	b002      	add	sp, #8
 8000d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8000d80:	f016 0f23 	tst.w	r6, #35	; 0x23
 8000d84:	d18e      	bne.n	8000ca4 <socket+0x34>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000d86:	f06f 0005 	mvn.w	r0, #5
 8000d8a:	e7d5      	b.n	8000d38 <socket+0xc8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000d8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 8000d90:	f64f 78ef 	movw	r8, #65519	; 0xffef
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000d94:	8013      	strh	r3, [r2, #0]
 8000d96:	e7a3      	b.n	8000ce0 <socket+0x70>
	CHECK_SOCKNUM();
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
}	   
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	24000000 	.word	0x24000000
 8000da4:	240000f4 	.word	0x240000f4
 8000da8:	24000108 	.word	0x24000108
 8000dac:	240000f6 	.word	0x240000f6
 8000db0:	240000f8 	.word	0x240000f8

08000db4 <listen>:
	CHECK_SOCKNUM();
 8000db4:	2808      	cmp	r0, #8
 8000db6:	d82d      	bhi.n	8000e14 <listen+0x60>
{
 8000db8:	b570      	push	{r4, r5, r6, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000dba:	f100 0408 	add.w	r4, r0, #8
 8000dbe:	4605      	mov	r5, r0
 8000dc0:	b2e4      	uxtb	r4, r4
 8000dc2:	01a4      	lsls	r4, r4, #6
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f7ff fc73 	bl	80006b0 <WIZCHIP_READ>
 8000dca:	f000 000f 	and.w	r0, r0, #15
 8000dce:	2801      	cmp	r0, #1
 8000dd0:	d11a      	bne.n	8000e08 <listen+0x54>
	CHECK_SOCKINIT();
 8000dd2:	f104 0608 	add.w	r6, r4, #8
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f7ff fc6a 	bl	80006b0 <WIZCHIP_READ>
 8000ddc:	b2c0      	uxtb	r0, r0
 8000dde:	2813      	cmp	r0, #19
 8000de0:	d115      	bne.n	8000e0e <listen+0x5a>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000de2:	3402      	adds	r4, #2
 8000de4:	2102      	movs	r1, #2
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff fc4c 	bl	8000684 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000dec:	4620      	mov	r0, r4
 8000dee:	f7ff fc5f 	bl	80006b0 <WIZCHIP_READ>
 8000df2:	b2c0      	uxtb	r0, r0
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d1f9      	bne.n	8000dec <listen+0x38>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f7ff fc59 	bl	80006b0 <WIZCHIP_READ>
 8000dfe:	b2c0      	uxtb	r0, r0
 8000e00:	2814      	cmp	r0, #20
 8000e02:	d10a      	bne.n	8000e1a <listen+0x66>
   return SOCK_OK;
 8000e04:	2001      	movs	r0, #1
}
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000e08:	f06f 0004 	mvn.w	r0, #4
}
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKINIT();
 8000e0e:	f06f 0002 	mvn.w	r0, #2
}
 8000e12:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e18:	4770      	bx	lr
	CHECK_SOCKNUM();
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f7ff feae 	bl	8000b7c <close.part.0>
         return SOCKERR_SOCKCLOSED;
 8000e20:	f06f 0003 	mvn.w	r0, #3
}
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
 8000e26:	bf00      	nop

08000e28 <disconnect>:
   CHECK_SOCKNUM();
 8000e28:	2808      	cmp	r0, #8
 8000e2a:	d83e      	bhi.n	8000eaa <disconnect+0x82>
{
 8000e2c:	b570      	push	{r4, r5, r6, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000e2e:	f100 0408 	add.w	r4, r0, #8
 8000e32:	4605      	mov	r5, r0
 8000e34:	01a4      	lsls	r4, r4, #6
 8000e36:	4620      	mov	r0, r4
 8000e38:	f7ff fc3a 	bl	80006b0 <WIZCHIP_READ>
 8000e3c:	f000 000f 	and.w	r0, r0, #15
 8000e40:	2801      	cmp	r0, #1
 8000e42:	d12f      	bne.n	8000ea4 <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
 8000e44:	1ca6      	adds	r6, r4, #2
 8000e46:	2108      	movs	r1, #8
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f7ff fc1b 	bl	8000684 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000e4e:	4630      	mov	r0, r6
 8000e50:	f7ff fc2e 	bl	80006b0 <WIZCHIP_READ>
 8000e54:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8000e58:	d1f9      	bne.n	8000e4e <disconnect+0x26>
	sock_is_sending &= ~(1<<sn);
 8000e5a:	4e15      	ldr	r6, [pc, #84]	; (8000eb0 <disconnect+0x88>)
 8000e5c:	2201      	movs	r2, #1
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <disconnect+0x8c>)
	sock_is_sending &= ~(1<<sn);
 8000e60:	fa02 f105 	lsl.w	r1, r2, r5
 8000e64:	8832      	ldrh	r2, [r6, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000e66:	881b      	ldrh	r3, [r3, #0]
	sock_is_sending &= ~(1<<sn);
 8000e68:	ea22 0201 	bic.w	r2, r2, r1
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000e6c:	412b      	asrs	r3, r5
	sock_is_sending &= ~(1<<sn);
 8000e6e:	8032      	strh	r2, [r6, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000e70:	07da      	lsls	r2, r3, #31
 8000e72:	d410      	bmi.n	8000e96 <disconnect+0x6e>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000e74:	f104 0608 	add.w	r6, r4, #8
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000e78:	3406      	adds	r4, #6
 8000e7a:	e003      	b.n	8000e84 <disconnect+0x5c>
 8000e7c:	f7ff fc18 	bl	80006b0 <WIZCHIP_READ>
 8000e80:	0703      	lsls	r3, r0, #28
 8000e82:	d409      	bmi.n	8000e98 <disconnect+0x70>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000e84:	4630      	mov	r0, r6
 8000e86:	f7ff fc13 	bl	80006b0 <WIZCHIP_READ>
 8000e8a:	4603      	mov	r3, r0
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000e8c:	4620      	mov	r0, r4
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1f3      	bne.n	8000e7c <disconnect+0x54>
	return SOCK_OK;
 8000e94:	2001      	movs	r0, #1
}
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f7ff fe6f 	bl	8000b7c <close.part.0>
	      return SOCKERR_TIMEOUT;
 8000e9e:	f06f 000c 	mvn.w	r0, #12
}
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ea4:	f06f 0004 	mvn.w	r0, #4
}
 8000ea8:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 8000eaa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000eae:	4770      	bx	lr
 8000eb0:	240000f6 	.word	0x240000f6
 8000eb4:	240000f4 	.word	0x240000f4

08000eb8 <send>:
{
 8000eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   CHECK_SOCKNUM();
 8000ebc:	2808      	cmp	r0, #8
{
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8000ec2:	f200 808f 	bhi.w	8000fe4 <send+0x12c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ec6:	f100 0908 	add.w	r9, r0, #8
 8000eca:	4605      	mov	r5, r0
 8000ecc:	4614      	mov	r4, r2
 8000ece:	ea4f 1989 	mov.w	r9, r9, lsl #6
 8000ed2:	4648      	mov	r0, r9
 8000ed4:	f7ff fbec 	bl	80006b0 <WIZCHIP_READ>
 8000ed8:	f000 000f 	and.w	r0, r0, #15
 8000edc:	2801      	cmp	r0, #1
 8000ede:	f040 8087 	bne.w	8000ff0 <send+0x138>
   CHECK_SOCKDATA();
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	f000 8081 	beq.w	8000fea <send+0x132>
   tmp = getSn_SR(sn);
 8000ee8:	f109 0708 	add.w	r7, r9, #8
 8000eec:	4638      	mov	r0, r7
 8000eee:	f7ff fbdf 	bl	80006b0 <WIZCHIP_READ>
 8000ef2:	b2c0      	uxtb	r0, r0
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000ef4:	2817      	cmp	r0, #23
 8000ef6:	d001      	beq.n	8000efc <send+0x44>
 8000ef8:	281c      	cmp	r0, #28
 8000efa:	d170      	bne.n	8000fde <send+0x126>
   if( sock_is_sending & (1<<sn) )
 8000efc:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001004 <send+0x14c>
 8000f00:	f8bb 3000 	ldrh.w	r3, [fp]
 8000f04:	412b      	asrs	r3, r5
 8000f06:	07d9      	lsls	r1, r3, #31
 8000f08:	d443      	bmi.n	8000f92 <send+0xda>
         sock_is_sending &= ~(1<<sn);         
 8000f0a:	2601      	movs	r6, #1
 8000f0c:	40ae      	lsls	r6, r5
   freesize = getSn_TxMAX(sn);
 8000f0e:	4628      	mov	r0, r5
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000f10:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001008 <send+0x150>
   freesize = getSn_TxMAX(sn);
 8000f14:	f7ff fbe2 	bl	80006dc <getTMSR>
 8000f18:	0280      	lsls	r0, r0, #10
 8000f1a:	b280      	uxth	r0, r0
 8000f1c:	4284      	cmp	r4, r0
 8000f1e:	bf28      	it	cs
 8000f20:	4604      	movcs	r4, r0
      freesize = getSn_TX_FSR(sn);
 8000f22:	4628      	mov	r0, r5
 8000f24:	f7ff fc2a 	bl	800077c <getSn_TX_FSR>
 8000f28:	4682      	mov	sl, r0
      tmp = getSn_SR(sn);
 8000f2a:	4638      	mov	r0, r7
 8000f2c:	f7ff fbc0 	bl	80006b0 <WIZCHIP_READ>
 8000f30:	b2c3      	uxtb	r3, r0
      freesize = getSn_TX_FSR(sn);
 8000f32:	fa1f fa8a 	uxth.w	sl, sl
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000f36:	2b17      	cmp	r3, #23
 8000f38:	d001      	beq.n	8000f3e <send+0x86>
 8000f3a:	2b1c      	cmp	r3, #28
 8000f3c:	d13a      	bne.n	8000fb4 <send+0xfc>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000f3e:	f8b8 3000 	ldrh.w	r3, [r8]
 8000f42:	4233      	tst	r3, r6
 8000f44:	d033      	beq.n	8000fae <send+0xf6>
 8000f46:	4554      	cmp	r4, sl
 8000f48:	d82d      	bhi.n	8000fa6 <send+0xee>
   wiz_send_data(sn, buf, len);
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	4622      	mov	r2, r4
 8000f4e:	9901      	ldr	r1, [sp, #4]
   setSn_CR(sn,Sn_CR_SEND);
 8000f50:	f109 0502 	add.w	r5, r9, #2
   wiz_send_data(sn, buf, len);
 8000f54:	f7ff fc76 	bl	8000844 <wiz_send_data>
      setSn_TX_WRSR(sn,len);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f109 0020 	add.w	r0, r9, #32
 8000f5e:	f7ff fb91 	bl	8000684 <WIZCHIP_WRITE>
 8000f62:	4621      	mov	r1, r4
 8000f64:	f109 0022 	add.w	r0, r9, #34	; 0x22
 8000f68:	f7ff fb8c 	bl	8000684 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_SEND);
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f7ff fb88 	bl	8000684 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000f74:	4628      	mov	r0, r5
 8000f76:	f7ff fb9b 	bl	80006b0 <WIZCHIP_READ>
 8000f7a:	b2c0      	uxtb	r0, r0
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d1f9      	bne.n	8000f74 <send+0xbc>
   sock_is_sending |= (1 << sn);
 8000f80:	f8bb 3000 	ldrh.w	r3, [fp]
   return (int32_t)len;
 8000f84:	4620      	mov	r0, r4
   sock_is_sending |= (1 << sn);
 8000f86:	431e      	orrs	r6, r3
 8000f88:	f8ab 6000 	strh.w	r6, [fp]
}
 8000f8c:	b003      	add	sp, #12
 8000f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp = getSn_IR(sn);
 8000f92:	f109 0606 	add.w	r6, r9, #6
 8000f96:	4630      	mov	r0, r6
 8000f98:	f7ff fb8a 	bl	80006b0 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8000f9c:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(sn);
 8000f9e:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 8000fa0:	d410      	bmi.n	8000fc4 <send+0x10c>
      else if(tmp & Sn_IR_TIMEOUT)
 8000fa2:	071b      	lsls	r3, r3, #28
 8000fa4:	d427      	bmi.n	8000ff6 <send+0x13e>
      else return SOCK_BUSY;
 8000fa6:	2000      	movs	r0, #0
}
 8000fa8:	b003      	add	sp, #12
 8000faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8000fae:	4554      	cmp	r4, sl
 8000fb0:	d8b7      	bhi.n	8000f22 <send+0x6a>
 8000fb2:	e7ca      	b.n	8000f4a <send+0x92>
	CHECK_SOCKNUM();
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f7ff fde1 	bl	8000b7c <close.part.0>
         return SOCKERR_SOCKSTATUS;
 8000fba:	f06f 0006 	mvn.w	r0, #6
}
 8000fbe:	b003      	add	sp, #12
 8000fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8000fc4:	4630      	mov	r0, r6
         sock_is_sending &= ~(1<<sn);         
 8000fc6:	2601      	movs	r6, #1
         setSn_IR(sn, Sn_IR_SENDOK);
 8000fc8:	2110      	movs	r1, #16
 8000fca:	f7ff fb5b 	bl	8000684 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8000fce:	40ae      	lsls	r6, r5
 8000fd0:	f8bb 3000 	ldrh.w	r3, [fp]
 8000fd4:	ea23 0306 	bic.w	r3, r3, r6
 8000fd8:	f8ab 3000 	strh.w	r3, [fp]
 8000fdc:	e797      	b.n	8000f0e <send+0x56>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000fde:	f06f 0006 	mvn.w	r0, #6
 8000fe2:	e7e1      	b.n	8000fa8 <send+0xf0>
   CHECK_SOCKNUM();
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	e7de      	b.n	8000fa8 <send+0xf0>
   CHECK_SOCKDATA();
 8000fea:	f06f 000d 	mvn.w	r0, #13
 8000fee:	e7db      	b.n	8000fa8 <send+0xf0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ff0:	f06f 0004 	mvn.w	r0, #4
 8000ff4:	e7d8      	b.n	8000fa8 <send+0xf0>
	CHECK_SOCKNUM();
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	f7ff fdc0 	bl	8000b7c <close.part.0>
         return SOCKERR_TIMEOUT;
 8000ffc:	f06f 000c 	mvn.w	r0, #12
 8001000:	e7d2      	b.n	8000fa8 <send+0xf0>
 8001002:	bf00      	nop
 8001004:	240000f6 	.word	0x240000f6
 8001008:	240000f4 	.word	0x240000f4

0800100c <recv>:
{
 800100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   CHECK_SOCKNUM();
 8001010:	2808      	cmp	r0, #8
{
 8001012:	b085      	sub	sp, #20
 8001014:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8001016:	f200 80f3 	bhi.w	8001200 <recv+0x1f4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800101a:	f100 0908 	add.w	r9, r0, #8
 800101e:	4683      	mov	fp, r0
 8001020:	4615      	mov	r5, r2
 8001022:	ea4f 1989 	mov.w	r9, r9, lsl #6
 8001026:	4648      	mov	r0, r9
 8001028:	f7ff fb42 	bl	80006b0 <WIZCHIP_READ>
 800102c:	f000 040f 	and.w	r4, r0, #15
 8001030:	2c01      	cmp	r4, #1
 8001032:	f040 80eb 	bne.w	800120c <recv+0x200>
   CHECK_SOCKDATA();
 8001036:	2d00      	cmp	r5, #0
 8001038:	f000 80e5 	beq.w	8001206 <recv+0x1fa>
   recvsize = getSn_RxMAX(sn);
 800103c:	4658      	mov	r0, fp
   if(sock_remained_size[sn] == 0)
 800103e:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800121c <recv+0x210>
   recvsize = getSn_RxMAX(sn);
 8001042:	f7ff fb73 	bl	800072c <getRMSR>
 8001046:	0280      	lsls	r0, r0, #10
   if(sock_remained_size[sn] == 0)
 8001048:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
   recvsize = getSn_RxMAX(sn);
 800104c:	b283      	uxth	r3, r0
 800104e:	9300      	str	r3, [sp, #0]
   if(sock_remained_size[sn] == 0)
 8001050:	bb3a      	cbnz	r2, 80010a2 <recv+0x96>
 8001052:	fa04 f40b 	lsl.w	r4, r4, fp
         tmp = getSn_SR(sn);
 8001056:	f109 0708 	add.w	r7, r9, #8
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800105a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001220 <recv+0x214>
         recvsize = getSn_RX_RSR(sn);
 800105e:	4658      	mov	r0, fp
 8001060:	f7ff fbba 	bl	80007d8 <getSn_RX_RSR>
 8001064:	4606      	mov	r6, r0
         tmp = getSn_SR(sn);
 8001066:	4638      	mov	r0, r7
 8001068:	f7ff fb22 	bl	80006b0 <WIZCHIP_READ>
 800106c:	4602      	mov	r2, r0
         recvsize = getSn_RX_RSR(sn);
 800106e:	b2b6      	uxth	r6, r6
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001070:	4658      	mov	r0, fp
         tmp = getSn_SR(sn);
 8001072:	b2d2      	uxtb	r2, r2
         if (tmp != SOCK_ESTABLISHED)
 8001074:	2a17      	cmp	r2, #23
 8001076:	d05c      	beq.n	8001132 <recv+0x126>
            if(tmp == SOCK_CLOSE_WAIT)
 8001078:	2a1c      	cmp	r2, #28
 800107a:	f040 8094 	bne.w	80011a6 <recv+0x19a>
               if(recvsize != 0) break;
 800107e:	2e00      	cmp	r6, #0
 8001080:	d15d      	bne.n	800113e <recv+0x132>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001082:	f7ff fb7b 	bl	800077c <getSn_TX_FSR>
 8001086:	4606      	mov	r6, r0
 8001088:	4658      	mov	r0, fp
 800108a:	f7ff fb27 	bl	80006dc <getTMSR>
 800108e:	ebb6 2f80 	cmp.w	r6, r0, lsl #10
 8001092:	f000 8088 	beq.w	80011a6 <recv+0x19a>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001096:	f8b8 2000 	ldrh.w	r2, [r8]
 800109a:	4222      	tst	r2, r4
 800109c:	d0df      	beq.n	800105e <recv+0x52>
 800109e:	2000      	movs	r0, #0
 80010a0:	e044      	b.n	800112c <recv+0x120>
 80010a2:	461e      	mov	r6, r3
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 80010a4:	4648      	mov	r0, r9
 80010a6:	f7ff fb03 	bl	80006b0 <WIZCHIP_READ>
 80010aa:	05c0      	lsls	r0, r0, #23
 80010ac:	d573      	bpl.n	8001196 <recv+0x18a>
      mr = getMR();
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff fafe 	bl	80006b0 <WIZCHIP_READ>
 80010b4:	4604      	mov	r4, r0
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 80010b6:	4648      	mov	r0, r9
 80010b8:	f7ff fafa 	bl	80006b0 <WIZCHIP_READ>
 80010bc:	05c1      	lsls	r1, r0, #23
 80010be:	d57f      	bpl.n	80011c0 <recv+0x1b4>
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80010c0:	4c54      	ldr	r4, [pc, #336]	; (8001214 <recv+0x208>)
      sock_remained_size[sn] = recvsize;
 80010c2:	f82a 601b 	strh.w	r6, [sl, fp, lsl #1]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80010c6:	f814 200b 	ldrb.w	r2, [r4, fp]
 80010ca:	f002 0002 	and.w	r0, r2, #2
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80010ce:	9b00      	ldr	r3, [sp, #0]
 80010d0:	429d      	cmp	r5, r3
 80010d2:	bf28      	it	cs
 80010d4:	461d      	movcs	r5, r3
 80010d6:	42b5      	cmp	r5, r6
 80010d8:	bf28      	it	cs
 80010da:	4635      	movcs	r5, r6
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80010dc:	2800      	cmp	r0, #0
 80010de:	f000 8088 	beq.w	80011f2 <recv+0x1e6>
      *buf = sock_remained_byte[sn];
 80010e2:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <recv+0x20c>)
      sock_remained_size[sn] -= 1;
 80010e4:	1e71      	subs	r1, r6, #1
      *buf = sock_remained_byte[sn];
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	f812 200b 	ldrb.w	r2, [r2, fp]
      sock_remained_size[sn] -= 1;
 80010ec:	b28e      	uxth	r6, r1
      *buf = sock_remained_byte[sn];
 80010ee:	f803 2b01 	strb.w	r2, [r3], #1
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 80010f2:	f814 200b 	ldrb.w	r2, [r4, fp]
      *buf = sock_remained_byte[sn];
 80010f6:	9301      	str	r3, [sp, #4]
      recvsize -= 1;
 80010f8:	1e6b      	subs	r3, r5, #1
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 80010fa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
      sock_remained_size[sn] -= 1;
 80010fe:	f82a 601b 	strh.w	r6, [sl, fp, lsl #1]
      recvsize -= 1;
 8001102:	fa1f f883 	uxth.w	r8, r3
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8001106:	f804 200b 	strb.w	r2, [r4, fp]
   if(recvsize != 0)
 800110a:	f1b8 0f00 	cmp.w	r8, #0
 800110e:	d11e      	bne.n	800114e <recv+0x142>
   if(sock_remained_size[sn] != 0)
 8001110:	2e00      	cmp	r6, #0
 8001112:	d150      	bne.n	80011b6 <recv+0x1aa>
   else sock_pack_info[sn] = PACK_COMPLETED;
 8001114:	2200      	movs	r2, #0
 8001116:	f804 200b 	strb.w	r2, [r4, fp]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 800111a:	4648      	mov	r0, r9
 800111c:	f7ff fac8 	bl	80006b0 <WIZCHIP_READ>
 8001120:	05c3      	lsls	r3, r0, #23
 8001122:	d502      	bpl.n	800112a <recv+0x11e>
 8001124:	2200      	movs	r2, #0
 8001126:	f82a 201b 	strh.w	r2, [sl, fp, lsl #1]
   return (int32_t)len;
 800112a:	4628      	mov	r0, r5
}
 800112c:	b005      	add	sp, #20
 800112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001132:	f8b8 2000 	ldrh.w	r2, [r8]
 8001136:	4222      	tst	r2, r4
 8001138:	d006      	beq.n	8001148 <recv+0x13c>
 800113a:	2e00      	cmp	r6, #0
 800113c:	d0af      	beq.n	800109e <recv+0x92>
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 800113e:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
 8001142:	2a00      	cmp	r2, #0
 8001144:	d0b3      	beq.n	80010ae <recv+0xa2>
 8001146:	e7ad      	b.n	80010a4 <recv+0x98>
         if(recvsize != 0) break;
 8001148:	2e00      	cmp	r6, #0
 800114a:	d088      	beq.n	800105e <recv+0x52>
 800114c:	e7f7      	b.n	800113e <recv+0x132>
      setSn_CR(sn,Sn_CR_RECV);
 800114e:	f109 0702 	add.w	r7, r9, #2
      wiz_recv_data(sn, buf, recvsize);
 8001152:	9901      	ldr	r1, [sp, #4]
 8001154:	4658      	mov	r0, fp
 8001156:	4642      	mov	r2, r8
 8001158:	f7ff fb9c 	bl	8000894 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	4638      	mov	r0, r7
 8001160:	f7ff fa90 	bl	8000684 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8001164:	4638      	mov	r0, r7
 8001166:	f7ff faa3 	bl	80006b0 <WIZCHIP_READ>
 800116a:	b2c0      	uxtb	r0, r0
 800116c:	2800      	cmp	r0, #0
 800116e:	d1f9      	bne.n	8001164 <recv+0x158>
   sock_remained_size[sn] -= recvsize;
 8001170:	f83a 201b 	ldrh.w	r2, [sl, fp, lsl #1]
 8001174:	eba2 0208 	sub.w	r2, r2, r8
 8001178:	b292      	uxth	r2, r2
 800117a:	f82a 201b 	strh.w	r2, [sl, fp, lsl #1]
   if(sock_remained_size[sn] != 0)
 800117e:	2a00      	cmp	r2, #0
 8001180:	d0c8      	beq.n	8001114 <recv+0x108>
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8001182:	f018 0f01 	tst.w	r8, #1
      sock_pack_info[sn] |= PACK_REMAINED;
 8001186:	f814 200b 	ldrb.w	r2, [r4, fp]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 800118a:	d014      	beq.n	80011b6 <recv+0x1aa>
 800118c:	f042 0203 	orr.w	r2, r2, #3
 8001190:	f804 200b 	strb.w	r2, [r4, fp]
 8001194:	e7c1      	b.n	800111a <recv+0x10e>
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8001196:	4c1f      	ldr	r4, [pc, #124]	; (8001214 <recv+0x208>)
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8001198:	f83a 601b 	ldrh.w	r6, [sl, fp, lsl #1]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800119c:	f814 200b 	ldrb.w	r2, [r4, fp]
 80011a0:	f002 0002 	and.w	r0, r2, #2
 80011a4:	e793      	b.n	80010ce <recv+0xc2>
	CHECK_SOCKNUM();
 80011a6:	4658      	mov	r0, fp
 80011a8:	f7ff fce8 	bl	8000b7c <close.part.0>
                  return SOCKERR_SOCKSTATUS;
 80011ac:	f06f 0006 	mvn.w	r0, #6
}
 80011b0:	b005      	add	sp, #20
 80011b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sock_pack_info[sn] |= PACK_REMAINED;
 80011b6:	f042 0201 	orr.w	r2, r2, #1
 80011ba:	f804 200b 	strb.w	r2, [r4, fp]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80011be:	e7ac      	b.n	800111a <recv+0x10e>
         wiz_recv_data(sn,head,2);
 80011c0:	2202      	movs	r2, #2
 80011c2:	a903      	add	r1, sp, #12
 80011c4:	4658      	mov	r0, fp
 80011c6:	f7ff fb65 	bl	8000894 <wiz_recv_data>
         if(mr & MR_FS)
 80011ca:	05e2      	lsls	r2, r4, #23
 80011cc:	d513      	bpl.n	80011f6 <recv+0x1ea>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 80011ce:	f8bd 600c 	ldrh.w	r6, [sp, #12]
         sock_pack_info[sn] = PACK_FIRST;
 80011d2:	9b00      	ldr	r3, [sp, #0]
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	4c0f      	ldr	r4, [pc, #60]	; (8001214 <recv+0x208>)
 80011d8:	42ab      	cmp	r3, r5
      sock_remained_size[sn] = recvsize;
 80011da:	f82a 601b 	strh.w	r6, [sl, fp, lsl #1]
         sock_pack_info[sn] = PACK_FIRST;
 80011de:	f804 200b 	strb.w	r2, [r4, fp]
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80011e2:	bf28      	it	cs
 80011e4:	462b      	movcs	r3, r5
 80011e6:	42b3      	cmp	r3, r6
 80011e8:	bf28      	it	cs
 80011ea:	4633      	movcs	r3, r6
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80011ec:	4698      	mov	r8, r3
      sock_remained_size[sn] = recvsize;
 80011ee:	461d      	mov	r5, r3
 80011f0:	e78b      	b.n	800110a <recv+0xfe>
 80011f2:	46a8      	mov	r8, r5
 80011f4:	e789      	b.n	800110a <recv+0xfe>
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 80011f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80011fa:	ba49      	rev16	r1, r1
 80011fc:	b28e      	uxth	r6, r1
 80011fe:	e7e8      	b.n	80011d2 <recv+0x1c6>
   CHECK_SOCKNUM();
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	e792      	b.n	800112c <recv+0x120>
   CHECK_SOCKDATA();
 8001206:	f06f 000d 	mvn.w	r0, #13
 800120a:	e78f      	b.n	800112c <recv+0x120>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800120c:	f06f 0004 	mvn.w	r0, #4
 8001210:	e78c      	b.n	800112c <recv+0x120>
 8001212:	bf00      	nop
 8001214:	240000f8 	.word	0x240000f8
 8001218:	24000100 	.word	0x24000100
 800121c:	24000108 	.word	0x24000108
 8001220:	240000f4 	.word	0x240000f4

08001224 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001228:	8800      	ldrh	r0, [r0, #0]
 800122a:	b280      	uxth	r0, r0
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001230:	8001      	strh	r1, [r0, #0]
 8001232:	4770      	bx	lr

08001234 <wizchip_cris_exit>:
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <wizchip_cs_select>:
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <wizchip_cs_deselect>:
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <reg_wizchip_bus_cbfunc+0x20>)
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	05d2      	lsls	r2, r2, #23
 8001246:	d400      	bmi.n	800124a <reg_wizchip_bus_cbfunc+0xa>
 8001248:	e7fe      	b.n	8001248 <reg_wizchip_bus_cbfunc+0x8>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 800124a:	b118      	cbz	r0, 8001254 <reg_wizchip_bus_cbfunc+0x14>
 800124c:	b111      	cbz	r1, 8001254 <reg_wizchip_bus_cbfunc+0x14>
 800124e:	e9c3 0107 	strd	r0, r1, [r3, #28]
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}
 8001252:	4770      	bx	lr
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8001254:	4903      	ldr	r1, [pc, #12]	; (8001264 <reg_wizchip_bus_cbfunc+0x24>)
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <reg_wizchip_bus_cbfunc+0x28>)
 8001258:	e9c3 0107 	strd	r0, r1, [r3, #28]
}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	24000004 	.word	0x24000004
 8001264:	08001231 	.word	0x08001231
 8001268:	08001229 	.word	0x08001229

0800126c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001270:	2008      	movs	r0, #8
{
 8001272:	b08b      	sub	sp, #44	; 0x2c
   getSHAR(mac);
 8001274:	f7ff fa1c 	bl	80006b0 <WIZCHIP_READ>
 8001278:	4602      	mov	r2, r0
 800127a:	2008      	movs	r0, #8
 800127c:	9209      	str	r2, [sp, #36]	; 0x24
 800127e:	f7ff fa17 	bl	80006b0 <WIZCHIP_READ>
 8001282:	4603      	mov	r3, r0
 8001284:	200a      	movs	r0, #10
 8001286:	9308      	str	r3, [sp, #32]
 8001288:	f7ff fa12 	bl	80006b0 <WIZCHIP_READ>
 800128c:	4683      	mov	fp, r0
 800128e:	200a      	movs	r0, #10
 8001290:	f7ff fa0e 	bl	80006b0 <WIZCHIP_READ>
 8001294:	4682      	mov	sl, r0
 8001296:	200c      	movs	r0, #12
 8001298:	f7ff fa0a 	bl	80006b0 <WIZCHIP_READ>
 800129c:	9000      	str	r0, [sp, #0]
 800129e:	200c      	movs	r0, #12
 80012a0:	f7ff fa06 	bl	80006b0 <WIZCHIP_READ>
 80012a4:	9001      	str	r0, [sp, #4]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80012a6:	2010      	movs	r0, #16
 80012a8:	f7ff fa02 	bl	80006b0 <WIZCHIP_READ>
 80012ac:	9002      	str	r0, [sp, #8]
 80012ae:	2010      	movs	r0, #16
 80012b0:	f7ff f9fe 	bl	80006b0 <WIZCHIP_READ>
 80012b4:	9003      	str	r0, [sp, #12]
 80012b6:	2012      	movs	r0, #18
 80012b8:	f7ff f9fa 	bl	80006b0 <WIZCHIP_READ>
 80012bc:	9004      	str	r0, [sp, #16]
 80012be:	2012      	movs	r0, #18
 80012c0:	f7ff f9f6 	bl	80006b0 <WIZCHIP_READ>
 80012c4:	9005      	str	r0, [sp, #20]
 80012c6:	2014      	movs	r0, #20
 80012c8:	f7ff f9f2 	bl	80006b0 <WIZCHIP_READ>
 80012cc:	9006      	str	r0, [sp, #24]
 80012ce:	2014      	movs	r0, #20
 80012d0:	f7ff f9ee 	bl	80006b0 <WIZCHIP_READ>
 80012d4:	9007      	str	r0, [sp, #28]
 80012d6:	2016      	movs	r0, #22
 80012d8:	f7ff f9ea 	bl	80006b0 <WIZCHIP_READ>
 80012dc:	4681      	mov	r9, r0
 80012de:	2016      	movs	r0, #22
 80012e0:	f7ff f9e6 	bl	80006b0 <WIZCHIP_READ>
 80012e4:	4680      	mov	r8, r0
 80012e6:	2018      	movs	r0, #24
 80012e8:	f7ff f9e2 	bl	80006b0 <WIZCHIP_READ>
 80012ec:	4607      	mov	r7, r0
 80012ee:	2018      	movs	r0, #24
 80012f0:	f7ff f9de 	bl	80006b0 <WIZCHIP_READ>
 80012f4:	4606      	mov	r6, r0
 80012f6:	201a      	movs	r0, #26
 80012f8:	f7ff f9da 	bl	80006b0 <WIZCHIP_READ>
 80012fc:	4605      	mov	r5, r0
 80012fe:	201a      	movs	r0, #26
 8001300:	f7ff f9d6 	bl	80006b0 <WIZCHIP_READ>
   setMR(MR_RST);
 8001304:	2180      	movs	r1, #128	; 0x80
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001306:	4604      	mov	r4, r0
   setMR(MR_RST);
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff f9bb 	bl	8000684 <WIZCHIP_WRITE>
   getMR(); // for delay
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff f9ce 	bl	80006b0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001316:	9b08      	ldr	r3, [sp, #32]
 8001318:	2008      	movs	r0, #8
 800131a:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 800131e:	fa51 f183 	uxtab	r1, r1, r3
 8001322:	b289      	uxth	r1, r1
 8001324:	f7ff f9ae 	bl	8000684 <WIZCHIP_WRITE>
 8001328:	f02b 01ff 	bic.w	r1, fp, #255	; 0xff
 800132c:	200a      	movs	r0, #10
 800132e:	fa51 f18a 	uxtab	r1, r1, sl
 8001332:	b289      	uxth	r1, r1
 8001334:	f7ff f9a6 	bl	8000684 <WIZCHIP_WRITE>
 8001338:	9b00      	ldr	r3, [sp, #0]
 800133a:	200c      	movs	r0, #12
 800133c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001340:	9b01      	ldr	r3, [sp, #4]
 8001342:	fa51 f183 	uxtab	r1, r1, r3
 8001346:	b289      	uxth	r1, r1
 8001348:	f7ff f99c 	bl	8000684 <WIZCHIP_WRITE>
   setGAR(gw);
 800134c:	9b02      	ldr	r3, [sp, #8]
 800134e:	2010      	movs	r0, #16
 8001350:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001354:	9b03      	ldr	r3, [sp, #12]
 8001356:	fa51 f183 	uxtab	r1, r1, r3
 800135a:	b289      	uxth	r1, r1
 800135c:	f7ff f992 	bl	8000684 <WIZCHIP_WRITE>
 8001360:	9b04      	ldr	r3, [sp, #16]
 8001362:	2012      	movs	r0, #18
 8001364:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001368:	9b05      	ldr	r3, [sp, #20]
 800136a:	fa51 f183 	uxtab	r1, r1, r3
 800136e:	b289      	uxth	r1, r1
 8001370:	f7ff f988 	bl	8000684 <WIZCHIP_WRITE>
   setSUBR(sn);
 8001374:	9b06      	ldr	r3, [sp, #24]
 8001376:	2014      	movs	r0, #20
 8001378:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800137c:	9b07      	ldr	r3, [sp, #28]
 800137e:	fa51 f183 	uxtab	r1, r1, r3
 8001382:	b289      	uxth	r1, r1
 8001384:	f7ff f97e 	bl	8000684 <WIZCHIP_WRITE>
 8001388:	f029 01ff 	bic.w	r1, r9, #255	; 0xff
 800138c:	2016      	movs	r0, #22
 800138e:	fa51 f188 	uxtab	r1, r1, r8
 8001392:	b289      	uxth	r1, r1
 8001394:	f7ff f976 	bl	8000684 <WIZCHIP_WRITE>
   setSIPR(sip);
 8001398:	f027 01ff 	bic.w	r1, r7, #255	; 0xff
 800139c:	2018      	movs	r0, #24
 800139e:	fa51 f186 	uxtab	r1, r1, r6
 80013a2:	b289      	uxth	r1, r1
 80013a4:	f7ff f96e 	bl	8000684 <WIZCHIP_WRITE>
 80013a8:	f025 01ff 	bic.w	r1, r5, #255	; 0xff
 80013ac:	201a      	movs	r0, #26
 80013ae:	fa51 f184 	uxtab	r1, r1, r4
 80013b2:	b289      	uxth	r1, r1
}
 80013b4:	b00b      	add	sp, #44	; 0x2c
 80013b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   setSIPR(sip);
 80013ba:	f7ff b963 	b.w	8000684 <WIZCHIP_WRITE>
 80013be:	bf00      	nop

080013c0 <ctlwizchip>:
{
 80013c0:	b510      	push	{r4, lr}
 80013c2:	460c      	mov	r4, r1
   switch(cwtype)
 80013c4:	2808      	cmp	r0, #8
 80013c6:	d841      	bhi.n	800144c <ctlwizchip+0x8c>
 80013c8:	e8df f000 	tbb	[pc, r0]
 80013cc:	49580544 	.word	0x49580544
 80013d0:	40406480 	.word	0x40406480
 80013d4:	70          	.byte	0x70
 80013d5:	00          	.byte	0x00
         if(arg != 0) 
 80013d6:	2900      	cmp	r1, #0
 80013d8:	d03c      	beq.n	8001454 <ctlwizchip+0x94>
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 80013da:	f7ff ff47 	bl	800126c <wizchip_sw_reset>
      tmp = 0;
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80013de:	7823      	ldrb	r3, [r4, #0]
 80013e0:	2b3f      	cmp	r3, #63	; 0x3f
 80013e2:	d833      	bhi.n	800144c <ctlwizchip+0x8c>
 80013e4:	7862      	ldrb	r2, [r4, #1]
 80013e6:	2a3f      	cmp	r2, #63	; 0x3f
 80013e8:	d830      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += txsize[i];
 80013ea:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80013ec:	78a2      	ldrb	r2, [r4, #2]
 80013ee:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 80013f0:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80013f2:	d82b      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += txsize[i];
 80013f4:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80013f6:	78e2      	ldrb	r2, [r4, #3]
 80013f8:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 80013fa:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80013fc:	d826      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += txsize[i];
 80013fe:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001400:	7922      	ldrb	r2, [r4, #4]
 8001402:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8001404:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001406:	d821      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += txsize[i];
 8001408:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800140a:	7962      	ldrb	r2, [r4, #5]
 800140c:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 800140e:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001410:	d81c      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += txsize[i];
 8001412:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001414:	79a2      	ldrb	r2, [r4, #6]
 8001416:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8001418:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800141a:	d817      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += txsize[i];
 800141c:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800141e:	79e2      	ldrb	r2, [r4, #7]
 8001420:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8001422:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001424:	d812      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += txsize[i];
 8001426:	4413      	add	r3, r2
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8001428:	075b      	lsls	r3, r3, #29
 800142a:	d10f      	bne.n	800144c <ctlwizchip+0x8c>
   {
      tmp = 0;
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800142c:	7a23      	ldrb	r3, [r4, #8]
 800142e:	2b3f      	cmp	r3, #63	; 0x3f
 8001430:	d80c      	bhi.n	800144c <ctlwizchip+0x8c>
 8001432:	7a62      	ldrb	r2, [r4, #9]
 8001434:	2a3f      	cmp	r2, #63	; 0x3f
 8001436:	d809      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += rxsize[i];
 8001438:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800143a:	7aa2      	ldrb	r2, [r4, #10]
 800143c:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 800143e:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001440:	d804      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += rxsize[i];
 8001442:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001444:	7ae2      	ldrb	r2, [r4, #11]
 8001446:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 8001448:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800144a:	d94d      	bls.n	80014e8 <ctlwizchip+0x128>
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001450:	4618      	mov	r0, r3
 8001452:	bd10      	pop	{r4, pc}
         wizchip_sw_reset();
 8001454:	f7ff ff0a 	bl	800126c <wizchip_sw_reset>
   return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd10      	pop	{r4, pc}
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800145e:	880b      	ldrh	r3, [r1, #0]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8001460:	2002      	movs	r0, #2
   uint8_t ir  = (uint8_t)intr;
 8001462:	b2da      	uxtb	r2, r3
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001464:	0a19      	lsrs	r1, r3, #8
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8001466:	f042 0310 	orr.w	r3, r2, #16
 800146a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800146e:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8001472:	f7ff f907 	bl	8000684 <WIZCHIP_WRITE>
   return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 800147c:	2002      	movs	r0, #2
 800147e:	f7ff f917 	bl	80006b0 <WIZCHIP_READ>
   return 0;
 8001482:	2300      	movs	r3, #0
   ir = (uint8_t)(ret >> 8);
 8001484:	0a02      	lsrs	r2, r0, #8
 8001486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 800148a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800148e:	8020      	strh	r0, [r4, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8001494:	2004      	movs	r0, #4
 8001496:	f7ff f90b 	bl	80006b0 <WIZCHIP_READ>
   return 0;
 800149a:	2300      	movs	r3, #0
   imr = (uint8_t)(ret >> 8);
 800149c:	0a02      	lsrs	r2, r0, #8
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 800149e:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 80014a2:	eb02 2000 	add.w	r0, r2, r0, lsl #8
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80014a6:	8020      	strh	r0, [r4, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd10      	pop	{r4, pc}
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80014ac:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <ctlwizchip+0x160>)
         ((uint8_t*)arg)[5] = 0;
 80014ae:	2100      	movs	r1, #0
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80014b0:	7890      	ldrb	r0, [r2, #2]
   return 0;
 80014b2:	460b      	mov	r3, r1
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80014b4:	7020      	strb	r0, [r4, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80014b6:	78d0      	ldrb	r0, [r2, #3]
 80014b8:	7060      	strb	r0, [r4, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80014ba:	7910      	ldrb	r0, [r2, #4]
 80014bc:	70a0      	strb	r0, [r4, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80014be:	7950      	ldrb	r0, [r2, #5]
 80014c0:	70e0      	strb	r0, [r4, #3]
}
 80014c2:	4618      	mov	r0, r3
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80014c4:	7992      	ldrb	r2, [r2, #6]
         ((uint8_t*)arg)[5] = 0;
 80014c6:	7161      	strb	r1, [r4, #5]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80014c8:	7122      	strb	r2, [r4, #4]
}
 80014ca:	bd10      	pop	{r4, pc}
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80014cc:	880b      	ldrh	r3, [r1, #0]
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 80014ce:	2004      	movs	r0, #4
 80014d0:	f003 02ef 	and.w	r2, r3, #239	; 0xef
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80014d4:	0a19      	lsrs	r1, r3, #8
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 80014d6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80014da:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 80014de:	f7ff f8d1 	bl	8000684 <WIZCHIP_WRITE>
   return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd10      	pop	{r4, pc}
			tmp += rxsize[i];
 80014e8:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80014ea:	7b22      	ldrb	r2, [r4, #12]
 80014ec:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 80014ee:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80014f0:	d8ac      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += rxsize[i];
 80014f2:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80014f4:	7b62      	ldrb	r2, [r4, #13]
 80014f6:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 80014f8:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80014fa:	d8a7      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += rxsize[i];
 80014fc:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80014fe:	7ba2      	ldrb	r2, [r4, #14]
 8001500:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 8001502:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001504:	d8a2      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += rxsize[i];
 8001506:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8001508:	7be2      	ldrb	r2, [r4, #15]
 800150a:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 800150c:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800150e:	d89d      	bhi.n	800144c <ctlwizchip+0x8c>
			tmp += rxsize[i];
 8001510:	4413      	add	r3, r2
		if(tmp % 8) return -1;
 8001512:	f013 0307 	ands.w	r3, r3, #7
 8001516:	bf18      	it	ne
 8001518:	2301      	movne	r3, #1
 800151a:	425b      	negs	r3, r3
 800151c:	e798      	b.n	8001450 <ctlwizchip+0x90>
 800151e:	bf00      	nop
 8001520:	24000004 	.word	0x24000004

08001524 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001524:	b510      	push	{r4, lr}
 8001526:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8001528:	2008      	movs	r0, #8
 800152a:	7823      	ldrb	r3, [r4, #0]
 800152c:	7861      	ldrb	r1, [r4, #1]
 800152e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001532:	b289      	uxth	r1, r1
 8001534:	f7ff f8a6 	bl	8000684 <WIZCHIP_WRITE>
 8001538:	78a3      	ldrb	r3, [r4, #2]
 800153a:	78e1      	ldrb	r1, [r4, #3]
 800153c:	200a      	movs	r0, #10
 800153e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001542:	b289      	uxth	r1, r1
 8001544:	f7ff f89e 	bl	8000684 <WIZCHIP_WRITE>
 8001548:	7923      	ldrb	r3, [r4, #4]
 800154a:	7961      	ldrb	r1, [r4, #5]
 800154c:	200c      	movs	r0, #12
 800154e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001552:	b289      	uxth	r1, r1
 8001554:	f7ff f896 	bl	8000684 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8001558:	7ba3      	ldrb	r3, [r4, #14]
 800155a:	7be1      	ldrb	r1, [r4, #15]
 800155c:	2010      	movs	r0, #16
 800155e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001562:	b289      	uxth	r1, r1
 8001564:	f7ff f88e 	bl	8000684 <WIZCHIP_WRITE>
 8001568:	7c23      	ldrb	r3, [r4, #16]
 800156a:	7c61      	ldrb	r1, [r4, #17]
 800156c:	2012      	movs	r0, #18
 800156e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001572:	b289      	uxth	r1, r1
 8001574:	f7ff f886 	bl	8000684 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8001578:	7aa3      	ldrb	r3, [r4, #10]
 800157a:	7ae1      	ldrb	r1, [r4, #11]
 800157c:	2014      	movs	r0, #20
 800157e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001582:	b289      	uxth	r1, r1
 8001584:	f7ff f87e 	bl	8000684 <WIZCHIP_WRITE>
 8001588:	7b23      	ldrb	r3, [r4, #12]
 800158a:	7b61      	ldrb	r1, [r4, #13]
 800158c:	2016      	movs	r0, #22
 800158e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8001592:	b289      	uxth	r1, r1
 8001594:	f7ff f876 	bl	8000684 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8001598:	79a3      	ldrb	r3, [r4, #6]
 800159a:	79e1      	ldrb	r1, [r4, #7]
 800159c:	2018      	movs	r0, #24
 800159e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80015a2:	b289      	uxth	r1, r1
 80015a4:	f7ff f86e 	bl	8000684 <WIZCHIP_WRITE>
 80015a8:	7a23      	ldrb	r3, [r4, #8]
 80015aa:	7a61      	ldrb	r1, [r4, #9]
 80015ac:	201a      	movs	r0, #26
 80015ae:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80015b2:	b289      	uxth	r1, r1
 80015b4:	f7ff f866 	bl	8000684 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 80015b8:	4903      	ldr	r1, [pc, #12]	; (80015c8 <wizchip_setnetinfo+0xa4>)
 80015ba:	f8d4 0012 	ldr.w	r0, [r4, #18]
   _DNS_[1] = pnetinfo->dns[1];
   _DNS_[2] = pnetinfo->dns[2];
   _DNS_[3] = pnetinfo->dns[3];
   _DHCP_   = pnetinfo->dhcp;
 80015be:	4b03      	ldr	r3, [pc, #12]	; (80015cc <wizchip_setnetinfo+0xa8>)
 80015c0:	7da2      	ldrb	r2, [r4, #22]
   _DNS_[0] = pnetinfo->dns[0];
 80015c2:	6008      	str	r0, [r1, #0]
   _DHCP_   = pnetinfo->dhcp;
 80015c4:	701a      	strb	r2, [r3, #0]
}
 80015c6:	bd10      	pop	{r4, pc}
 80015c8:	2400011c 	.word	0x2400011c
 80015cc:	24000118 	.word	0x24000118

080015d0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80015d0:	b510      	push	{r4, lr}
 80015d2:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 80015d4:	2008      	movs	r0, #8
 80015d6:	f7ff f86b 	bl	80006b0 <WIZCHIP_READ>
 80015da:	4603      	mov	r3, r0
 80015dc:	2008      	movs	r0, #8
 80015de:	40c3      	lsrs	r3, r0
 80015e0:	7023      	strb	r3, [r4, #0]
 80015e2:	f7ff f865 	bl	80006b0 <WIZCHIP_READ>
 80015e6:	4603      	mov	r3, r0
 80015e8:	200a      	movs	r0, #10
 80015ea:	7063      	strb	r3, [r4, #1]
 80015ec:	f7ff f860 	bl	80006b0 <WIZCHIP_READ>
 80015f0:	4603      	mov	r3, r0
 80015f2:	200a      	movs	r0, #10
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	70a3      	strb	r3, [r4, #2]
 80015f8:	f7ff f85a 	bl	80006b0 <WIZCHIP_READ>
 80015fc:	4603      	mov	r3, r0
 80015fe:	200c      	movs	r0, #12
 8001600:	70e3      	strb	r3, [r4, #3]
 8001602:	f7ff f855 	bl	80006b0 <WIZCHIP_READ>
 8001606:	4603      	mov	r3, r0
 8001608:	200c      	movs	r0, #12
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	7123      	strb	r3, [r4, #4]
 800160e:	f7ff f84f 	bl	80006b0 <WIZCHIP_READ>
 8001612:	4603      	mov	r3, r0
   getGAR(pnetinfo->gw);
 8001614:	2010      	movs	r0, #16
   getSHAR(pnetinfo->mac);
 8001616:	7163      	strb	r3, [r4, #5]
   getGAR(pnetinfo->gw);
 8001618:	f7ff f84a 	bl	80006b0 <WIZCHIP_READ>
 800161c:	4603      	mov	r3, r0
 800161e:	2010      	movs	r0, #16
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	73a3      	strb	r3, [r4, #14]
 8001624:	f7ff f844 	bl	80006b0 <WIZCHIP_READ>
 8001628:	4603      	mov	r3, r0
 800162a:	2012      	movs	r0, #18
 800162c:	73e3      	strb	r3, [r4, #15]
 800162e:	f7ff f83f 	bl	80006b0 <WIZCHIP_READ>
 8001632:	4603      	mov	r3, r0
 8001634:	2012      	movs	r0, #18
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	7423      	strb	r3, [r4, #16]
 800163a:	f7ff f839 	bl	80006b0 <WIZCHIP_READ>
 800163e:	4603      	mov	r3, r0
   getSUBR(pnetinfo->sn);
 8001640:	2014      	movs	r0, #20
   getGAR(pnetinfo->gw);
 8001642:	7463      	strb	r3, [r4, #17]
   getSUBR(pnetinfo->sn);
 8001644:	f7ff f834 	bl	80006b0 <WIZCHIP_READ>
 8001648:	4603      	mov	r3, r0
 800164a:	2014      	movs	r0, #20
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	72a3      	strb	r3, [r4, #10]
 8001650:	f7ff f82e 	bl	80006b0 <WIZCHIP_READ>
 8001654:	4603      	mov	r3, r0
 8001656:	2016      	movs	r0, #22
 8001658:	72e3      	strb	r3, [r4, #11]
 800165a:	f7ff f829 	bl	80006b0 <WIZCHIP_READ>
 800165e:	4603      	mov	r3, r0
 8001660:	2016      	movs	r0, #22
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	7323      	strb	r3, [r4, #12]
 8001666:	f7ff f823 	bl	80006b0 <WIZCHIP_READ>
 800166a:	4603      	mov	r3, r0
   getSIPR(pnetinfo->ip);
 800166c:	2018      	movs	r0, #24
   getSUBR(pnetinfo->sn);
 800166e:	7363      	strb	r3, [r4, #13]
   getSIPR(pnetinfo->ip);
 8001670:	f7ff f81e 	bl	80006b0 <WIZCHIP_READ>
 8001674:	4603      	mov	r3, r0
 8001676:	2018      	movs	r0, #24
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	71a3      	strb	r3, [r4, #6]
 800167c:	f7ff f818 	bl	80006b0 <WIZCHIP_READ>
 8001680:	4603      	mov	r3, r0
 8001682:	201a      	movs	r0, #26
 8001684:	71e3      	strb	r3, [r4, #7]
 8001686:	f7ff f813 	bl	80006b0 <WIZCHIP_READ>
 800168a:	4603      	mov	r3, r0
 800168c:	201a      	movs	r0, #26
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	7223      	strb	r3, [r4, #8]
 8001692:	f7ff f80d 	bl	80006b0 <WIZCHIP_READ>
   pnetinfo->dns[0]= _DNS_[0];
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <wizchip_getnetinfo+0xe4>)
   pnetinfo->dns[1]= _DNS_[1];
   pnetinfo->dns[2]= _DNS_[2];
   pnetinfo->dns[3]= _DNS_[3];
   pnetinfo->dhcp  = _DHCP_;
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <wizchip_getnetinfo+0xe8>)
   pnetinfo->dns[1]= _DNS_[1];
 800169a:	785a      	ldrb	r2, [r3, #1]
   pnetinfo->dhcp  = _DHCP_;
 800169c:	7809      	ldrb	r1, [r1, #0]
   getSIPR(pnetinfo->ip);
 800169e:	7260      	strb	r0, [r4, #9]
   pnetinfo->dns[1]= _DNS_[1];
 80016a0:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[0]= _DNS_[0];
 80016a2:	7818      	ldrb	r0, [r3, #0]
   pnetinfo->dns[2]= _DNS_[2];
 80016a4:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 80016a6:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[0]= _DNS_[0];
 80016a8:	74a0      	strb	r0, [r4, #18]
   pnetinfo->dhcp  = _DHCP_;
 80016aa:	75a1      	strb	r1, [r4, #22]
   pnetinfo->dns[2]= _DNS_[2];
 80016ac:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80016ae:	7563      	strb	r3, [r4, #21]
}
 80016b0:	bd10      	pop	{r4, pc}
 80016b2:	bf00      	nop
 80016b4:	2400011c 	.word	0x2400011c
 80016b8:	24000118 	.word	0x24000118

080016bc <ctlnetwork>:
{
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	460c      	mov	r4, r1
   switch(cntype)
 80016c0:	2805      	cmp	r0, #5
 80016c2:	d83a      	bhi.n	800173a <ctlnetwork+0x7e>
 80016c4:	e8df f000 	tbb	[pc, r0]
 80016c8:	2819140f 	.word	0x2819140f
 80016cc:	032f      	.short	0x032f
   setRTR(nettime->time_100us);
}

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
   nettime->retry_cnt = getRCR();
 80016ce:	201e      	movs	r0, #30
 80016d0:	f7fe ffee 	bl	80006b0 <WIZCHIP_READ>
 80016d4:	4603      	mov	r3, r0
   nettime->time_100us = getRTR();
 80016d6:	201c      	movs	r0, #28
   nettime->retry_cnt = getRCR();
 80016d8:	7023      	strb	r3, [r4, #0]
   nettime->time_100us = getRTR();
 80016da:	f7fe ffe9 	bl	80006b0 <WIZCHIP_READ>
 80016de:	4603      	mov	r3, r0
   return 0;
 80016e0:	2000      	movs	r0, #0
   nettime->time_100us = getRTR();
 80016e2:	8063      	strh	r3, [r4, #2]
}
 80016e4:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80016e6:	4608      	mov	r0, r1
 80016e8:	f7ff ff1c 	bl	8001524 <wizchip_setnetinfo>
   return 0;
 80016ec:	2000      	movs	r0, #0
}
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80016f0:	4608      	mov	r0, r1
 80016f2:	f7ff ff6d 	bl	80015d0 <wizchip_getnetinfo>
   return 0;
 80016f6:	2000      	movs	r0, #0
}
 80016f8:	bd38      	pop	{r3, r4, r5, pc}
         return wizchip_setnetmode(*(netmode_type*)arg);
 80016fa:	780d      	ldrb	r5, [r1, #0]
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 80016fc:	f035 0438 	bics.w	r4, r5, #56	; 0x38
 8001700:	d11b      	bne.n	800173a <ctlnetwork+0x7e>
   tmp = getMR();
 8001702:	4620      	mov	r0, r4
 8001704:	f7fe ffd4 	bl	80006b0 <WIZCHIP_READ>
 8001708:	4601      	mov	r1, r0
   setMR(tmp);
 800170a:	4620      	mov	r0, r4
   tmp = getMR();
 800170c:	b2c9      	uxtb	r1, r1
   setMR(tmp);
 800170e:	4329      	orrs	r1, r5
 8001710:	f7fe ffb8 	bl	8000684 <WIZCHIP_WRITE>
   return 0;
 8001714:	4620      	mov	r0, r4
}
 8001716:	bd38      	pop	{r3, r4, r5, pc}
   return (netmode_type) getMR();
 8001718:	2000      	movs	r0, #0
 800171a:	f7fe ffc9 	bl	80006b0 <WIZCHIP_READ>
 800171e:	4603      	mov	r3, r0
   return 0;
 8001720:	2000      	movs	r0, #0
   return (netmode_type) getMR();
 8001722:	7023      	strb	r3, [r4, #0]
}
 8001724:	bd38      	pop	{r3, r4, r5, pc}
   setRCR(nettime->retry_cnt);
 8001726:	7809      	ldrb	r1, [r1, #0]
 8001728:	201e      	movs	r0, #30
 800172a:	f7fe ffab 	bl	8000684 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800172e:	8861      	ldrh	r1, [r4, #2]
 8001730:	201c      	movs	r0, #28
 8001732:	f7fe ffa7 	bl	8000684 <WIZCHIP_WRITE>
   return 0;
 8001736:	2000      	movs	r0, #0
}
 8001738:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 800173a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800173e:	bd38      	pop	{r3, r4, r5, pc}

08001740 <W5300_write>:



void W5300_write(uint32_t addr, iodata_t wd)
{
	_W5300_DATA(addr) = wd;
 8001740:	0040      	lsls	r0, r0, #1
 8001742:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8001746:	8001      	strh	r1, [r0, #0]
}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
	return _W5300_DATA(addr);
 800174c:	0040      	lsls	r0, r0, #1
 800174e:	f100 40c8 	add.w	r0, r0, #1677721600	; 0x64000000
 8001752:	8800      	ldrh	r0, [r0, #0]
}
 8001754:	b280      	uxth	r0, r0
 8001756:	4770      	bx	lr

08001758 <CamImagTransferFrame.constprop.0>:
	{
		ret = send(_CAM_SOCK_NUM, (uint8_t *)data_buf, size+4);
	}
}

void CamImagTransferFrame(unsigned int Cmd, unsigned int Para)
 8001758:	b510      	push	{r4, lr}
  	data_buf[1] = 0;
  	data_buf[2] = Para>>8;
  	data_buf[3] = Para;


	if(gImgTransferFlag)
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <CamImagTransferFrame.constprop.0+0x48>)
void CamImagTransferFrame(unsigned int Cmd, unsigned int Para)
 800175c:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
  	data_buf[0] = Cmd;
 8001760:	22fa      	movs	r2, #250	; 0xfa
  	data_buf[1] = 0;
 8001762:	2400      	movs	r4, #0
  	data_buf[3] = Para;
 8001764:	f88d 0003 	strb.w	r0, [sp, #3]
  	data_buf[2] = Para>>8;
 8001768:	0a00      	lsrs	r0, r0, #8
	if(gImgTransferFlag)
 800176a:	681b      	ldr	r3, [r3, #0]
  	data_buf[0] = Cmd;
 800176c:	f88d 2000 	strb.w	r2, [sp]
  	data_buf[1] = 0;
 8001770:	f88d 4001 	strb.w	r4, [sp, #1]
  	data_buf[2] = Para>>8;
 8001774:	f88d 0002 	strb.w	r0, [sp, #2]
	if(gImgTransferFlag)
 8001778:	b913      	cbnz	r3, 8001780 <CamImagTransferFrame.constprop.0+0x28>
	{
		HAL_Delay(1);
		ret = send(_CAM_SOCK_NUM, data_buf, size+4);
		HAL_Delay(1);
	}
}
 800177a:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 800177e:	bd10      	pop	{r4, pc}
		HAL_Delay(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f001 f839 	bl	80027f8 <HAL_Delay>
		ret = send(_CAM_SOCK_NUM, data_buf, size+4);
 8001786:	f240 5204 	movw	r2, #1284	; 0x504
 800178a:	4669      	mov	r1, sp
 800178c:	4620      	mov	r0, r4
 800178e:	f7ff fb93 	bl	8000eb8 <send>
		HAL_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f001 f830 	bl	80027f8 <HAL_Delay>
}
 8001798:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 800179c:	bd10      	pop	{r4, pc}
 800179e:	bf00      	nop
 80017a0:	24000034 	.word	0x24000034

080017a4 <CamImagTransferLine.constprop.0>:
void CamImagTransferLine(unsigned int Cmd, unsigned int Para)
 80017a4:	b510      	push	{r4, lr}
  	data_buf[0] = Cmd;
 80017a6:	23fb      	movs	r3, #251	; 0xfb
void CamImagTransferLine(unsigned int Cmd, unsigned int Para)
 80017a8:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
  	data_buf[1] = 0;
 80017ac:	2400      	movs	r4, #0
  	memcpy((uint8_t *)&data_buf[4], (uint8_t *)&FrameBuffer, size);
 80017ae:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  	data_buf[0] = Cmd;
 80017b2:	f88d 3000 	strb.w	r3, [sp]
  	data_buf[2] = Para>>8;
 80017b6:	0a03      	lsrs	r3, r0, #8
  	data_buf[3] = Para;
 80017b8:	f88d 0003 	strb.w	r0, [sp, #3]
  	memcpy((uint8_t *)&data_buf[4], (uint8_t *)&FrameBuffer, size);
 80017bc:	a801      	add	r0, sp, #4
 80017be:	490b      	ldr	r1, [pc, #44]	; (80017ec <CamImagTransferLine.constprop.0+0x48>)
  	data_buf[2] = Para>>8;
 80017c0:	f88d 3002 	strb.w	r3, [sp, #2]
  	data_buf[1] = 0;
 80017c4:	f88d 4001 	strb.w	r4, [sp, #1]
  	memcpy((uint8_t *)&data_buf[4], (uint8_t *)&FrameBuffer, size);
 80017c8:	f006 f82e 	bl	8007828 <memcpy>
	if(gImgTransferFlag)
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <CamImagTransferLine.constprop.0+0x4c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b913      	cbnz	r3, 80017d8 <CamImagTransferLine.constprop.0+0x34>
}
 80017d2:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 80017d6:	bd10      	pop	{r4, pc}
		ret = send(_CAM_SOCK_NUM, (uint8_t *)data_buf, size+4);
 80017d8:	f240 5204 	movw	r2, #1284	; 0x504
 80017dc:	4669      	mov	r1, sp
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff fb6a 	bl	8000eb8 <send>
}
 80017e4:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	bf00      	nop
 80017ec:	24000120 	.word	0x24000120
 80017f0:	24000034 	.word	0x24000034

080017f4 <_write>:
#include "config.h"

int _write( int32_t file , uint8_t *ptr , int32_t len )
{
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Implement your write code here, this is used by puts and printf for example */
    for ( int16_t i = 0 ; i < len ; ++i )
 80017f6:	1e16      	subs	r6, r2, #0
 80017f8:	dd0d      	ble.n	8001816 <_write+0x22>
 80017fa:	460d      	mov	r5, r1
 80017fc:	2400      	movs	r4, #0
    {
        HAL_UART_Transmit( &huart1, ptr++, 1, 100);
 80017fe:	4f07      	ldr	r7, [pc, #28]	; (800181c <_write+0x28>)
 8001800:	3401      	adds	r4, #1
 8001802:	2201      	movs	r2, #1
 8001804:	4629      	mov	r1, r5
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	b224      	sxth	r4, r4
 800180a:	4638      	mov	r0, r7
 800180c:	4415      	add	r5, r2
 800180e:	f005 fd5d 	bl	80072cc <HAL_UART_Transmit>
    for ( int16_t i = 0 ; i < len ; ++i )
 8001812:	42b4      	cmp	r4, r6
 8001814:	dbf4      	blt.n	8001800 <_write+0xc>
    }
    return len;
}
 8001816:	4630      	mov	r0, r6
 8001818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800181a:	bf00      	nop
 800181c:	24000f94 	.word	0x24000f94

08001820 <print_network_information>:



void print_network_information(void)
{
 8001820:	b510      	push	{r4, lr}
    wizchip_getnetinfo(&gWIZNETINFO);
 8001822:	4c19      	ldr	r4, [pc, #100]	; (8001888 <print_network_information+0x68>)
{
 8001824:	b084      	sub	sp, #16
    wizchip_getnetinfo(&gWIZNETINFO);
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff fed2 	bl	80015d0 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800182c:	7961      	ldrb	r1, [r4, #5]
 800182e:	7922      	ldrb	r2, [r4, #4]
 8001830:	78e0      	ldrb	r0, [r4, #3]
 8001832:	78a3      	ldrb	r3, [r4, #2]
 8001834:	9000      	str	r0, [sp, #0]
 8001836:	4815      	ldr	r0, [pc, #84]	; (800188c <print_network_information+0x6c>)
 8001838:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800183c:	7862      	ldrb	r2, [r4, #1]
 800183e:	7821      	ldrb	r1, [r4, #0]
 8001840:	f006 f808 	bl	8007854 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8001844:	7a60      	ldrb	r0, [r4, #9]
 8001846:	7a23      	ldrb	r3, [r4, #8]
 8001848:	79e2      	ldrb	r2, [r4, #7]
 800184a:	79a1      	ldrb	r1, [r4, #6]
 800184c:	9000      	str	r0, [sp, #0]
 800184e:	4810      	ldr	r0, [pc, #64]	; (8001890 <print_network_information+0x70>)
 8001850:	f006 f800 	bl	8007854 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8001854:	7b60      	ldrb	r0, [r4, #13]
 8001856:	7b23      	ldrb	r3, [r4, #12]
 8001858:	7ae2      	ldrb	r2, [r4, #11]
 800185a:	7aa1      	ldrb	r1, [r4, #10]
 800185c:	9000      	str	r0, [sp, #0]
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <print_network_information+0x74>)
 8001860:	f005 fff8 	bl	8007854 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8001864:	7c60      	ldrb	r0, [r4, #17]
 8001866:	7c23      	ldrb	r3, [r4, #16]
 8001868:	7be2      	ldrb	r2, [r4, #15]
 800186a:	7ba1      	ldrb	r1, [r4, #14]
 800186c:	9000      	str	r0, [sp, #0]
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <print_network_information+0x78>)
 8001870:	f005 fff0 	bl	8007854 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8001874:	7d60      	ldrb	r0, [r4, #21]
 8001876:	7d23      	ldrb	r3, [r4, #20]
 8001878:	7ce2      	ldrb	r2, [r4, #19]
 800187a:	7ca1      	ldrb	r1, [r4, #18]
 800187c:	9000      	str	r0, [sp, #0]
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <print_network_information+0x7c>)
 8001880:	f005 ffe8 	bl	8007854 <iprintf>
}
 8001884:	b004      	add	sp, #16
 8001886:	bd10      	pop	{r4, pc}
 8001888:	24000038 	.word	0x24000038
 800188c:	08008874 	.word	0x08008874
 8001890:	080088a4 	.word	0x080088a4
 8001894:	080088c0 	.word	0x080088c0
 8001898:	080088dc 	.word	0x080088dc
 800189c:	080088f8 	.word	0x080088f8

080018a0 <_InitW5300>:

void _InitW5300(void);

void _InitW5300(void)
{
 80018a0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <_InitW5300+0x60>)
 80018aa:	f002 fe87 	bl	80045bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018ae:	200a      	movs	r0, #10
 80018b0:	f000 ffa2 	bl	80027f8 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ba:	4811      	ldr	r0, [pc, #68]	; (8001900 <_InitW5300+0x60>)
 80018bc:	f002 fe7e 	bl	80045bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80018c0:	2064      	movs	r0, #100	; 0x64
 80018c2:	f000 ff99 	bl	80027f8 <HAL_Delay>
	unsigned int tmpaddr[4];

	Reset_W5300();
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 80018c6:	490f      	ldr	r1, [pc, #60]	; (8001904 <_InitW5300+0x64>)
 80018c8:	480f      	ldr	r0, [pc, #60]	; (8001908 <_InitW5300+0x68>)
 80018ca:	f7ff fcb9 	bl	8001240 <reg_wizchip_bus_cbfunc>


	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 80018ce:	490f      	ldr	r1, [pc, #60]	; (800190c <_InitW5300+0x6c>)
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff fd75 	bl	80013c0 <ctlwizchip>
 80018d6:	3001      	adds	r0, #1
 80018d8:	d00e      	beq.n	80018f8 <_InitW5300+0x58>
	{
		printf("W5300 memory initialization failed\r\n");
	}

	printf("getMR() = %04X\r\n", getMR());
 80018da:	2000      	movs	r0, #0
 80018dc:	f7fe fee8 	bl	80006b0 <WIZCHIP_READ>
 80018e0:	4601      	mov	r1, r0
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <_InitW5300+0x70>)
 80018e4:	f005 ffb6 	bl	8007854 <iprintf>

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80018e8:	490a      	ldr	r1, [pc, #40]	; (8001914 <_InitW5300+0x74>)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fee6 	bl	80016bc <ctlnetwork>
	print_network_information();
}
 80018f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print_network_information();
 80018f4:	f7ff bf94 	b.w	8001820 <print_network_information>
		printf("W5300 memory initialization failed\r\n");
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <_InitW5300+0x78>)
 80018fa:	f006 f831 	bl	8007960 <puts>
 80018fe:	e7ec      	b.n	80018da <_InitW5300+0x3a>
 8001900:	58021c00 	.word	0x58021c00
 8001904:	08001741 	.word	0x08001741
 8001908:	0800174d 	.word	0x0800174d
 800190c:	24000050 	.word	0x24000050
 8001910:	08008938 	.word	0x08008938
 8001914:	24000038 	.word	0x24000038
 8001918:	08008914 	.word	0x08008914

0800191c <HAL_DCMI_FrameEventCallback>:


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{

}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop

08001920 <HAL_DCMI_VsyncEventCallback>:


void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
	gCameraFrameFlag++;
 8001920:	4a02      	ldr	r2, [pc, #8]	; (800192c <HAL_DCMI_VsyncEventCallback+0xc>)
 8001922:	6813      	ldr	r3, [r2, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	24000e20 	.word	0x24000e20

08001930 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
	gCameraLineFlag++;
 8001930:	4a02      	ldr	r2, [pc, #8]	; (800193c <HAL_DCMI_LineEventCallback+0xc>)
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	24000e24 	.word	0x24000e24

08001940 <CAMERA_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void CAMERA_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001940:	b510      	push	{r4, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	468e      	mov	lr, r1
  status = HAL_I2C_Mem_Write(&hI2C_Cam, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 8001946:	2301      	movs	r3, #1
 8001948:	4601      	mov	r1, r0
 800194a:	2464      	movs	r4, #100	; 0x64
 800194c:	f10d 0017 	add.w	r0, sp, #23
{
 8001950:	4694      	mov	ip, r2
  status = HAL_I2C_Mem_Write(&hI2C_Cam, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 8001952:	4672      	mov	r2, lr
 8001954:	9000      	str	r0, [sp, #0]
 8001956:	9402      	str	r4, [sp, #8]
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <CAMERA_IO_Write+0x28>)
 800195c:	f88d c017 	strb.w	ip, [sp, #23]
 8001960:	f003 f83c 	bl	80049dc <HAL_I2C_Mem_Write>
  I2Cx_Write(Addr, Reg, Value);
}
 8001964:	b006      	add	sp, #24
 8001966:	bd10      	pop	{r4, pc}
 8001968:	24000ef8 	.word	0x24000ef8

0800196c <CAMERA_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800196c:	b530      	push	{r4, r5, lr}
 800196e:	b087      	sub	sp, #28
 8001970:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hI2C_Cam, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8001972:	2301      	movs	r3, #1
 8001974:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001978:	f10d 0417 	add.w	r4, sp, #23
  uint8_t Value = 0;
 800197c:	2100      	movs	r1, #0
  status = HAL_I2C_Mem_Read(&hI2C_Cam, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 800197e:	9502      	str	r5, [sp, #8]
  uint8_t Value = 0;
 8001980:	f88d 1017 	strb.w	r1, [sp, #23]
  status = HAL_I2C_Mem_Read(&hI2C_Cam, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8001984:	4601      	mov	r1, r0
 8001986:	4804      	ldr	r0, [pc, #16]	; (8001998 <CAMERA_IO_Read+0x2c>)
 8001988:	e9cd 4300 	strd	r4, r3, [sp]
 800198c:	f003 f950 	bl	8004c30 <HAL_I2C_Mem_Read>
  return I2Cx_Read(Addr, Reg);
}
 8001990:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001994:	b007      	add	sp, #28
 8001996:	bd30      	pop	{r4, r5, pc}
 8001998:	24000ef8 	.word	0x24000ef8

0800199c <CAMERA_Delay>:
  * @brief  Camera delay
  * @param  Delay: Delay in ms
  */
void CAMERA_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800199c:	f000 bf2c 	b.w	80027f8 <HAL_Delay>

080019a0 <CAMERA_IO_Init>:
}

void CAMERA_IO_Init(void)
{
 80019a0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80019a2:	4c0d      	ldr	r4, [pc, #52]	; (80019d8 <CAMERA_IO_Init+0x38>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	2108      	movs	r1, #8
 80019a8:	4620      	mov	r0, r4
 80019aa:	f002 fe07 	bl	80045bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019ae:	200a      	movs	r0, #10
 80019b0:	f000 ff22 	bl	80027f8 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2108      	movs	r1, #8
 80019b8:	4620      	mov	r0, r4
 80019ba:	f002 fdff 	bl	80045bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019be:	200a      	movs	r0, #10
 80019c0:	f000 ff1a 	bl	80027f8 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80019c4:	4620      	mov	r0, r4
 80019c6:	2201      	movs	r2, #1
 80019c8:	2108      	movs	r1, #8
 80019ca:	f002 fdf7 	bl	80045bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80019ce:	2064      	movs	r0, #100	; 0x64
}
 80019d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 80019d4:	f000 bf10 	b.w	80027f8 <HAL_Delay>
 80019d8:	58021000 	.word	0x58021000

080019dc <_init_cam>:

void _init_cam(void)
{
 80019dc:	b500      	push	{lr}
	volatile uint32_t idc = ov2640_ReadID(CAMERA_I2C_ADDRESS);
 80019de:	2060      	movs	r0, #96	; 0x60
{
 80019e0:	b083      	sub	sp, #12
	volatile uint32_t idc = ov2640_ReadID(CAMERA_I2C_ADDRESS);
 80019e2:	f000 fba1 	bl	8002128 <ov2640_ReadID>
 80019e6:	4603      	mov	r3, r0
	printf("camera id = %x\r\n", idc);
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <_init_cam+0x24>)
	volatile uint32_t idc = ov2640_ReadID(CAMERA_I2C_ADDRESS);
 80019ea:	9301      	str	r3, [sp, #4]
	printf("camera id = %x\r\n", idc);
 80019ec:	9901      	ldr	r1, [sp, #4]
 80019ee:	f005 ff31 	bl	8007854 <iprintf>

	ov2640_Init(CAMERA_I2C_ADDRESS, CAMERA_R640x480);
 80019f2:	2103      	movs	r1, #3
 80019f4:	2060      	movs	r0, #96	; 0x60
}
 80019f6:	b003      	add	sp, #12
 80019f8:	f85d eb04 	ldr.w	lr, [sp], #4
	ov2640_Init(CAMERA_I2C_ADDRESS, CAMERA_R640x480);
 80019fc:	f000 bb36 	b.w	800206c <ov2640_Init>
 8001a00:	0800894c 	.word	0x0800894c

08001a04 <MPU_Config>:
{
 8001a04:	b510      	push	{r4, lr}
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a06:	2004      	movs	r0, #4
{
 8001a08:	b084      	sub	sp, #16
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a0a:	f000 ff8f 	bl	800292c <HAL_MPU_Enable>
  MPU_InitStruct.BaseAddress = 0x64000000;
 8001a0e:	f04f 44c8 	mov.w	r4, #1677721600	; 0x64000000
  HAL_MPU_Disable();
 8001a12:	f000 ff7d 	bl	8002910 <HAL_MPU_Disable>
  MPU_InitStruct.Enable=MPU_REGION_ENABLE;
 8001a16:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <MPU_Config+0x34>)
 8001a1a:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a1e:	4668      	mov	r0, sp
  MPU_InitStruct.Enable=MPU_REGION_ENABLE;
 8001a20:	f8ad 1000 	strh.w	r1, [sp]
  MPU_InitStruct.BaseAddress = 0x64000000;
 8001a24:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001a26:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a2a:	f000 ff8f 	bl	800294c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f000 ff7c 	bl	800292c <HAL_MPU_Enable>
}
 8001a34:	b004      	add	sp, #16
 8001a36:	bd10      	pop	{r4, pc}
 8001a38:	0300000f 	.word	0x0300000f

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b510      	push	{r4, lr}
 8001a3e:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a40:	224c      	movs	r2, #76	; 0x4c
 8001a42:	2100      	movs	r1, #0
 8001a44:	a80d      	add	r0, sp, #52	; 0x34
 8001a46:	f005 fefd 	bl	8007844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	a804      	add	r0, sp, #16
 8001a50:	f005 fef8 	bl	8007844 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a54:	2002      	movs	r0, #2
 8001a56:	f003 fa8d 	bl	8004f74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <SystemClock_Config+0x10c>)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4a3b      	ldr	r2, [pc, #236]	; (8001b4c <SystemClock_Config+0x110>)
 8001a60:	9101      	str	r1, [sp, #4]
 8001a62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a64:	f021 0101 	bic.w	r1, r1, #1
 8001a68:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	6993      	ldr	r3, [r2, #24]
 8001a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a78:	6193      	str	r3, [r2, #24]
 8001a7a:	6993      	ldr	r3, [r2, #24]
 8001a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a84:	6993      	ldr	r3, [r2, #24]
 8001a86:	0499      	lsls	r1, r3, #18
 8001a88:	d5fc      	bpl.n	8001a84 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <SystemClock_Config+0x114>)
 8001a8c:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8001a90:	f041 0102 	orr.w	r1, r1, #2
 8001a94:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a98:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001aa6:	9103      	str	r1, [sp, #12]
 8001aa8:	6991      	ldr	r1, [r2, #24]
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <SystemClock_Config+0x10c>)
 8001aac:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001ab0:	6191      	str	r1, [r2, #24]
 8001ab2:	6992      	ldr	r2, [r2, #24]
 8001ab4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001ab8:	9203      	str	r2, [sp, #12]
 8001aba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001abc:	4a23      	ldr	r2, [pc, #140]	; (8001b4c <SystemClock_Config+0x110>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001abe:	f041 0101 	orr.w	r1, r1, #1
 8001ac2:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	9303      	str	r3, [sp, #12]
 8001acc:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ace:	6993      	ldr	r3, [r2, #24]
 8001ad0:	049b      	lsls	r3, r3, #18
 8001ad2:	d5fc      	bpl.n	8001ace <SystemClock_Config+0x92>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad4:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ad6:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad8:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ada:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001adc:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ade:	a80d      	add	r0, sp, #52	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ae2:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ae4:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae6:	2140      	movs	r1, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae8:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aea:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001aec:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aee:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001af2:	230c      	movs	r3, #12
 8001af4:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001af6:	233c      	movs	r3, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001af8:	e9cd 221e 	strd	r2, r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001afc:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afe:	f003 fae1 	bl	80050c4 <HAL_RCC_OscConfig>
 8001b02:	b108      	cbz	r0, 8001b08 <SystemClock_Config+0xcc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <SystemClock_Config+0xca>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b08:	223f      	movs	r2, #63	; 0x3f
 8001b0a:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2308      	movs	r3, #8
 8001b18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001b1c:	2240      	movs	r2, #64	; 0x40
 8001b1e:	2340      	movs	r3, #64	; 0x40
 8001b20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b28:	2340      	movs	r3, #64	; 0x40
 8001b2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b2e:	f003 fe8f 	bl	8005850 <HAL_RCC_ClockConfig>
 8001b32:	4601      	mov	r1, r0
 8001b34:	b108      	cbz	r0, 8001b3a <SystemClock_Config+0xfe>
 8001b36:	b672      	cpsid	i
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <SystemClock_Config+0xfc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_6);
 8001b3a:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8001b3e:	f003 fd95 	bl	800566c <HAL_RCC_MCOConfig>
}
 8001b42:	b020      	add	sp, #128	; 0x80
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop
 8001b48:	58000400 	.word	0x58000400
 8001b4c:	58024800 	.word	0x58024800
 8001b50:	58024400 	.word	0x58024400
 8001b54:	00000000 	.word	0x00000000

08001b58 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b58:	4abf      	ldr	r2, [pc, #764]	; (8001e58 <main+0x300>)
 8001b5a:	6953      	ldr	r3, [r2, #20]
 8001b5c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 8001b60:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001b64:	b099      	sub	sp, #100	; 0x64
 8001b66:	d111      	bne.n	8001b8c <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b6c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b70:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b78:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001b7c:	6953      	ldr	r3, [r2, #20]
 8001b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b82:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b88:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b8c:	4cb3      	ldr	r4, [pc, #716]	; (8001e5c <main+0x304>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	2500      	movs	r5, #0
	MPU_Config();
 8001b90:	f7ff ff38 	bl	8001a04 <MPU_Config>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b94:	f04f 0800 	mov.w	r8, #0
  HAL_Init();
 8001b98:	f000 fdec 	bl	8002774 <HAL_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b9c:	f04f 0900 	mov.w	r9, #0
  SystemClock_Config();
 8001ba0:	f7ff ff4c 	bl	8001a3c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001ba6:	210c      	movs	r1, #12
 8001ba8:	462a      	mov	r2, r5
 8001baa:	48ad      	ldr	r0, [pc, #692]	; (8001e60 <main+0x308>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bac:	2704      	movs	r7, #4
  hdcmi.Instance = DCMI;
 8001bae:	4ead      	ldr	r6, [pc, #692]	; (8001e64 <main+0x30c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 8001bb4:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001bbc:	f043 0310 	orr.w	r3, r3, #16
 8001bc0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001bc4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bd0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001bd4:	f043 0320 	orr.w	r3, r3, #32
 8001bd8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001bdc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001bf4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	9303      	str	r3, [sp, #12]
 8001bfe:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001c0c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	9304      	str	r3, [sp, #16]
 8001c16:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001c24:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	9305      	str	r3, [sp, #20]
 8001c2e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c30:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c38:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001c3c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	9306      	str	r3, [sp, #24]
 8001c46:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c48:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001c54:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	9307      	str	r3, [sp, #28]
 8001c5e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c60:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c68:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001c6c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c74:	9308      	str	r3, [sp, #32]
 8001c76:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001c78:	f002 fca0 	bl	80045bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	2108      	movs	r1, #8
 8001c80:	4879      	ldr	r0, [pc, #484]	; (8001e68 <main+0x310>)
 8001c82:	f002 fc9b 	bl	80045bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c86:	462a      	mov	r2, r5
 8001c88:	2120      	movs	r1, #32
 8001c8a:	4878      	ldr	r0, [pc, #480]	; (8001e6c <main+0x314>)
 8001c8c:	f002 fc96 	bl	80045bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c90:	462a      	mov	r2, r5
 8001c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c96:	4876      	ldr	r0, [pc, #472]	; (8001e70 <main+0x318>)
 8001c98:	f002 fc90 	bl	80045bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca0:	a910      	add	r1, sp, #64	; 0x40
 8001ca2:	486f      	ldr	r0, [pc, #444]	; (8001e60 <main+0x308>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ca4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001ca8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cac:	f002 fb4c 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb4:	a910      	add	r1, sp, #64	; 0x40
 8001cb6:	486f      	ldr	r0, [pc, #444]	; (8001e74 <main+0x31c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cba:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cbe:	f002 fb43 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	a910      	add	r1, sp, #64	; 0x40
 8001cc8:	4867      	ldr	r0, [pc, #412]	; (8001e68 <main+0x310>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cca:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001cce:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f002 fb39 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	a910      	add	r1, sp, #64	; 0x40
 8001cdc:	4863      	ldr	r0, [pc, #396]	; (8001e6c <main+0x314>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cde:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001ce2:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f002 fb2f 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cea:	2204      	movs	r2, #4
 8001cec:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	a910      	add	r1, sp, #64	; 0x40
 8001cf0:	4861      	ldr	r0, [pc, #388]	; (8001e78 <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cf4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f002 fb26 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cfc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001d00:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	a910      	add	r1, sp, #64	; 0x40
 8001d04:	485c      	ldr	r0, [pc, #368]	; (8001e78 <main+0x320>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d06:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001d0c:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f002 fb1a 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d18:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	a910      	add	r1, sp, #64	; 0x40
 8001d1c:	4853      	ldr	r0, [pc, #332]	; (8001e6c <main+0x314>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d1e:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d20:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001d24:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f002 fb0e 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d30:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d32:	a910      	add	r1, sp, #64	; 0x40
 8001d34:	484e      	ldr	r0, [pc, #312]	; (8001e70 <main+0x318>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001d3a:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d3e:	f002 fb03 	bl	8004348 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d42:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 0);
 8001d46:	462a      	mov	r2, r5
 8001d48:	2101      	movs	r1, #1
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 0);
 8001d4e:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d50:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8001d54:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 0);
 8001d60:	f000 fd74 	bl	800284c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d64:	2039      	movs	r0, #57	; 0x39
 8001d66:	f000 fdaf 	bl	80028c8 <HAL_NVIC_EnableIRQ>
  hdcmi.Instance = DCMI;
 8001d6a:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <main+0x324>)
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001d6c:	4630      	mov	r0, r6
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001d6e:	6075      	str	r5, [r6, #4]
  hdcmi.Instance = DCMI;
 8001d70:	6033      	str	r3, [r6, #0]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001d72:	2320      	movs	r3, #32
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001d74:	60f5      	str	r5, [r6, #12]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001d76:	60b3      	str	r3, [r6, #8]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001d78:	61b5      	str	r5, [r6, #24]
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001d7a:	6335      	str	r5, [r6, #48]	; 0x30
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001d7c:	e9c6 5504 	strd	r5, r5, [r6, #16]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001d80:	e9c6 5508 	strd	r5, r5, [r6, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001d84:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001d88:	f000 fe58 	bl	8002a3c <HAL_DCMI_Init>
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	b108      	cbz	r0, 8001d94 <main+0x23c>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <main+0x23a>
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001d94:	483a      	ldr	r0, [pc, #232]	; (8001e80 <main+0x328>)
  hsram1.Init.MemoryDataWidth     = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001d96:	2310      	movs	r3, #16
  HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming);
 8001d98:	aa10      	add	r2, sp, #64	; 0x40
 8001d9a:	a909      	add	r1, sp, #36	; 0x24
  hsram1.Init.MemoryDataWidth     = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001d9c:	6143      	str	r3, [r0, #20]
  Timing.CLKDivision = 16;
 8001d9e:	930d      	str	r3, [sp, #52]	; 0x34
  ExtTiming.CLKDivision = 16;
 8001da0:	9314      	str	r3, [sp, #80]	; 0x50
  Timing.DataSetupTime    = 10;
 8001da2:	230a      	movs	r3, #10
  huart1.Instance = USART1;
 8001da4:	4d37      	ldr	r5, [pc, #220]	; (8001e84 <main+0x32c>)
  Timing.DataSetupTime    = 10;
 8001da6:	930b      	str	r3, [sp, #44]	; 0x2c
  ExtTiming.DataSetupTime     = 10;
 8001da8:	9312      	str	r3, [sp, #72]	; 0x48
  Timing.BusTurnAroundDuration = 5;
 8001daa:	2305      	movs	r3, #5
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001dac:	940f      	str	r4, [sp, #60]	; 0x3c
  Timing.BusTurnAroundDuration = 5;
 8001dae:	930c      	str	r3, [sp, #48]	; 0x30
  ExtTiming.BusTurnAroundDuration = 5;
 8001db0:	9313      	str	r3, [sp, #76]	; 0x4c
  Timing.DataLatency = 17;
 8001db2:	2311      	movs	r3, #17
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001db4:	9416      	str	r4, [sp, #88]	; 0x58
  Timing.DataLatency = 17;
 8001db6:	930e      	str	r3, [sp, #56]	; 0x38
  ExtTiming.DataLatency = 17;
 8001db8:	9315      	str	r3, [sp, #84]	; 0x54
  hsram1.Init.NSBank              = FMC_NORSRAM_BANK2;
 8001dba:	2302      	movs	r3, #2
  hsram1.Init.WaitSignalActive    = FMC_WAIT_TIMING_BEFORE_WS;
 8001dbc:	6204      	str	r4, [r0, #32]
  hsram1.Init.NSBank              = FMC_NORSRAM_BANK2;
 8001dbe:	6083      	str	r3, [r0, #8]
  hsram1.Init.WriteOperation      = FMC_WRITE_OPERATION_ENABLE;
 8001dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsram1.Init.WaitSignal          = FMC_WAIT_SIGNAL_DISABLE;
 8001dc4:	6284      	str	r4, [r0, #40]	; 0x28
  hsram1.Init.WriteOperation      = FMC_WRITE_OPERATION_ENABLE;
 8001dc6:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode        = FMC_EXTENDED_MODE_ENABLE;
 8001dc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hsram1.Init.ContinuousClock     = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001dcc:	6384      	str	r4, [r0, #56]	; 0x38
  hsram1.Init.ExtendedMode        = FMC_EXTENDED_MODE_ENABLE;
 8001dce:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsram1.Init.WriteFifo           = FMC_WRITE_FIFO_DISABLE;
 8001dd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hsram1.Init.PageSize            = FMC_PAGE_SIZE_NONE;
 8001dd4:	6404      	str	r4, [r0, #64]	; 0x40
  hsram1.Init.WriteFifo           = FMC_WRITE_FIFO_DISABLE;
 8001dd6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001dd8:	f20f 0974 	addw	r9, pc, #116	; 0x74
 8001ddc:	e9d9 8900 	ldrd	r8, r9, [r9]
  hsram1.Init.MemoryType          = FMC_MEMORY_TYPE_SRAM;
 8001de0:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001de4:	e9c0 8900 	strd	r8, r9, [r0]
  hsram1.Init.WaitSignalPolarity  = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001de8:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hsram1.Init.WriteBurst          = FMC_WRITE_BURST_DISABLE;
 8001dec:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
  Timing.AddressHoldTime  = 4;
 8001df0:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
  ExtTiming.AddressHoldTime   = 4;
 8001df4:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
  HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming);
 8001df8:	f004 fec8 	bl	8006b8c <HAL_SRAM_Init>
  huart1.Init.BaudRate = 115200;
 8001dfc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <main+0x330>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e02:	4628      	mov	r0, r5
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e04:	612c      	str	r4, [r5, #16]
  huart1.Init.BaudRate = 115200;
 8001e06:	e9c5 2300 	strd	r2, r3, [r5]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e10:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e14:	e9c5 4407 	strd	r4, r4, [r5, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e18:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e1c:	f005 fb22 	bl	8007464 <HAL_UART_Init>
 8001e20:	b108      	cbz	r0, 8001e26 <main+0x2ce>
 8001e22:	b672      	cpsid	i
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <main+0x2cc>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e26:	4601      	mov	r1, r0
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f005 fba5 	bl	8007578 <HAL_UARTEx_SetTxFifoThreshold>
 8001e2e:	b108      	cbz	r0, 8001e34 <main+0x2dc>
 8001e30:	b672      	cpsid	i
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <main+0x2da>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e34:	4601      	mov	r1, r0
 8001e36:	4628      	mov	r0, r5
 8001e38:	f005 fbe0 	bl	80075fc <HAL_UARTEx_SetRxFifoThreshold>
 8001e3c:	b108      	cbz	r0, 8001e42 <main+0x2ea>
 8001e3e:	b672      	cpsid	i
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <main+0x2e8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e42:	4628      	mov	r0, r5
 8001e44:	f005 fb7a 	bl	800753c <HAL_UARTEx_DisableFifoMode>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b1f8      	cbz	r0, 8001e8c <main+0x334>
 8001e4c:	b672      	cpsid	i
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <main+0x2f6>
 8001e50:	52004000 	.word	0x52004000
 8001e54:	52004104 	.word	0x52004104
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	58021000 	.word	0x58021000
 8001e64:	24000e30 	.word	0x24000e30
 8001e68:	58020800 	.word	0x58020800
 8001e6c:	58020000 	.word	0x58020000
 8001e70:	58021c00 	.word	0x58021c00
 8001e74:	58021400 	.word	0x58021400
 8001e78:	58020400 	.word	0x58020400
 8001e7c:	48020000 	.word	0x48020000
 8001e80:	24000f48 	.word	0x24000f48
 8001e84:	24000f94 	.word	0x24000f94
 8001e88:	40011000 	.word	0x40011000
  hi2c1.Instance = I2C1;
 8001e8c:	4c64      	ldr	r4, [pc, #400]	; (8002020 <main+0x4c8>)
 8001e8e:	4965      	ldr	r1, [pc, #404]	; (8002024 <main+0x4cc>)
  hi2c1.Init.Timing = 0x307075B1;
 8001e90:	4a65      	ldr	r2, [pc, #404]	; (8002028 <main+0x4d0>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e92:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x307075B1;
 8001e94:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e98:	2201      	movs	r2, #1
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e9a:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e9e:	e9c4 2303 	strd	r2, r3, [r4, #12]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea2:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea6:	f002 fd43 	bl	8004930 <HAL_I2C_Init>
 8001eaa:	4601      	mov	r1, r0
 8001eac:	b108      	cbz	r0, 8001eb2 <main+0x35a>
 8001eae:	b672      	cpsid	i
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <main+0x358>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f003 f808 	bl	8004ec8 <HAL_I2CEx_ConfigAnalogFilter>
 8001eb8:	4601      	mov	r1, r0
 8001eba:	b108      	cbz	r0, 8001ec0 <main+0x368>
 8001ebc:	b672      	cpsid	i
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <main+0x366>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f003 f82b 	bl	8004f1c <HAL_I2CEx_ConfigDigitalFilter>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	b108      	cbz	r0, 8001ece <main+0x376>
 8001eca:	b672      	cpsid	i
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <main+0x374>
  printf("W5300 camera Test\r\n");
 8001ece:	4857      	ldr	r0, [pc, #348]	; (800202c <main+0x4d4>)
 8001ed0:	f005 fd46 	bl	8007960 <puts>
  _init_cam();
 8001ed4:	f8df a180 	ldr.w	sl, [pc, #384]	; 8002058 <main+0x500>
 8001ed8:	f7ff fd80 	bl	80019dc <_init_cam>
  _InitW5300();
 8001edc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800205c <main+0x504>
 8001ee0:	f7ff fcde 	bl	80018a0 <_InitW5300>

void CameraStat(void)
{
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)&FrameBuffer, _IMAGE_SIZE_X*_UDP_TX_BUF_RATE/1);
 8001ee4:	4630      	mov	r0, r6
 8001ee6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001eea:	4621      	mov	r1, r4
 8001eec:	4a50      	ldr	r2, [pc, #320]	; (8002030 <main+0x4d8>)
 8001eee:	f8df b170 	ldr.w	fp, [pc, #368]	; 8002060 <main+0x508>
 8001ef2:	4f50      	ldr	r7, [pc, #320]	; (8002034 <main+0x4dc>)
 8001ef4:	4d50      	ldr	r5, [pc, #320]	; (8002038 <main+0x4e0>)
 8001ef6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002064 <main+0x50c>
 8001efa:	4e50      	ldr	r6, [pc, #320]	; (800203c <main+0x4e4>)
 8001efc:	f000 fdec 	bl	8002ad8 <HAL_DCMI_Start_DMA>
   switch(getSn_SR(sn))
 8001f00:	f44f 7002 	mov.w	r0, #520	; 0x208
		ProcessCamTcps(_CAM_SOCK_NUM, ethBuf0, dDestport);
 8001f04:	f8da 4000 	ldr.w	r4, [sl]
   switch(getSn_SR(sn))
 8001f08:	f7fe fbd2 	bl	80006b0 <WIZCHIP_READ>
 8001f0c:	b2c3      	uxtb	r3, r0
 8001f0e:	2b1c      	cmp	r3, #28
 8001f10:	d813      	bhi.n	8001f3a <main+0x3e2>
 8001f12:	e8df f003 	tbb	[pc, r3]
 8001f16:	1225      	.short	0x1225
 8001f18:	12121212 	.word	0x12121212
 8001f1c:	12121212 	.word	0x12121212
 8001f20:	12121212 	.word	0x12121212
 8001f24:	12121212 	.word	0x12121212
 8001f28:	12122112 	.word	0x12122112
 8001f2c:	12122c12 	.word	0x12122c12
 8001f30:	1212      	.short	0x1212
 8001f32:	0f          	.byte	0x0f
 8001f33:	00          	.byte	0x00
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7fe ff77 	bl	8000e28 <disconnect>
	  	if(gCameraFrameFlag>0)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d13a      	bne.n	8001fb6 <main+0x45e>
		if(gCameraLineFlag>0)
 8001f40:	6833      	ldr	r3, [r6, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0dc      	beq.n	8001f00 <main+0x3a8>
			gCameraLineFlag = 0;
 8001f46:	2300      	movs	r3, #0
			CamImagTransferLine(_CMD_CAM_LINE, gLineCnt);
 8001f48:	6828      	ldr	r0, [r5, #0]
			gCameraLineFlag = 0;
 8001f4a:	6033      	str	r3, [r6, #0]
			CamImagTransferLine(_CMD_CAM_LINE, gLineCnt);
 8001f4c:	f7ff fc2a 	bl	80017a4 <CamImagTransferLine.constprop.0>
			gLineCnt++;
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	602b      	str	r3, [r5, #0]
 8001f56:	e7d3      	b.n	8001f00 <main+0x3a8>
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7fe ff2b 	bl	8000db4 <listen>
 8001f5e:	e7ec      	b.n	8001f3a <main+0x3e2>
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8001f60:	2300      	movs	r3, #0
 8001f62:	b2a2      	uxth	r2, r4
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fe82 	bl	8000c70 <socket>
 8001f6c:	e7e5      	b.n	8001f3a <main+0x3e2>
         if(getSn_IR(sn) & Sn_IR_CON)
 8001f6e:	f240 2006 	movw	r0, #518	; 0x206
 8001f72:	f7fe fb9d 	bl	80006b0 <WIZCHIP_READ>
 8001f76:	07c3      	lsls	r3, r0, #31
 8001f78:	d432      	bmi.n	8001fe0 <main+0x488>
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7fe fc2c 	bl	80007d8 <getSn_RX_RSR>
 8001f80:	b280      	uxth	r0, r0
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d0d9      	beq.n	8001f3a <main+0x3e2>
			if(size > ETH_MAX_BUF_SIZE) size = ETH_MAX_BUF_SIZE;
 8001f86:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
			ret = recv(sn, buf, size);
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	bf28      	it	cs
 8001f8e:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 8001f92:	4604      	mov	r4, r0
 8001f94:	2000      	movs	r0, #0
 8001f96:	4622      	mov	r2, r4
 8001f98:	f7ff f838 	bl	800100c <recv>
			cmd = buf[0];
 8001f9c:	f899 3000 	ldrb.w	r3, [r9]
            if(cmd == _CMD_LED)
 8001fa0:	2bf0      	cmp	r3, #240	; 0xf0
 8001fa2:	d023      	beq.n	8001fec <main+0x494>
            else if(cmd == _CMD_CAM_START)
 8001fa4:	2bfe      	cmp	r3, #254	; 0xfe
 8001fa6:	d034      	beq.n	8002012 <main+0x4ba>
            else if(cmd == _CMD_CAM_STOP)
 8001fa8:	2bfd      	cmp	r3, #253	; 0xfd
 8001faa:	d02b      	beq.n	8002004 <main+0x4ac>
			printf("rx size=%d	\r\n", size);
 8001fac:	4621      	mov	r1, r4
 8001fae:	4824      	ldr	r0, [pc, #144]	; (8002040 <main+0x4e8>)
 8001fb0:	f005 fc50 	bl	8007854 <iprintf>
 8001fb4:	e7c1      	b.n	8001f3a <main+0x3e2>
	  		gCameraFrameFlag = 0;
 8001fb6:	2400      	movs	r4, #0
	  		CamImagTransferFrame(_CMD_CAM_FRAME, gLineCnt);
 8001fb8:	6828      	ldr	r0, [r5, #0]
	  		gCameraFrameFlag = 0;
 8001fba:	603c      	str	r4, [r7, #0]
	  		CamImagTransferFrame(_CMD_CAM_FRAME, gLineCnt);
 8001fbc:	f7ff fbcc 	bl	8001758 <CamImagTransferFrame.constprop.0>
	  		printf(">%d, %d\r\n", gFrameCnt, gLineCnt);
 8001fc0:	682a      	ldr	r2, [r5, #0]
 8001fc2:	f8d8 1000 	ldr.w	r1, [r8]
 8001fc6:	481f      	ldr	r0, [pc, #124]	; (8002044 <main+0x4ec>)
 8001fc8:	f005 fc44 	bl	8007854 <iprintf>
	  		printf("-------------------\r\n");
 8001fcc:	481e      	ldr	r0, [pc, #120]	; (8002048 <main+0x4f0>)
 8001fce:	f005 fcc7 	bl	8007960 <puts>
	  		gFrameCnt++;
 8001fd2:	f8d8 3000 	ldr.w	r3, [r8]
	  		gLineCnt = 0;
 8001fd6:	602c      	str	r4, [r5, #0]
	  		gFrameCnt++;
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f8c8 3000 	str.w	r3, [r8]
	  		gLineCnt = 0;
 8001fde:	e7af      	b.n	8001f40 <main+0x3e8>
			setSn_IR(sn,Sn_IR_CON);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	f240 2006 	movw	r0, #518	; 0x206
 8001fe6:	f7fe fb4d 	bl	8000684 <WIZCHIP_WRITE>
 8001fea:	e7c6      	b.n	8001f7a <main+0x422>
 8001fec:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8001ff0:	ba52      	rev16	r2, r2
 8001ff2:	b292      	uxth	r2, r2
            	if(para == 0)
 8001ff4:	b10a      	cbz	r2, 8001ffa <main+0x4a2>
            	else if(para == 1)
 8001ff6:	2a01      	cmp	r2, #1
 8001ff8:	d1d8      	bne.n	8001fac <main+0x454>
            		Led1On();
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	4813      	ldr	r0, [pc, #76]	; (800204c <main+0x4f4>)
 8001ffe:	f002 fadd 	bl	80045bc <HAL_GPIO_WritePin>
 8002002:	e7d3      	b.n	8001fac <main+0x454>
            	gImgTransferFlag = 0;
 8002004:	2300      	movs	r3, #0
            	printf("Cam Stream Stop\r\n");
 8002006:	4812      	ldr	r0, [pc, #72]	; (8002050 <main+0x4f8>)
            	gImgTransferFlag = 0;
 8002008:	f8cb 3000 	str.w	r3, [fp]
            	printf("Cam Stream Stop\r\n");
 800200c:	f005 fca8 	bl	8007960 <puts>
 8002010:	e7cc      	b.n	8001fac <main+0x454>
            	gImgTransferFlag = 1;
 8002012:	2301      	movs	r3, #1
            	printf("Cam Stream Start\r\n");
 8002014:	480f      	ldr	r0, [pc, #60]	; (8002054 <main+0x4fc>)
            	gImgTransferFlag = 1;
 8002016:	f8cb 3000 	str.w	r3, [fp]
            	printf("Cam Stream Start\r\n");
 800201a:	f005 fca1 	bl	8007960 <puts>
 800201e:	e7c5      	b.n	8001fac <main+0x454>
 8002020:	24000ef8 	.word	0x24000ef8
 8002024:	40005400 	.word	0x40005400
 8002028:	307075b1 	.word	0x307075b1
 800202c:	08008998 	.word	0x08008998
 8002030:	24000120 	.word	0x24000120
 8002034:	24000e20 	.word	0x24000e20
 8002038:	24000e2c 	.word	0x24000e2c
 800203c:	24000e24 	.word	0x24000e24
 8002040:	08008988 	.word	0x08008988
 8002044:	080089ac 	.word	0x080089ac
 8002048:	080089b8 	.word	0x080089b8
 800204c:	58020800 	.word	0x58020800
 8002050:	08008974 	.word	0x08008974
 8002054:	08008960 	.word	0x08008960
 8002058:	24000030 	.word	0x24000030
 800205c:	24000620 	.word	0x24000620
 8002060:	24000034 	.word	0x24000034
 8002064:	24000e28 	.word	0x24000e28

08002068 <Error_Handler>:
 8002068:	b672      	cpsid	i
  while (1)
 800206a:	e7fe      	b.n	800206a <Error_Handler+0x2>

0800206c <ov2640_Init>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  resolution: Camera resolution
  * @retval None
  */
void ov2640_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	4604      	mov	r4, r0
 8002070:	460d      	mov	r5, r1
  uint32_t index;
  
  /* Initialize I2C */
  CAMERA_IO_Init();
 8002072:	f7ff fc95 	bl	80019a0 <CAMERA_IO_Init>
  
  /* Prepare the camera to be configured */
  CAMERA_IO_Write(DeviceAddr, OV2640_DSP_RA_DLMT, 0x01);
 8002076:	2201      	movs	r2, #1
 8002078:	b2e4      	uxtb	r4, r4
 800207a:	21ff      	movs	r1, #255	; 0xff
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff fc5f 	bl	8001940 <CAMERA_IO_Write>
  CAMERA_IO_Write(DeviceAddr, OV2640_SENSOR_COM7, 0x80);
 8002082:	4620      	mov	r0, r4
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	2112      	movs	r1, #18
 8002088:	f7ff fc5a 	bl	8001940 <CAMERA_IO_Write>
  CAMERA_Delay(200);
 800208c:	20c8      	movs	r0, #200	; 0xc8
 800208e:	f7ff fc85 	bl	800199c <CAMERA_Delay>
  
  /* Initialize OV2640 */
  switch (resolution)
 8002092:	2d03      	cmp	r5, #3
 8002094:	d811      	bhi.n	80020ba <ov2640_Init+0x4e>
 8002096:	e8df f005 	tbb	[pc, r5]
 800209a:	202f      	.short	0x202f
 800209c:	0211      	.short	0x0211
 800209e:	4d1e      	ldr	r5, [pc, #120]	; (8002118 <ov2640_Init+0xac>)
 80020a0:	f505 76ed 	add.w	r6, r5, #474	; 0x1da
    }
  case CAMERA_R640x480:
    {
      for(index=0; index<(sizeof(OV2640_VGA)/2); index++)
      {
        CAMERA_IO_Write(DeviceAddr, OV2640_VGA[index][0], OV2640_VGA[index][1]);
 80020a4:	786a      	ldrb	r2, [r5, #1]
 80020a6:	4620      	mov	r0, r4
 80020a8:	f815 1b02 	ldrb.w	r1, [r5], #2
 80020ac:	f7ff fc48 	bl	8001940 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7ff fc73 	bl	800199c <CAMERA_Delay>
      for(index=0; index<(sizeof(OV2640_VGA)/2); index++)
 80020b6:	42b5      	cmp	r5, r6
 80020b8:	d1f4      	bne.n	80020a4 <ov2640_Init+0x38>
  default:
    {
      break;
    }
  }
}
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	4d17      	ldr	r5, [pc, #92]	; (800211c <ov2640_Init+0xb0>)
 80020be:	f505 76ed 	add.w	r6, r5, #474	; 0x1da
        CAMERA_IO_Write(DeviceAddr, OV2640_480x272[index][0], OV2640_480x272[index][1]);
 80020c2:	786a      	ldrb	r2, [r5, #1]
 80020c4:	4620      	mov	r0, r4
 80020c6:	f815 1b02 	ldrb.w	r1, [r5], #2
 80020ca:	f7ff fc39 	bl	8001940 <CAMERA_IO_Write>
        CAMERA_Delay(2);
 80020ce:	2002      	movs	r0, #2
 80020d0:	f7ff fc64 	bl	800199c <CAMERA_Delay>
      for(index=0; index<(sizeof(OV2640_480x272)/2); index++)
 80020d4:	42b5      	cmp	r5, r6
 80020d6:	d1f4      	bne.n	80020c2 <ov2640_Init+0x56>
}
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
 80020da:	4d11      	ldr	r5, [pc, #68]	; (8002120 <ov2640_Init+0xb4>)
 80020dc:	f505 76dc 	add.w	r6, r5, #440	; 0x1b8
        CAMERA_IO_Write(DeviceAddr, OV2640_QVGA[index][0], OV2640_QVGA[index][1]);
 80020e0:	786a      	ldrb	r2, [r5, #1]
 80020e2:	4620      	mov	r0, r4
 80020e4:	f815 1b02 	ldrb.w	r1, [r5], #2
 80020e8:	f7ff fc2a 	bl	8001940 <CAMERA_IO_Write>
        CAMERA_Delay(1);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff fc55 	bl	800199c <CAMERA_Delay>
      for(index=0; index<(sizeof(OV2640_QVGA)/2); index++)
 80020f2:	42b5      	cmp	r5, r6
 80020f4:	d1f4      	bne.n	80020e0 <ov2640_Init+0x74>
}
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	4d0a      	ldr	r5, [pc, #40]	; (8002124 <ov2640_Init+0xb8>)
 80020fa:	f505 76dc 	add.w	r6, r5, #440	; 0x1b8
        CAMERA_IO_Write(DeviceAddr, OV2640_QQVGA[index][0], OV2640_QQVGA[index][1]);
 80020fe:	786a      	ldrb	r2, [r5, #1]
 8002100:	4620      	mov	r0, r4
 8002102:	f815 1b02 	ldrb.w	r1, [r5], #2
 8002106:	f7ff fc1b 	bl	8001940 <CAMERA_IO_Write>
        CAMERA_Delay(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff fc46 	bl	800199c <CAMERA_Delay>
      for(index=0; index<(sizeof(OV2640_QQVGA)/2); index++)
 8002110:	42ae      	cmp	r6, r5
 8002112:	d1f4      	bne.n	80020fe <ov2640_Init+0x92>
}
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	bf00      	nop
 8002118:	08008f1c 	.word	0x08008f1c
 800211c:	080089d0 	.word	0x080089d0
 8002120:	08008d64 	.word	0x08008d64
 8002124:	08008bac 	.word	0x08008bac

08002128 <ov2640_ReadID>:
  * @brief  Read the OV2640 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV2640 ID
  */
uint16_t ov2640_ReadID(uint16_t DeviceAddr)
{
 8002128:	b510      	push	{r4, lr}
 800212a:	4604      	mov	r4, r0
 800212c:	b082      	sub	sp, #8
  /* Initialize I2C */
  CAMERA_IO_Init();
 800212e:	f7ff fc37 	bl	80019a0 <CAMERA_IO_Init>
  
  /* Prepare the sensor to read the Camera ID */
  CAMERA_IO_Write(DeviceAddr, OV2640_DSP_RA_DLMT, 0x01);
 8002132:	2201      	movs	r2, #1
 8002134:	b2e0      	uxtb	r0, r4
 8002136:	21ff      	movs	r1, #255	; 0xff
 8002138:	9001      	str	r0, [sp, #4]
 800213a:	f7ff fc01 	bl	8001940 <CAMERA_IO_Write>
  
  /* Get the camera ID */
  return (CAMERA_IO_Read(DeviceAddr, OV2640_SENSOR_PIDH));
 800213e:	210a      	movs	r1, #10
 8002140:	9801      	ldr	r0, [sp, #4]
 8002142:	f7ff fc13 	bl	800196c <CAMERA_IO_Read>
}
 8002146:	b280      	uxth	r0, r0
 8002148:	b002      	add	sp, #8
 800214a:	bd10      	pop	{r4, pc}

0800214c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <HAL_MspInit+0x20>)
{
 800214e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002150:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002154:	f042 0202 	orr.w	r2, r2, #2
 8002158:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800215c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002168:	b002      	add	sp, #8
 800216a:	4770      	bx	lr
 800216c:	58024400 	.word	0x58024400

08002170 <HAL_DCMI_MspInit>:
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdcmi->Instance==DCMI)
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <HAL_DCMI_MspInit+0x18c>)
 8002172:	6802      	ldr	r2, [r0, #0]
{
 8002174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hdcmi->Instance==DCMI)
 8002178:	429a      	cmp	r2, r3
{
 800217a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f04f 0400 	mov.w	r4, #0
 8002180:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002184:	9408      	str	r4, [sp, #32]
 8002186:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if(hdcmi->Instance==DCMI)
 800218a:	d002      	beq.n	8002192 <HAL_DCMI_MspInit+0x22>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800218c:	b00d      	add	sp, #52	; 0x34
 800218e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002192:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <HAL_DCMI_MspInit+0x190>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002194:	270d      	movs	r7, #13
 8002196:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002198:	485a      	ldr	r0, [pc, #360]	; (8002304 <HAL_DCMI_MspInit+0x194>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 800219a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800219e:	f04f 0800 	mov.w	r8, #0
 80021a2:	f04f 0900 	mov.w	r9, #0
    hdma_dcmi.Instance = DMA2_Stream1;
 80021a6:	4e58      	ldr	r6, [pc, #352]	; (8002308 <HAL_DCMI_MspInit+0x198>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80021b0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80021b4:	f002 0201 	and.w	r2, r2, #1
 80021b8:	9200      	str	r2, [sp, #0]
 80021ba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021c0:	f042 0210 	orr.w	r2, r2, #16
 80021c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80021c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021cc:	f002 0210 	and.w	r2, r2, #16
 80021d0:	9201      	str	r2, [sp, #4]
 80021d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80021e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021e4:	f002 0201 	and.w	r2, r2, #1
 80021e8:	9202      	str	r2, [sp, #8]
 80021ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80021f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021fc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002200:	9203      	str	r2, [sp, #12]
 8002202:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002204:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002208:	f042 0208 	orr.w	r2, r2, #8
 800220c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002210:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002214:	f002 0208 	and.w	r2, r2, #8
 8002218:	9204      	str	r2, [sp, #16]
 800221a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002220:	f042 0202 	orr.w	r2, r2, #2
 8002224:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002228:	2270      	movs	r2, #112	; 0x70
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800222e:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002236:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800223c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002240:	f002 f882 	bl	8004348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002244:	2250      	movs	r2, #80	; 0x50
 8002246:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	a906      	add	r1, sp, #24
 800224a:	4830      	ldr	r0, [pc, #192]	; (800230c <HAL_DCMI_MspInit+0x19c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800224c:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800224e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002252:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f002 f877 	bl	8004348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800225a:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
 800225e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002260:	a906      	add	r1, sp, #24
 8002262:	482b      	ldr	r0, [pc, #172]	; (8002310 <HAL_DCMI_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002264:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002266:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800226a:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800226e:	f002 f86b 	bl	8004348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002272:	2208      	movs	r2, #8
 8002274:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002276:	a906      	add	r1, sp, #24
 8002278:	4826      	ldr	r0, [pc, #152]	; (8002314 <HAL_DCMI_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800227a:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800227c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002280:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002284:	f002 f860 	bl	8004348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	4822      	ldr	r0, [pc, #136]	; (8002318 <HAL_DCMI_MspInit+0x1a8>)
 800228e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002290:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002292:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002296:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229a:	f002 f855 	bl	8004348 <HAL_GPIO_Init>
    hdma_dcmi.Instance = DMA2_Stream1;
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <HAL_DCMI_MspInit+0x1ac>)
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80022a0:	234b      	movs	r3, #75	; 0x4b
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80022a2:	4630      	mov	r0, r6
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80022a4:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80022a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b0:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80022b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022c0:	2304      	movs	r3, #4
 80022c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022c6:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80022ca:	2303      	movs	r3, #3
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80022cc:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022d0:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80022d4:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80022d6:	f000 fdc3 	bl	8002e60 <HAL_DMA_Init>
 80022da:	b960      	cbnz	r0, 80022f6 <HAL_DCMI_MspInit+0x186>
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	204e      	movs	r0, #78	; 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80022e0:	64ae      	str	r6, [r5, #72]	; 0x48
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80022e2:	4611      	mov	r1, r2
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80022e4:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80022e6:	f000 fab1 	bl	800284c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80022ea:	204e      	movs	r0, #78	; 0x4e
 80022ec:	f000 faec 	bl	80028c8 <HAL_NVIC_EnableIRQ>
}
 80022f0:	b00d      	add	sp, #52	; 0x34
 80022f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 80022f6:	f7ff feb7 	bl	8002068 <Error_Handler>
 80022fa:	e7ef      	b.n	80022dc <HAL_DCMI_MspInit+0x16c>
 80022fc:	48020000 	.word	0x48020000
 8002300:	58024400 	.word	0x58024400
 8002304:	58021000 	.word	0x58021000
 8002308:	24000e80 	.word	0x24000e80
 800230c:	58020000 	.word	0x58020000
 8002310:	58021c00 	.word	0x58021c00
 8002314:	58020c00 	.word	0x58020c00
 8002318:	58020400 	.word	0x58020400
 800231c:	40020428 	.word	0x40020428

08002320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002320:	b510      	push	{r4, lr}
 8002322:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	2100      	movs	r1, #0
{
 8002326:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002328:	22bc      	movs	r2, #188	; 0xbc
 800232a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	9106      	str	r1, [sp, #24]
 800232e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002332:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002336:	f005 fa85 	bl	8007844 <memset>
  if(hi2c->Instance==I2C1)
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <HAL_I2C_MspInit+0x98>)
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002342:	b036      	add	sp, #216	; 0xd8
 8002344:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002346:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002348:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800234a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800234c:	f003 fd6c 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 8002350:	bb40      	cbnz	r0, 80023a4 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4c1a      	ldr	r4, [pc, #104]	; (80023bc <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002354:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	a902      	add	r1, sp, #8
 8002358:	4819      	ldr	r0, [pc, #100]	; (80023c0 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002366:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800236a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800236c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002372:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80023b0 <HAL_I2C_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800237a:	2300      	movs	r3, #0
 800237c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002380:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	f001 ffe0 	bl	8004348 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002388:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800238c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002390:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8002394:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	9b01      	ldr	r3, [sp, #4]
}
 80023a0:	b036      	add	sp, #216	; 0xd8
 80023a2:	bd10      	pop	{r4, pc}
      Error_Handler();
 80023a4:	f7ff fe60 	bl	8002068 <Error_Handler>
 80023a8:	e7d3      	b.n	8002352 <HAL_I2C_MspInit+0x32>
 80023aa:	bf00      	nop
 80023ac:	f3af 8000 	nop.w
 80023b0:	00000240 	.word	0x00000240
 80023b4:	00000012 	.word	0x00000012
 80023b8:	40005400 	.word	0x40005400
 80023bc:	58024400 	.word	0x58024400
 80023c0:	58020400 	.word	0x58020400
 80023c4:	00000000 	.word	0x00000000

080023c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c8:	b510      	push	{r4, lr}
 80023ca:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	2100      	movs	r1, #0
{
 80023ce:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d0:	22bc      	movs	r2, #188	; 0xbc
 80023d2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	9106      	str	r1, [sp, #24]
 80023d6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80023da:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023de:	f005 fa31 	bl	8007844 <memset>
  if(huart->Instance==USART1)
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_UART_MspInit+0xa0>)
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023ea:	b036      	add	sp, #216	; 0xd8
 80023ec:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023ee:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f0:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023f2:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f4:	f003 fd18 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 80023f8:	bb40      	cbnz	r0, 800244c <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023fc:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	a902      	add	r1, sp, #8
 8002400:	481b      	ldr	r0, [pc, #108]	; (8002470 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002402:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002406:	f042 0210 	orr.w	r2, r2, #16
 800240a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800240e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002412:	f002 0210 	and.w	r2, r2, #16
 8002416:	9200      	str	r2, [sp, #0]
 8002418:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800242a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002430:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8002458 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002438:	ed8d 7b02 	vstr	d7, [sp, #8]
 800243c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8002460 <HAL_UART_MspInit+0x98>
 8002440:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f001 ff80 	bl	8004348 <HAL_GPIO_Init>
}
 8002448:	b036      	add	sp, #216	; 0xd8
 800244a:	bd10      	pop	{r4, pc}
      Error_Handler();
 800244c:	f7ff fe0c 	bl	8002068 <Error_Handler>
 8002450:	e7d3      	b.n	80023fa <HAL_UART_MspInit+0x32>
 8002452:	bf00      	nop
 8002454:	f3af 8000 	nop.w
 8002458:	00000600 	.word	0x00000600
 800245c:	00000002 	.word	0x00000002
	...
 8002468:	40011000 	.word	0x40011000
 800246c:	58024400 	.word	0x58024400
 8002470:	58020000 	.word	0x58020000

08002474 <HAL_SRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8002474:	482f      	ldr	r0, [pc, #188]	; (8002534 <HAL_SRAM_MspInit+0xc0>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002476:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002478:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 800247a:	6801      	ldr	r1, [r0, #0]
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800247c:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800247e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002482:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002486:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8002488:	b109      	cbz	r1, 800248e <HAL_SRAM_MspInit+0x1a>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800248a:	b036      	add	sp, #216	; 0xd8
 800248c:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 800248e:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002490:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8002492:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002494:	a808      	add	r0, sp, #32
 8002496:	f005 f9d5 	bl	8007844 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800249a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249e:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80024a0:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a2:	f003 fcc1 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	d141      	bne.n	800252e <HAL_SRAM_MspInit+0xba>
  __HAL_RCC_FMC_CLK_ENABLE();
 80024aa:	4b23      	ldr	r3, [pc, #140]	; (8002538 <HAL_SRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024ac:	f24f 003f 	movw	r0, #61503	; 0xf03f
 80024b0:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024b2:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80024b4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024b8:	2600      	movs	r6, #0
 80024ba:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80024bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80024c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024c8:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 80024ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80024d2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024d4:	a902      	add	r1, sp, #8
 80024d6:	4819      	ldr	r0, [pc, #100]	; (800253c <HAL_SRAM_MspInit+0xc8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80024d8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024da:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024de:	f001 ff33 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80024e2:	f64f 7280 	movw	r2, #65408	; 0xff80
 80024e6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e8:	a902      	add	r1, sp, #8
 80024ea:	4815      	ldr	r0, [pc, #84]	; (8002540 <HAL_SRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80024ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f6:	f001 ff27 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80024fa:	f24c 72b3 	movw	r2, #51123	; 0xc7b3
 80024fe:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002500:	a902      	add	r1, sp, #8
 8002502:	4810      	ldr	r0, [pc, #64]	; (8002544 <HAL_SRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002504:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002506:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800250a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250e:	f001 ff1b 	bl	8004348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002512:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002516:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002518:	a902      	add	r1, sp, #8
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <HAL_SRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800251c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800251e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002522:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002526:	f001 ff0f 	bl	8004348 <HAL_GPIO_Init>
}
 800252a:	b036      	add	sp, #216	; 0xd8
 800252c:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800252e:	f7ff fd9b 	bl	8002068 <Error_Handler>
 8002532:	e7ba      	b.n	80024aa <HAL_SRAM_MspInit+0x36>
 8002534:	24001024 	.word	0x24001024
 8002538:	58024400 	.word	0x58024400
 800253c:	58021400 	.word	0x58021400
 8002540:	58021000 	.word	0x58021000
 8002544:	58020c00 	.word	0x58020c00
 8002548:	58021800 	.word	0x58021800

0800254c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800254c:	e7fe      	b.n	800254c <NMI_Handler>
 800254e:	bf00      	nop

08002550 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <HardFault_Handler>
 8002552:	bf00      	nop

08002554 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler>
 8002556:	bf00      	nop

08002558 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <BusFault_Handler>
 800255a:	bf00      	nop

0800255c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler>
 800255e:	bf00      	nop

08002560 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <DebugMon_Handler>:
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop

08002568 <PendSV_Handler>:
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 b932 	b.w	80027d4 <HAL_IncTick>

08002570 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002570:	4801      	ldr	r0, [pc, #4]	; (8002578 <DMA2_Stream1_IRQHandler+0x8>)
 8002572:	f001 b945 	b.w	8003800 <HAL_DMA_IRQHandler>
 8002576:	bf00      	nop
 8002578:	24000e80 	.word	0x24000e80

0800257c <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800257c:	4801      	ldr	r0, [pc, #4]	; (8002584 <DCMI_IRQHandler+0x8>)
 800257e:	f000 bb3b 	b.w	8002bf8 <HAL_DCMI_IRQHandler>
 8002582:	bf00      	nop
 8002584:	24000e30 	.word	0x24000e30

08002588 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002588:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258a:	1e16      	subs	r6, r2, #0
 800258c:	dd07      	ble.n	800259e <_read+0x16>
 800258e:	460c      	mov	r4, r1
 8002590:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002592:	f3af 8000 	nop.w
 8002596:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259a:	42a5      	cmp	r5, r4
 800259c:	d1f9      	bne.n	8002592 <_read+0xa>
	}

return len;
}
 800259e:	4630      	mov	r0, r6
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
 80025a2:	bf00      	nop

080025a4 <_close>:
}

int _close(int file)
{
	return -1;
}
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop

080025ac <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80025ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80025b0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80025b2:	604b      	str	r3, [r1, #4]
}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80025b8:	2001      	movs	r0, #1
 80025ba:	4770      	bx	lr

080025bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80025bc:	2000      	movs	r0, #0
 80025be:	4770      	bx	lr

080025c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c0:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c2:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <_sbrk+0x38>)
{
 80025c4:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c6:	490d      	ldr	r1, [pc, #52]	; (80025fc <_sbrk+0x3c>)
 80025c8:	4d0d      	ldr	r5, [pc, #52]	; (8002600 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80025ca:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025cc:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80025ce:	b12a      	cbz	r2, 80025dc <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d0:	4413      	add	r3, r2
 80025d2:	428b      	cmp	r3, r1
 80025d4:	d808      	bhi.n	80025e8 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80025d6:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80025d8:	6023      	str	r3, [r4, #0]
}
 80025da:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80025dc:	4809      	ldr	r0, [pc, #36]	; (8002604 <_sbrk+0x44>)
 80025de:	4602      	mov	r2, r0
 80025e0:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	4413      	add	r3, r2
 80025e4:	428b      	cmp	r3, r1
 80025e6:	d9f6      	bls.n	80025d6 <_sbrk+0x16>
    errno = ENOMEM;
 80025e8:	f005 f8f4 	bl	80077d4 <__errno>
 80025ec:	230c      	movs	r3, #12
    return (void *)-1;
 80025ee:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80025f2:	6003      	str	r3, [r0, #0]
}
 80025f4:	4610      	mov	r0, r2
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	24001028 	.word	0x24001028
 80025fc:	24080000 	.word	0x24080000
 8002600:	00000400 	.word	0x00000400
 8002604:	24001040 	.word	0x24001040

08002608 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002608:	4927      	ldr	r1, [pc, #156]	; (80026a8 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800260a:	4a28      	ldr	r2, [pc, #160]	; (80026ac <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800260c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002614:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	2b06      	cmp	r3, #6
 8002622:	d805      	bhi.n	8002630 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	f023 030f 	bic.w	r3, r3, #15
 800262a:	f043 0307 	orr.w	r3, r3, #7
 800262e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002632:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002634:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8002636:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002638:	481c      	ldr	r0, [pc, #112]	; (80026ac <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800263a:	f041 0101 	orr.w	r1, r1, #1
 800263e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002640:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	400a      	ands	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002648:	6803      	ldr	r3, [r0, #0]
 800264a:	071b      	lsls	r3, r3, #28
 800264c:	d505      	bpl.n	800265a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	f023 030f 	bic.w	r3, r3, #15
 8002654:	f043 0307 	orr.w	r3, r3, #7
 8002658:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <SystemInit+0xa8>)
 800265c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800265e:	4916      	ldr	r1, [pc, #88]	; (80026b8 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8002660:	4c16      	ldr	r4, [pc, #88]	; (80026bc <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8002662:	4817      	ldr	r0, [pc, #92]	; (80026c0 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8002664:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8002666:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8002668:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800266a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800266c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800266e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002672:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002676:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002678:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800267a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800267c:	4c11      	ldr	r4, [pc, #68]	; (80026c4 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800267e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002682:	4911      	ldr	r1, [pc, #68]	; (80026c8 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8002684:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8002686:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	4019      	ands	r1, r3
 800268c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002690:	d203      	bcs.n	800269a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <SystemInit+0xc4>)
 8002694:	2201      	movs	r2, #1
 8002696:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <SystemInit+0xc8>)
 800269c:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026a4:	601a      	str	r2, [r3, #0]
}
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00
 80026ac:	52002000 	.word	0x52002000
 80026b0:	58024400 	.word	0x58024400
 80026b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80026b8:	01010280 	.word	0x01010280
 80026bc:	02020200 	.word	0x02020200
 80026c0:	01ff0000 	.word	0x01ff0000
 80026c4:	5c001000 	.word	0x5c001000
 80026c8:	ffff0000 	.word	0xffff0000
 80026cc:	51008000 	.word	0x51008000
 80026d0:	52004000 	.word	0x52004000

080026d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800270c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026d8:	f7ff ff96 	bl	8002608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026de:	490d      	ldr	r1, [pc, #52]	; (8002714 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026e0:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e4:	e002      	b.n	80026ec <LoopCopyDataInit>

080026e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ea:	3304      	adds	r3, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f0:	d3f9      	bcc.n	80026e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026f4:	4c0a      	ldr	r4, [pc, #40]	; (8002720 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f8:	e001      	b.n	80026fe <LoopFillZerobss>

080026fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026fc:	3204      	adds	r2, #4

080026fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002700:	d3fb      	bcc.n	80026fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002702:	f005 f86d 	bl	80077e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002706:	f7ff fa27 	bl	8001b58 <main>
  bx  lr
 800270a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800270c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002710:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002714:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 8002718:	0800921c 	.word	0x0800921c
  ldr r2, =_sbss
 800271c:	240000d8 	.word	0x240000d8
  ldr r4, =_ebss
 8002720:	24001040 	.word	0x24001040

08002724 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002724:	e7fe      	b.n	8002724 <ADC3_IRQHandler>
	...

08002728 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_InitTick+0x40>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b90b      	cbnz	r3, 8002732 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002730:	4770      	bx	lr
{
 8002732:	b510      	push	{r4, lr}
 8002734:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_InitTick+0x44>)
 800273c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002740:	6810      	ldr	r0, [r2, #0]
 8002742:	fbb0 f0f3 	udiv	r0, r0, r3
 8002746:	f000 f8cd 	bl	80028e4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	2c0f      	cmp	r4, #15
 800274c:	d800      	bhi.n	8002750 <HAL_InitTick+0x28>
 800274e:	b108      	cbz	r0, 8002754 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8002750:	2001      	movs	r0, #1
}
 8002752:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002754:	2200      	movs	r2, #0
 8002756:	4621      	mov	r1, r4
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f000 f876 	bl	800284c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_InitTick+0x48>)
 8002762:	2000      	movs	r0, #0
 8002764:	601c      	str	r4, [r3, #0]
}
 8002766:	bd10      	pop	{r4, pc}
 8002768:	24000068 	.word	0x24000068
 800276c:	24000060 	.word	0x24000060
 8002770:	2400006c 	.word	0x2400006c

08002774 <HAL_Init>:
{
 8002774:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002776:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002778:	4c12      	ldr	r4, [pc, #72]	; (80027c4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277a:	f000 f855 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800277e:	f002 ffc7 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_Init+0x54>)
 8002784:	4911      	ldr	r1, [pc, #68]	; (80027cc <HAL_Init+0x58>)
 8002786:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002788:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800278a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800278e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002792:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002794:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002796:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800279a:	490d      	ldr	r1, [pc, #52]	; (80027d0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800279c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027a0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027a2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80027a6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a8:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027aa:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ac:	f7ff ffbc 	bl	8002728 <HAL_InitTick>
 80027b0:	b110      	cbz	r0, 80027b8 <HAL_Init+0x44>
    return HAL_ERROR;
 80027b2:	2401      	movs	r4, #1
}
 80027b4:	4620      	mov	r0, r4
 80027b6:	bd10      	pop	{r4, pc}
 80027b8:	4604      	mov	r4, r0
  HAL_MspInit();
 80027ba:	f7ff fcc7 	bl	800214c <HAL_MspInit>
}
 80027be:	4620      	mov	r0, r4
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	bf00      	nop
 80027c4:	24000064 	.word	0x24000064
 80027c8:	58024400 	.word	0x58024400
 80027cc:	080090f8 	.word	0x080090f8
 80027d0:	24000060 	.word	0x24000060

080027d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80027d4:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_IncTick+0x10>)
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_IncTick+0x14>)
 80027d8:	6811      	ldr	r1, [r2, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	440b      	add	r3, r1
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	2400102c 	.word	0x2400102c
 80027e8:	24000068 	.word	0x24000068

080027ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027ec:	4b01      	ldr	r3, [pc, #4]	; (80027f4 <HAL_GetTick+0x8>)
 80027ee:	6818      	ldr	r0, [r3, #0]
}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	2400102c 	.word	0x2400102c

080027f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f8:	b538      	push	{r3, r4, r5, lr}
 80027fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff fff6 	bl	80027ec <HAL_GetTick>
 8002800:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002802:	1c63      	adds	r3, r4, #1
 8002804:	d002      	beq.n	800280c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_Delay+0x20>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280c:	f7ff ffee 	bl	80027ec <HAL_GetTick>
 8002810:	1b43      	subs	r3, r0, r5
 8002812:	42a3      	cmp	r3, r4
 8002814:	d3fa      	bcc.n	800280c <HAL_Delay+0x14>
  {
  }
}
 8002816:	bd38      	pop	{r3, r4, r5, pc}
 8002818:	24000068 	.word	0x24000068

0800281c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800281c:	4b01      	ldr	r3, [pc, #4]	; (8002824 <HAL_GetREVID+0x8>)
 800281e:	6818      	ldr	r0, [r3, #0]
}
 8002820:	0c00      	lsrs	r0, r0, #16
 8002822:	4770      	bx	lr
 8002824:	5c001000 	.word	0x5c001000

08002828 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4906      	ldr	r1, [pc, #24]	; (8002844 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002832:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002838:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800283e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002840:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00
 8002848:	05fa0000 	.word	0x05fa0000

0800284c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_NVIC_SetPriority+0x70>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002856:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800285e:	f1be 0f04 	cmp.w	lr, #4
 8002862:	bf28      	it	cs
 8002864:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002868:	f1bc 0f06 	cmp.w	ip, #6
 800286c:	d91a      	bls.n	80028a4 <HAL_NVIC_SetPriority+0x58>
 800286e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 3cff 	mov.w	ip, #4294967295
 8002874:	fa0c fc03 	lsl.w	ip, ip, r3
 8002878:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8002880:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002882:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002886:	ea21 010c 	bic.w	r1, r1, ip
 800288a:	fa01 f103 	lsl.w	r1, r1, r3
 800288e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002892:	db0a      	blt.n	80028aa <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	0109      	lsls	r1, r1, #4
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_NVIC_SetPriority+0x74>)
 8002898:	b2c9      	uxtb	r1, r1
 800289a:	4403      	add	r3, r0
 800289c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80028a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	4613      	mov	r3, r2
 80028a8:	e7e8      	b.n	800287c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	f000 000f 	and.w	r0, r0, #15
 80028ae:	0109      	lsls	r1, r1, #4
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_NVIC_SetPriority+0x78>)
 80028b2:	b2c9      	uxtb	r1, r1
 80028b4:	4403      	add	r3, r0
 80028b6:	7619      	strb	r1, [r3, #24]
 80028b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028bc:	e000ed00 	.word	0xe000ed00
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ecfc 	.word	0xe000ecfc

080028c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028c8:	2800      	cmp	r0, #0
 80028ca:	db07      	blt.n	80028dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028cc:	2301      	movs	r3, #1
 80028ce:	f000 011f 	and.w	r1, r0, #31
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <HAL_NVIC_EnableIRQ+0x18>)
 80028d4:	0940      	lsrs	r0, r0, #5
 80028d6:	408b      	lsls	r3, r1
 80028d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	1e43      	subs	r3, r0, #1
 80028e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ea:	d20c      	bcs.n	8002906 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ec:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f2:	4906      	ldr	r1, [pc, #24]	; (800290c <HAL_SYSTICK_Config+0x28>)
 80028f4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f8:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fa:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002902:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002904:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002910:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002916:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8002920:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_MPU_Enable+0x1c>)
 800292e:	f040 0001 	orr.w	r0, r0, #1
 8002932:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002938:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800293e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002942:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_MPU_ConfigRegion+0x60>)
 800294e:	7843      	ldrb	r3, [r0, #1]
 8002950:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8002954:	7801      	ldrb	r1, [r0, #0]
 8002956:	b321      	cbz	r1, 80029a2 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002958:	6843      	ldr	r3, [r0, #4]
{
 800295a:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 800295c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002960:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002962:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002966:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002968:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800296c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002970:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002974:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002976:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002978:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800297c:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002980:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002984:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002988:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800298c:	7a01      	ldrb	r1, [r0, #8]
 800298e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002992:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002996:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800299a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800299e:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 80029a2:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80029a6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80029b0:	b510      	push	{r4, lr}
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdcmi->XferCount != 0U)
 80029b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029b6:	b17b      	cbz	r3, 80029d8 <DCMI_DMAXferCplt+0x28>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80029b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80029be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80029c0:	0312      	lsls	r2, r2, #12
 80029c2:	d501      	bpl.n	80029c8 <DCMI_DMAXferCplt+0x18>
 80029c4:	07c9      	lsls	r1, r1, #31
 80029c6:	d535      	bpl.n	8002a34 <DCMI_DMAXferCplt+0x84>
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
      hdcmi->XferCount--;
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	0312      	lsls	r2, r2, #12
 80029cc:	d526      	bpl.n	8002a1c <DCMI_DMAXferCplt+0x6c>
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80029ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d00b      	beq.n	80029ee <DCMI_DMAXferCplt+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 80029d6:	bd10      	pop	{r4, pc}
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80029d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	6813      	ldr	r3, [r2, #0]
 80029de:	0318      	lsls	r0, r3, #12
 80029e0:	d511      	bpl.n	8002a06 <DCMI_DMAXferCplt+0x56>
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80029e2:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80029e6:	60d1      	str	r1, [r2, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80029e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d1f3      	bne.n	80029d6 <DCMI_DMAXferCplt+0x26>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	079b      	lsls	r3, r3, #30
 80029fc:	d5eb      	bpl.n	80029d6 <DCMI_DMAXferCplt+0x26>
      hdcmi->State = HAL_DCMI_STATE_READY;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002a04:	bd10      	pop	{r4, pc}
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002a06:	6813      	ldr	r3, [r2, #0]
 8002a08:	0319      	lsls	r1, r3, #12
 8002a0a:	d4e0      	bmi.n	80029ce <DCMI_DMAXferCplt+0x1e>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002a0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002a0e:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002a12:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002a16:	6111      	str	r1, [r2, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002a18:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a1a:	e7d9      	b.n	80029d0 <DCMI_DMAXferCplt+0x20>
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002a1c:	691b      	ldr	r3, [r3, #16]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002a22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002a26:	f001 fc81 	bl	800432c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002a2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hdcmi->XferCount--;
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	63a2      	str	r2, [r4, #56]	; 0x38
 8002a32:	e7cd      	b.n	80029d0 <DCMI_DMAXferCplt+0x20>
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002a34:	68db      	ldr	r3, [r3, #12]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002a3a:	e7f2      	b.n	8002a22 <DCMI_DMAXferCplt+0x72>

08002a3c <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d047      	beq.n	8002ad0 <HAL_DCMI_Init+0x94>
{
 8002a40:	b570      	push	{r4, r5, r6, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002a42:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002a46:	4604      	mov	r4, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d03e      	beq.n	8002aca <HAL_DCMI_Init+0x8e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002a4c:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002a4e:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002a50:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d134      	bne.n	8002ac2 <HAL_DCMI_Init+0x86>
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002a58:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002a5a:	6861      	ldr	r1, [r4, #4]
 8002a5c:	6966      	ldr	r6, [r4, #20]
 8002a5e:	430b      	orrs	r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002a60:	6822      	ldr	r2, [r4, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002a62:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002a64:	ea43 0306 	orr.w	r3, r3, r6
 8002a68:	68e6      	ldr	r6, [r4, #12]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002a6a:	6815      	ldr	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002a6c:	ea43 0306 	orr.w	r3, r3, r6
 8002a70:	6926      	ldr	r6, [r4, #16]
 8002a72:	ea43 0306 	orr.w	r3, r3, r6
 8002a76:	68a6      	ldr	r6, [r4, #8]
 8002a78:	ea43 0306 	orr.w	r3, r3, r6
 8002a7c:	6a26      	ldr	r6, [r4, #32]
 8002a7e:	ea43 0306 	orr.w	r3, r3, r6
 8002a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a84:	ea43 0306 	orr.w	r3, r3, r6
 8002a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a8a:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002a8e:	4e11      	ldr	r6, [pc, #68]	; (8002ad4 <HAL_DCMI_Init+0x98>)
 8002a90:	ea06 0605 	and.w	r6, r6, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002a94:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002a96:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002a98:	ea43 0305 	orr.w	r3, r3, r5
 8002a9c:	6815      	ldr	r5, [r2, #0]
 8002a9e:	ea43 0305 	orr.w	r3, r3, r5
 8002aa2:	ea43 0300 	orr.w	r3, r3, r0
 8002aa6:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002aa8:	d101      	bne.n	8002aae <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002aaa:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002aac:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002aae:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002ab0:	2000      	movs	r0, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002ab2:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ab4:	f043 031e 	orr.w	r3, r3, #30
 8002ab8:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002aba:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002abc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8002ac0:	bd70      	pop	{r4, r5, r6, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	6262      	str	r2, [r4, #36]	; 0x24
 8002ac8:	e7c7      	b.n	8002a5a <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 8002aca:	f7ff fb51 	bl	8002170 <HAL_DCMI_MspInit>
 8002ace:	e7bd      	b.n	8002a4c <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 8002ad0:	2001      	movs	r0, #1
}
 8002ad2:	4770      	bx	lr
 8002ad4:	ffe0f007 	.word	0xffe0f007

08002ad8 <HAL_DCMI_Start_DMA>:
{
 8002ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002adc:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 8002ade:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
{
 8002ae2:	b082      	sub	sp, #8
  __HAL_LOCK(hdcmi);
 8002ae4:	2801      	cmp	r0, #1
 8002ae6:	d06d      	beq.n	8002bc4 <HAL_DCMI_Start_DMA+0xec>
  __HAL_DCMI_ENABLE(hdcmi);
 8002ae8:	6825      	ldr	r5, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002aea:	2002      	movs	r0, #2
  __HAL_LOCK(hdcmi);
 8002aec:	f04f 0801 	mov.w	r8, #1
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002af0:	2600      	movs	r6, #0
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002af2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  if (Length <= 0xFFFFU)
 8002af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  __HAL_LOCK(hdcmi);
 8002afa:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 8002afe:	6828      	ldr	r0, [r5, #0]
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002b00:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8002bd0 <HAL_DCMI_Start_DMA+0xf8>
  __HAL_DCMI_ENABLE(hdcmi);
 8002b04:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8002b08:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002b0a:	6828      	ldr	r0, [r5, #0]
 8002b0c:	f020 0002 	bic.w	r0, r0, #2
 8002b10:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002b12:	6828      	ldr	r0, [r5, #0]
 8002b14:	ea41 0100 	orr.w	r1, r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002b18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002b1a:	6029      	str	r1, [r5, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002b1c:	492b      	ldr	r1, [pc, #172]	; (8002bcc <HAL_DCMI_Start_DMA+0xf4>)
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002b1e:	6506      	str	r6, [r0, #80]	; 0x50
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002b20:	63c1      	str	r1, [r0, #60]	; 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002b22:	f8c0 e04c 	str.w	lr, [r0, #76]	; 0x4c
  hdcmi->XferCount = 0;
 8002b26:	63a6      	str	r6, [r4, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8002b28:	6426      	str	r6, [r4, #64]	; 0x40
  hdcmi->XferSize = 0;
 8002b2a:	63e6      	str	r6, [r4, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8002b2c:	6466      	str	r6, [r4, #68]	; 0x44
  if (Length <= 0xFFFFU)
 8002b2e:	d32f      	bcc.n	8002b90 <HAL_DCMI_Start_DMA+0xb8>
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002b30:	6441      	str	r1, [r0, #68]	; 0x44
 8002b32:	4617      	mov	r7, r2
    hdcmi->XferCount = 1;
 8002b34:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    hdcmi->XferSize = Length;
 8002b38:	63e3      	str	r3, [r4, #60]	; 0x3c
    while (hdcmi->XferSize > 0xFFFFU)
 8002b3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002b3c:	6462      	str	r2, [r4, #68]	; 0x44
    while (hdcmi->XferSize > 0xFFFFU)
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b42:	d309      	bcc.n	8002b58 <HAL_DCMI_Start_DMA+0x80>
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002b44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002b4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	63a3      	str	r3, [r4, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b56:	d2f5      	bcs.n	8002b44 <HAL_DCMI_Start_DMA+0x6c>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002b5a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8002b5e:	463a      	mov	r2, r7
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002b60:	3b02      	subs	r3, #2
 8002b62:	63a3      	str	r3, [r4, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002b64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b66:	6423      	str	r3, [r4, #64]	; 0x40
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002b68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002b6a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002b6c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002b70:	9500      	str	r5, [sp, #0]
 8002b72:	f001 f9a3 	bl	8003ebc <HAL_DMAEx_MultiBufferStart_IT>
 8002b76:	b9c8      	cbnz	r0, 8002bac <HAL_DCMI_Start_DMA+0xd4>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002b78:	6821      	ldr	r1, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 8002b7a:	2200      	movs	r2, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002b7c:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 8002b7e:	4610      	mov	r0, r2
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 8002b86:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8002b8a:	b002      	add	sp, #8
 8002b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002b90:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8002b94:	f000 fbd2 	bl	800333c <HAL_DMA_Start_IT>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d0ed      	beq.n	8002b78 <HAL_DCMI_Start_DMA+0xa0>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002b9c:	2340      	movs	r3, #64	; 0x40
      return HAL_ERROR;
 8002b9e:	4640      	mov	r0, r8
      __HAL_UNLOCK(hdcmi);
 8002ba0:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002ba4:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002ba6:	f884 8035 	strb.w	r8, [r4, #53]	; 0x35
      return HAL_ERROR;
 8002baa:	e7ee      	b.n	8002b8a <HAL_DCMI_Start_DMA+0xb2>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002bac:	2301      	movs	r3, #1
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002bae:	2140      	movs	r1, #64	; 0x40
      __HAL_UNLOCK(hdcmi);
 8002bb0:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002bb2:	4618      	mov	r0, r3
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002bb4:	64e1      	str	r1, [r4, #76]	; 0x4c
      __HAL_UNLOCK(hdcmi);
 8002bb6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002bba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002bbe:	b002      	add	sp, #8
 8002bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdcmi);
 8002bc4:	2002      	movs	r0, #2
}
 8002bc6:	b002      	add	sp, #8
 8002bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bcc:	080029b1 	.word	0x080029b1
 8002bd0:	08002bd9 	.word	0x08002bd9

08002bd4 <HAL_DCMI_ErrorCallback>:
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop

08002bd8 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002bda:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002bdc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d006      	beq.n	8002bf2 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002bea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf0:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002bf2:	f7ff ffef 	bl	8002bd4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002bf6:	bd08      	pop	{r3, pc}

08002bf8 <HAL_DCMI_IRQHandler>:
{
 8002bf8:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002bfa:	6803      	ldr	r3, [r0, #0]
{
 8002bfc:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002bfe:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002c00:	0769      	lsls	r1, r5, #29
 8002c02:	d437      	bmi.n	8002c74 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002c04:	07aa      	lsls	r2, r5, #30
 8002c06:	d425      	bmi.n	8002c54 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002c08:	06eb      	lsls	r3, r5, #27
 8002c0a:	d41c      	bmi.n	8002c46 <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002c0c:	0728      	lsls	r0, r5, #28
 8002c0e:	d413      	bmi.n	8002c38 <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002c10:	07e9      	lsls	r1, r5, #31
 8002c12:	d510      	bpl.n	8002c36 <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	0792      	lsls	r2, r2, #30
 8002c1a:	d503      	bpl.n	8002c24 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	f022 021e 	bic.w	r2, r2, #30
 8002c22:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002c24:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002c26:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002c28:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002c30:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002c32:	f7fe fe73 	bl	800191c <HAL_DCMI_FrameEventCallback>
}
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002c3c:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002c3e:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002c40:	f7fe fe6e 	bl	8001920 <HAL_DCMI_VsyncEventCallback>
 8002c44:	e7e4      	b.n	8002c10 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 8002c4a:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002c4c:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8002c4e:	f7fe fe6f 	bl	8001930 <HAL_DCMI_LineEventCallback>
 8002c52:	e7db      	b.n	8002c0c <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002c58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002c5a:	2204      	movs	r2, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002c5c:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002c5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002c68:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002c6c:	6503      	str	r3, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002c6e:	f000 fcfd 	bl	800366c <HAL_DMA_Abort_IT>
 8002c72:	e7c9      	b.n	8002c08 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002c74:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002c76:	6c80      	ldr	r0, [r0, #72]	; 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002c78:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002c7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002c82:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002c84:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002c88:	6503      	str	r3, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002c8a:	f000 fcef 	bl	800366c <HAL_DMA_Abort_IT>
 8002c8e:	e7b9      	b.n	8002c04 <HAL_DCMI_IRQHandler+0xc>
 8002c90:	08002bd9 	.word	0x08002bd9

08002c94 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c94:	6802      	ldr	r2, [r0, #0]
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <DMA_CalcBaseAndBitshift+0xd4>)
 8002c98:	4934      	ldr	r1, [pc, #208]	; (8002d6c <DMA_CalcBaseAndBitshift+0xd8>)
{
 8002c9a:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c9c:	4d34      	ldr	r5, [pc, #208]	; (8002d70 <DMA_CalcBaseAndBitshift+0xdc>)
 8002c9e:	4c35      	ldr	r4, [pc, #212]	; (8002d74 <DMA_CalcBaseAndBitshift+0xe0>)
 8002ca0:	42aa      	cmp	r2, r5
 8002ca2:	bf18      	it	ne
 8002ca4:	429a      	cmpne	r2, r3
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	428a      	cmp	r2, r1
 8002cae:	bf08      	it	eq
 8002cb0:	f043 0301 	orreq.w	r3, r3, #1
 8002cb4:	3130      	adds	r1, #48	; 0x30
 8002cb6:	42a2      	cmp	r2, r4
 8002cb8:	bf08      	it	eq
 8002cba:	f043 0301 	orreq.w	r3, r3, #1
 8002cbe:	3430      	adds	r4, #48	; 0x30
 8002cc0:	428a      	cmp	r2, r1
 8002cc2:	bf08      	it	eq
 8002cc4:	f043 0301 	orreq.w	r3, r3, #1
 8002cc8:	3130      	adds	r1, #48	; 0x30
 8002cca:	42a2      	cmp	r2, r4
 8002ccc:	bf08      	it	eq
 8002cce:	f043 0301 	orreq.w	r3, r3, #1
 8002cd2:	3430      	adds	r4, #48	; 0x30
 8002cd4:	428a      	cmp	r2, r1
 8002cd6:	bf08      	it	eq
 8002cd8:	f043 0301 	orreq.w	r3, r3, #1
 8002cdc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002ce0:	42a2      	cmp	r2, r4
 8002ce2:	bf08      	it	eq
 8002ce4:	f043 0301 	orreq.w	r3, r3, #1
 8002ce8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002cec:	428a      	cmp	r2, r1
 8002cee:	bf08      	it	eq
 8002cf0:	f043 0301 	orreq.w	r3, r3, #1
 8002cf4:	3130      	adds	r1, #48	; 0x30
 8002cf6:	42a2      	cmp	r2, r4
 8002cf8:	bf08      	it	eq
 8002cfa:	f043 0301 	orreq.w	r3, r3, #1
 8002cfe:	3430      	adds	r4, #48	; 0x30
 8002d00:	428a      	cmp	r2, r1
 8002d02:	bf08      	it	eq
 8002d04:	f043 0301 	orreq.w	r3, r3, #1
 8002d08:	3130      	adds	r1, #48	; 0x30
 8002d0a:	42a2      	cmp	r2, r4
 8002d0c:	bf08      	it	eq
 8002d0e:	f043 0301 	orreq.w	r3, r3, #1
 8002d12:	3430      	adds	r4, #48	; 0x30
 8002d14:	428a      	cmp	r2, r1
 8002d16:	bf08      	it	eq
 8002d18:	f043 0301 	orreq.w	r3, r3, #1
 8002d1c:	3130      	adds	r1, #48	; 0x30
 8002d1e:	42a2      	cmp	r2, r4
 8002d20:	bf08      	it	eq
 8002d22:	f043 0301 	orreq.w	r3, r3, #1
 8002d26:	428a      	cmp	r2, r1
 8002d28:	bf08      	it	eq
 8002d2a:	f043 0301 	orreq.w	r3, r3, #1
 8002d2e:	b913      	cbnz	r3, 8002d36 <DMA_CalcBaseAndBitshift+0xa2>
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <DMA_CalcBaseAndBitshift+0xe4>)
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d113      	bne.n	8002d5e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d36:	b2d3      	uxtb	r3, r2
 8002d38:	4910      	ldr	r1, [pc, #64]	; (8002d7c <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d3a:	4c11      	ldr	r4, [pc, #68]	; (8002d80 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d3c:	3b10      	subs	r3, #16
 8002d3e:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8002d42:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d46:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002d4a:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d4e:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002d50:	bf88      	it	hi
 8002d52:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d54:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002d56:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bc30      	pop	{r4, r5}
 8002d5c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002d5e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8002d62:	6583      	str	r3, [r0, #88]	; 0x58
 8002d64:	e7f8      	b.n	8002d58 <DMA_CalcBaseAndBitshift+0xc4>
 8002d66:	bf00      	nop
 8002d68:	40020010 	.word	0x40020010
 8002d6c:	40020040 	.word	0x40020040
 8002d70:	40020028 	.word	0x40020028
 8002d74:	40020058 	.word	0x40020058
 8002d78:	400204b8 	.word	0x400204b8
 8002d7c:	aaaaaaab 	.word	0xaaaaaaab
 8002d80:	08009108 	.word	0x08009108
 8002d84:	fffffc00 	.word	0xfffffc00

08002d88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002d88:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d8a:	4a29      	ldr	r2, [pc, #164]	; (8002e30 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002d8c:	4929      	ldr	r1, [pc, #164]	; (8002e34 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8002d8e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d90:	4d29      	ldr	r5, [pc, #164]	; (8002e38 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002d92:	4c2a      	ldr	r4, [pc, #168]	; (8002e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8002d94:	42ab      	cmp	r3, r5
 8002d96:	bf18      	it	ne
 8002d98:	4293      	cmpne	r3, r2
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2201      	moveq	r2, #1
 8002d9e:	2200      	movne	r2, #0
 8002da0:	428b      	cmp	r3, r1
 8002da2:	bf08      	it	eq
 8002da4:	f042 0201 	orreq.w	r2, r2, #1
 8002da8:	3128      	adds	r1, #40	; 0x28
 8002daa:	42a3      	cmp	r3, r4
 8002dac:	bf08      	it	eq
 8002dae:	f042 0201 	orreq.w	r2, r2, #1
 8002db2:	3428      	adds	r4, #40	; 0x28
 8002db4:	428b      	cmp	r3, r1
 8002db6:	bf08      	it	eq
 8002db8:	f042 0201 	orreq.w	r2, r2, #1
 8002dbc:	3128      	adds	r1, #40	; 0x28
 8002dbe:	42a3      	cmp	r3, r4
 8002dc0:	bf08      	it	eq
 8002dc2:	f042 0201 	orreq.w	r2, r2, #1
 8002dc6:	428b      	cmp	r3, r1
 8002dc8:	bf08      	it	eq
 8002dca:	f042 0201 	orreq.w	r2, r2, #1
 8002dce:	b912      	cbnz	r2, 8002dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d113      	bne.n	8002dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	4c1a      	ldr	r4, [pc, #104]	; (8002e44 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002dda:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ddc:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002dde:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002de0:	4d1a      	ldr	r5, [pc, #104]	; (8002e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002de2:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002de6:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002de8:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002dec:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002df0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002df6:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002df8:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002dfa:	bc30      	pop	{r4, r5}
 8002dfc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dfe:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e00:	4913      	ldr	r1, [pc, #76]	; (8002e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e02:	4c14      	ldr	r4, [pc, #80]	; (8002e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e04:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e06:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e08:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e0a:	fba4 2302 	umull	r2, r3, r4, r2
 8002e0e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e12:	d800      	bhi.n	8002e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8002e14:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e18:	f003 051f 	and.w	r5, r3, #31
 8002e1c:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e1e:	4c0f      	ldr	r4, [pc, #60]	; (8002e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e20:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e22:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e24:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e26:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e28:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e2a:	6602      	str	r2, [r0, #96]	; 0x60
}
 8002e2c:	e7e5      	b.n	8002dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8002e2e:	bf00      	nop
 8002e30:	58025408 	.word	0x58025408
 8002e34:	58025430 	.word	0x58025430
 8002e38:	5802541c 	.word	0x5802541c
 8002e3c:	58025444 	.word	0x58025444
 8002e40:	58025494 	.word	0x58025494
 8002e44:	cccccccd 	.word	0xcccccccd
 8002e48:	16009600 	.word	0x16009600
 8002e4c:	58025880 	.word	0x58025880
 8002e50:	bffdfbf0 	.word	0xbffdfbf0
 8002e54:	aaaaaaab 	.word	0xaaaaaaab
 8002e58:	10008200 	.word	0x10008200
 8002e5c:	40020880 	.word	0x40020880

08002e60 <HAL_DMA_Init>:
{
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e64:	f7ff fcc2 	bl	80027ec <HAL_GetTick>
  if(hdma == NULL)
 8002e68:	2c00      	cmp	r4, #0
 8002e6a:	f000 8177 	beq.w	800315c <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	4605      	mov	r5, r0
 8002e72:	4a92      	ldr	r2, [pc, #584]	; (80030bc <HAL_DMA_Init+0x25c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d048      	beq.n	8002f0a <HAL_DMA_Init+0xaa>
 8002e78:	3218      	adds	r2, #24
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d045      	beq.n	8002f0a <HAL_DMA_Init+0xaa>
 8002e7e:	3230      	adds	r2, #48	; 0x30
 8002e80:	498f      	ldr	r1, [pc, #572]	; (80030c0 <HAL_DMA_Init+0x260>)
 8002e82:	428b      	cmp	r3, r1
 8002e84:	bf18      	it	ne
 8002e86:	4293      	cmpne	r3, r2
 8002e88:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2201      	moveq	r2, #1
 8002e90:	2200      	movne	r2, #0
 8002e92:	428b      	cmp	r3, r1
 8002e94:	bf08      	it	eq
 8002e96:	f042 0201 	orreq.w	r2, r2, #1
 8002e9a:	3118      	adds	r1, #24
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	bf08      	it	eq
 8002ea0:	f042 0201 	orreq.w	r2, r2, #1
 8002ea4:	3118      	adds	r1, #24
 8002ea6:	428b      	cmp	r3, r1
 8002ea8:	bf08      	it	eq
 8002eaa:	f042 0201 	orreq.w	r2, r2, #1
 8002eae:	3118      	adds	r1, #24
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	bf08      	it	eq
 8002eb4:	f042 0201 	orreq.w	r2, r2, #1
 8002eb8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	bf08      	it	eq
 8002ec0:	f042 0201 	orreq.w	r2, r2, #1
 8002ec4:	3118      	adds	r1, #24
 8002ec6:	428b      	cmp	r3, r1
 8002ec8:	bf08      	it	eq
 8002eca:	f042 0201 	orreq.w	r2, r2, #1
 8002ece:	3118      	adds	r1, #24
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	bf08      	it	eq
 8002ed4:	f042 0201 	orreq.w	r2, r2, #1
 8002ed8:	3118      	adds	r1, #24
 8002eda:	428b      	cmp	r3, r1
 8002edc:	bf08      	it	eq
 8002ede:	f042 0201 	orreq.w	r2, r2, #1
 8002ee2:	3118      	adds	r1, #24
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	bf08      	it	eq
 8002ee8:	f042 0201 	orreq.w	r2, r2, #1
 8002eec:	3118      	adds	r1, #24
 8002eee:	428b      	cmp	r3, r1
 8002ef0:	bf08      	it	eq
 8002ef2:	f042 0201 	orreq.w	r2, r2, #1
 8002ef6:	3118      	adds	r1, #24
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	bf08      	it	eq
 8002efc:	f042 0201 	orreq.w	r2, r2, #1
 8002f00:	b91a      	cbnz	r2, 8002f0a <HAL_DMA_Init+0xaa>
 8002f02:	4a70      	ldr	r2, [pc, #448]	; (80030c4 <HAL_DMA_Init+0x264>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	f040 8198 	bne.w	800323a <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 8002f0a:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f0c:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8002f0e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f12:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e006      	b.n	8002f2e <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f20:	f7ff fc64 	bl	80027ec <HAL_GetTick>
 8002f24:	1b43      	subs	r3, r0, r5
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	f200 80ff 	bhi.w	800312a <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	07d6      	lsls	r6, r2, #31
 8002f32:	d4f5      	bmi.n	8002f20 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8002f34:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f38:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8002f3a:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3c:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f3e:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f40:	4302      	orrs	r2, r0
 8002f42:	6960      	ldr	r0, [r4, #20]
 8002f44:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f46:	69e0      	ldr	r0, [r4, #28]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f4c:	485e      	ldr	r0, [pc, #376]	; (80030c8 <HAL_DMA_Init+0x268>)
 8002f4e:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f50:	6a25      	ldr	r5, [r4, #32]
 8002f52:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f54:	4d5d      	ldr	r5, [pc, #372]	; (80030cc <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 8002f56:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f5a:	2804      	cmp	r0, #4
 8002f5c:	f000 8100 	beq.w	8003160 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f60:	682e      	ldr	r6, [r5, #0]
 8002f62:	4d5b      	ldr	r5, [pc, #364]	; (80030d0 <HAL_DMA_Init+0x270>)
 8002f64:	4035      	ands	r5, r6
 8002f66:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8002f6a:	f080 80bb 	bcs.w	80030e4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f6e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f70:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f72:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8002f76:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f78:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f7ff fe8a 	bl	8002c94 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f80:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f82:	233f      	movs	r3, #63	; 0x3f
 8002f84:	f002 021f 	and.w	r2, r2, #31
 8002f88:	4093      	lsls	r3, r2
 8002f8a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_DMA_Init+0x25c>)
 8002f90:	4850      	ldr	r0, [pc, #320]	; (80030d4 <HAL_DMA_Init+0x274>)
 8002f92:	494b      	ldr	r1, [pc, #300]	; (80030c0 <HAL_DMA_Init+0x260>)
 8002f94:	4282      	cmp	r2, r0
 8002f96:	bf18      	it	ne
 8002f98:	429a      	cmpne	r2, r3
 8002f9a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	428a      	cmp	r2, r1
 8002fa6:	bf08      	it	eq
 8002fa8:	f043 0301 	orreq.w	r3, r3, #1
 8002fac:	3130      	adds	r1, #48	; 0x30
 8002fae:	4282      	cmp	r2, r0
 8002fb0:	bf08      	it	eq
 8002fb2:	f043 0301 	orreq.w	r3, r3, #1
 8002fb6:	3030      	adds	r0, #48	; 0x30
 8002fb8:	428a      	cmp	r2, r1
 8002fba:	bf08      	it	eq
 8002fbc:	f043 0301 	orreq.w	r3, r3, #1
 8002fc0:	3130      	adds	r1, #48	; 0x30
 8002fc2:	4282      	cmp	r2, r0
 8002fc4:	bf08      	it	eq
 8002fc6:	f043 0301 	orreq.w	r3, r3, #1
 8002fca:	3030      	adds	r0, #48	; 0x30
 8002fcc:	428a      	cmp	r2, r1
 8002fce:	bf08      	it	eq
 8002fd0:	f043 0301 	orreq.w	r3, r3, #1
 8002fd4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002fd8:	4282      	cmp	r2, r0
 8002fda:	bf08      	it	eq
 8002fdc:	f043 0301 	orreq.w	r3, r3, #1
 8002fe0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002fe4:	428a      	cmp	r2, r1
 8002fe6:	bf08      	it	eq
 8002fe8:	f043 0301 	orreq.w	r3, r3, #1
 8002fec:	3130      	adds	r1, #48	; 0x30
 8002fee:	4282      	cmp	r2, r0
 8002ff0:	bf08      	it	eq
 8002ff2:	f043 0301 	orreq.w	r3, r3, #1
 8002ff6:	3030      	adds	r0, #48	; 0x30
 8002ff8:	428a      	cmp	r2, r1
 8002ffa:	bf08      	it	eq
 8002ffc:	f043 0301 	orreq.w	r3, r3, #1
 8003000:	3130      	adds	r1, #48	; 0x30
 8003002:	4282      	cmp	r2, r0
 8003004:	bf08      	it	eq
 8003006:	f043 0301 	orreq.w	r3, r3, #1
 800300a:	3030      	adds	r0, #48	; 0x30
 800300c:	428a      	cmp	r2, r1
 800300e:	bf08      	it	eq
 8003010:	f043 0301 	orreq.w	r3, r3, #1
 8003014:	3130      	adds	r1, #48	; 0x30
 8003016:	4282      	cmp	r2, r0
 8003018:	bf08      	it	eq
 800301a:	f043 0301 	orreq.w	r3, r3, #1
 800301e:	3030      	adds	r0, #48	; 0x30
 8003020:	428a      	cmp	r2, r1
 8003022:	bf08      	it	eq
 8003024:	f043 0301 	orreq.w	r3, r3, #1
 8003028:	492b      	ldr	r1, [pc, #172]	; (80030d8 <HAL_DMA_Init+0x278>)
 800302a:	4282      	cmp	r2, r0
 800302c:	bf08      	it	eq
 800302e:	f043 0301 	orreq.w	r3, r3, #1
 8003032:	482a      	ldr	r0, [pc, #168]	; (80030dc <HAL_DMA_Init+0x27c>)
 8003034:	428a      	cmp	r2, r1
 8003036:	bf08      	it	eq
 8003038:	f043 0301 	orreq.w	r3, r3, #1
 800303c:	3128      	adds	r1, #40	; 0x28
 800303e:	4282      	cmp	r2, r0
 8003040:	bf08      	it	eq
 8003042:	f043 0301 	orreq.w	r3, r3, #1
 8003046:	3028      	adds	r0, #40	; 0x28
 8003048:	428a      	cmp	r2, r1
 800304a:	bf08      	it	eq
 800304c:	f043 0301 	orreq.w	r3, r3, #1
 8003050:	3128      	adds	r1, #40	; 0x28
 8003052:	4282      	cmp	r2, r0
 8003054:	bf08      	it	eq
 8003056:	f043 0301 	orreq.w	r3, r3, #1
 800305a:	3028      	adds	r0, #40	; 0x28
 800305c:	428a      	cmp	r2, r1
 800305e:	bf08      	it	eq
 8003060:	f043 0301 	orreq.w	r3, r3, #1
 8003064:	3128      	adds	r1, #40	; 0x28
 8003066:	4282      	cmp	r2, r0
 8003068:	bf08      	it	eq
 800306a:	f043 0301 	orreq.w	r3, r3, #1
 800306e:	428a      	cmp	r2, r1
 8003070:	bf08      	it	eq
 8003072:	f043 0301 	orreq.w	r3, r3, #1
 8003076:	b913      	cbnz	r3, 800307e <HAL_DMA_Init+0x21e>
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_DMA_Init+0x280>)
 800307a:	429a      	cmp	r2, r3
 800307c:	d118      	bne.n	80030b0 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800307e:	4620      	mov	r0, r4
 8003080:	f7ff fe82 	bl	8002d88 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d05c      	beq.n	8003144 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800308a:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800308c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800308e:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003090:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003092:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003096:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003098:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800309a:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800309c:	d859      	bhi.n	8003152 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800309e:	1e50      	subs	r0, r2, #1
 80030a0:	2807      	cmp	r0, #7
 80030a2:	d96e      	bls.n	8003182 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80030a6:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030aa:	2000      	movs	r0, #0
 80030ac:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ae:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80030b2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80030b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80030ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030bc:	40020010 	.word	0x40020010
 80030c0:	40020040 	.word	0x40020040
 80030c4:	400204b8 	.word	0x400204b8
 80030c8:	fe10803f 	.word	0xfe10803f
 80030cc:	5c001000 	.word	0x5c001000
 80030d0:	ffff0000 	.word	0xffff0000
 80030d4:	40020028 	.word	0x40020028
 80030d8:	58025408 	.word	0x58025408
 80030dc:	5802541c 	.word	0x5802541c
 80030e0:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80030e4:	6865      	ldr	r5, [r4, #4]
 80030e6:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 80030ea:	2e1f      	cmp	r6, #31
 80030ec:	d924      	bls.n	8003138 <HAL_DMA_Init+0x2d8>
 80030ee:	3d4f      	subs	r5, #79	; 0x4f
 80030f0:	2d03      	cmp	r5, #3
 80030f2:	d801      	bhi.n	80030f8 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 80030f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030f8:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030fa:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80030fc:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030fe:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8003102:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003106:	f47f af37 	bne.w	8002f78 <HAL_DMA_Init+0x118>
 800310a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800310c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800310e:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003110:	2d00      	cmp	r5, #0
 8003112:	f43f af31 	beq.w	8002f78 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003116:	2900      	cmp	r1, #0
 8003118:	d169      	bne.n	80031ee <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 800311a:	2801      	cmp	r0, #1
 800311c:	f000 8088 	beq.w	8003230 <HAL_DMA_Init+0x3d0>
 8003120:	f030 0102 	bics.w	r1, r0, #2
 8003124:	f47f af28 	bne.w	8002f78 <HAL_DMA_Init+0x118>
 8003128:	e069      	b.n	80031fe <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800312a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800312c:	2303      	movs	r3, #3
        return HAL_ERROR;
 800312e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003130:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003132:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003138:	4d73      	ldr	r5, [pc, #460]	; (8003308 <HAL_DMA_Init+0x4a8>)
 800313a:	fa25 f606 	lsr.w	r6, r5, r6
 800313e:	07f5      	lsls	r5, r6, #31
 8003140:	d5da      	bpl.n	80030f8 <HAL_DMA_Init+0x298>
 8003142:	e7d7      	b.n	80030f4 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003144:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003146:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003148:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800314c:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800314e:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003150:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8003152:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8003154:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003158:	6763      	str	r3, [r4, #116]	; 0x74
 800315a:	e7a9      	b.n	80030b0 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 800315c:	2001      	movs	r0, #1
}
 800315e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003160:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003162:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8003166:	432e      	orrs	r6, r5
 8003168:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800316a:	4e68      	ldr	r6, [pc, #416]	; (800330c <HAL_DMA_Init+0x4ac>)
 800316c:	403e      	ands	r6, r7
 800316e:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8003172:	d2b7      	bcs.n	80030e4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003174:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003176:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003178:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800317c:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003180:	e7c4      	b.n	800310c <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003182:	6821      	ldr	r1, [r4, #0]
 8003184:	4b62      	ldr	r3, [pc, #392]	; (8003310 <HAL_DMA_Init+0x4b0>)
 8003186:	4d63      	ldr	r5, [pc, #396]	; (8003314 <HAL_DMA_Init+0x4b4>)
 8003188:	42a9      	cmp	r1, r5
 800318a:	bf18      	it	ne
 800318c:	4299      	cmpne	r1, r3
 800318e:	f105 0514 	add.w	r5, r5, #20
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	42a9      	cmp	r1, r5
 800319a:	bf08      	it	eq
 800319c:	f043 0301 	orreq.w	r3, r3, #1
 80031a0:	3514      	adds	r5, #20
 80031a2:	42a9      	cmp	r1, r5
 80031a4:	bf08      	it	eq
 80031a6:	f043 0301 	orreq.w	r3, r3, #1
 80031aa:	3514      	adds	r5, #20
 80031ac:	42a9      	cmp	r1, r5
 80031ae:	bf08      	it	eq
 80031b0:	f043 0301 	orreq.w	r3, r3, #1
 80031b4:	3514      	adds	r5, #20
 80031b6:	42a9      	cmp	r1, r5
 80031b8:	bf08      	it	eq
 80031ba:	f043 0301 	orreq.w	r3, r3, #1
 80031be:	3514      	adds	r5, #20
 80031c0:	42a9      	cmp	r1, r5
 80031c2:	bf08      	it	eq
 80031c4:	f043 0301 	orreq.w	r3, r3, #1
 80031c8:	b93b      	cbnz	r3, 80031da <HAL_DMA_Init+0x37a>
 80031ca:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_DMA_Init+0x4b8>)
 80031cc:	4299      	cmp	r1, r3
 80031ce:	d004      	beq.n	80031da <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031d0:	4b52      	ldr	r3, [pc, #328]	; (800331c <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031d2:	4953      	ldr	r1, [pc, #332]	; (8003320 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031d8:	e003      	b.n	80031e2 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80031da:	4b52      	ldr	r3, [pc, #328]	; (8003324 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80031dc:	4952      	ldr	r1, [pc, #328]	; (8003328 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80031e2:	2201      	movs	r2, #1
 80031e4:	4082      	lsls	r2, r0
 80031e6:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80031ea:	6762      	str	r2, [r4, #116]	; 0x74
 80031ec:	e75d      	b.n	80030aa <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ee:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80031f2:	d00e      	beq.n	8003212 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 80031f4:	2802      	cmp	r0, #2
 80031f6:	d905      	bls.n	8003204 <HAL_DMA_Init+0x3a4>
 80031f8:	2803      	cmp	r0, #3
 80031fa:	f47f aebd 	bne.w	8002f78 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031fe:	01e9      	lsls	r1, r5, #7
 8003200:	f57f aeba 	bpl.w	8002f78 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 8003204:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003206:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8003208:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800320a:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800320c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8003212:	2803      	cmp	r0, #3
 8003214:	f63f aeb0 	bhi.w	8002f78 <HAL_DMA_Init+0x118>
 8003218:	a101      	add	r1, pc, #4	; (adr r1, 8003220 <HAL_DMA_Init+0x3c0>)
 800321a:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003205 	.word	0x08003205
 8003224:	080031ff 	.word	0x080031ff
 8003228:	08003205 	.word	0x08003205
 800322c:	08003231 	.word	0x08003231
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003230:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003234:	f47f aea0 	bne.w	8002f78 <HAL_DMA_Init+0x118>
 8003238:	e7e4      	b.n	8003204 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800323a:	4a35      	ldr	r2, [pc, #212]	; (8003310 <HAL_DMA_Init+0x4b0>)
 800323c:	4835      	ldr	r0, [pc, #212]	; (8003314 <HAL_DMA_Init+0x4b4>)
 800323e:	493b      	ldr	r1, [pc, #236]	; (800332c <HAL_DMA_Init+0x4cc>)
 8003240:	4283      	cmp	r3, r0
 8003242:	bf18      	it	ne
 8003244:	4293      	cmpne	r3, r2
 8003246:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800324a:	bf0c      	ite	eq
 800324c:	2201      	moveq	r2, #1
 800324e:	2200      	movne	r2, #0
 8003250:	428b      	cmp	r3, r1
 8003252:	bf08      	it	eq
 8003254:	f042 0201 	orreq.w	r2, r2, #1
 8003258:	3128      	adds	r1, #40	; 0x28
 800325a:	4283      	cmp	r3, r0
 800325c:	bf08      	it	eq
 800325e:	f042 0201 	orreq.w	r2, r2, #1
 8003262:	3028      	adds	r0, #40	; 0x28
 8003264:	428b      	cmp	r3, r1
 8003266:	bf08      	it	eq
 8003268:	f042 0201 	orreq.w	r2, r2, #1
 800326c:	3128      	adds	r1, #40	; 0x28
 800326e:	4283      	cmp	r3, r0
 8003270:	bf08      	it	eq
 8003272:	f042 0201 	orreq.w	r2, r2, #1
 8003276:	428b      	cmp	r3, r1
 8003278:	bf08      	it	eq
 800327a:	f042 0201 	orreq.w	r2, r2, #1
 800327e:	b912      	cbnz	r2, 8003286 <HAL_DMA_Init+0x426>
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <HAL_DMA_Init+0x4b8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d138      	bne.n	80032f8 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8003286:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003288:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800328a:	4d29      	ldr	r5, [pc, #164]	; (8003330 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003290:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003294:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003296:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003298:	68a2      	ldr	r2, [r4, #8]
 800329a:	2a40      	cmp	r2, #64	; 0x40
 800329c:	d02a      	beq.n	80032f4 <HAL_DMA_Init+0x494>
 800329e:	2a80      	cmp	r2, #128	; 0x80
 80032a0:	bf0c      	ite	eq
 80032a2:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 80032a6:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032a8:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032aa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80032ae:	08d2      	lsrs	r2, r2, #3
 80032b0:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032b4:	6961      	ldr	r1, [r4, #20]
 80032b6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032ba:	69a1      	ldr	r1, [r4, #24]
 80032bc:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032c0:	69e1      	ldr	r1, [r4, #28]
 80032c2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <HAL_DMA_Init+0x4d4>)
 80032c8:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80032cc:	4419      	add	r1, r3
 80032ce:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032d0:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032d2:	4819      	ldr	r0, [pc, #100]	; (8003338 <HAL_DMA_Init+0x4d8>)
 80032d4:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d8:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032da:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032dc:	090b      	lsrs	r3, r1, #4
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032e2:	f7ff fcd7 	bl	8002c94 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032e8:	2301      	movs	r3, #1
 80032ea:	f002 021f 	and.w	r2, r2, #31
 80032ee:	4093      	lsls	r3, r2
 80032f0:	6043      	str	r3, [r0, #4]
 80032f2:	e64b      	b.n	8002f8c <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032f4:	2010      	movs	r0, #16
 80032f6:	e7d7      	b.n	80032a8 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032f8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80032fa:	2303      	movs	r3, #3
    return HAL_ERROR;
 80032fc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032fe:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003300:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003306:	bf00      	nop
 8003308:	c3c0003f 	.word	0xc3c0003f
 800330c:	ffff0000 	.word	0xffff0000
 8003310:	58025408 	.word	0x58025408
 8003314:	5802541c 	.word	0x5802541c
 8003318:	58025494 	.word	0x58025494
 800331c:	1000823f 	.word	0x1000823f
 8003320:	40020940 	.word	0x40020940
 8003324:	1600963f 	.word	0x1600963f
 8003328:	58025940 	.word	0x58025940
 800332c:	58025430 	.word	0x58025430
 8003330:	fffe000f 	.word	0xfffe000f
 8003334:	a7fdabf8 	.word	0xa7fdabf8
 8003338:	cccccccd 	.word	0xcccccccd

0800333c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800333c:	2800      	cmp	r0, #0
 800333e:	f000 8177 	beq.w	8003630 <HAL_DMA_Start_IT+0x2f4>
 8003342:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8003344:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003348:	2801      	cmp	r0, #1
 800334a:	f000 8173 	beq.w	8003634 <HAL_DMA_Start_IT+0x2f8>
 800334e:	2001      	movs	r0, #1
{
 8003350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8003354:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8003358:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800335c:	4284      	cmp	r4, r0
 800335e:	d008      	beq.n	8003372 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003360:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8003364:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003366:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800336a:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 800336e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003372:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8003374:	f8dc 4000 	ldr.w	r4, [ip]
 8003378:	4d53      	ldr	r5, [pc, #332]	; (80034c8 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800337a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003380:	4e52      	ldr	r6, [pc, #328]	; (80034cc <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003382:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8003386:	4852      	ldr	r0, [pc, #328]	; (80034d0 <HAL_DMA_Start_IT+0x194>)
 8003388:	42ac      	cmp	r4, r5
 800338a:	bf18      	it	ne
 800338c:	4284      	cmpne	r4, r0
 800338e:	f105 0518 	add.w	r5, r5, #24
 8003392:	bf0c      	ite	eq
 8003394:	2001      	moveq	r0, #1
 8003396:	2000      	movne	r0, #0
 8003398:	42ac      	cmp	r4, r5
 800339a:	bf08      	it	eq
 800339c:	f040 0001 	orreq.w	r0, r0, #1
 80033a0:	3518      	adds	r5, #24
 80033a2:	42ac      	cmp	r4, r5
 80033a4:	bf08      	it	eq
 80033a6:	f040 0001 	orreq.w	r0, r0, #1
 80033aa:	3518      	adds	r5, #24
 80033ac:	42ac      	cmp	r4, r5
 80033ae:	bf08      	it	eq
 80033b0:	f040 0001 	orreq.w	r0, r0, #1
 80033b4:	3518      	adds	r5, #24
 80033b6:	42ac      	cmp	r4, r5
 80033b8:	bf08      	it	eq
 80033ba:	f040 0001 	orreq.w	r0, r0, #1
 80033be:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80033c2:	42ac      	cmp	r4, r5
 80033c4:	bf08      	it	eq
 80033c6:	f040 0001 	orreq.w	r0, r0, #1
 80033ca:	3518      	adds	r5, #24
 80033cc:	42ac      	cmp	r4, r5
 80033ce:	bf08      	it	eq
 80033d0:	f040 0001 	orreq.w	r0, r0, #1
 80033d4:	3518      	adds	r5, #24
 80033d6:	42ac      	cmp	r4, r5
 80033d8:	bf08      	it	eq
 80033da:	f040 0001 	orreq.w	r0, r0, #1
 80033de:	3518      	adds	r5, #24
 80033e0:	42ac      	cmp	r4, r5
 80033e2:	bf08      	it	eq
 80033e4:	f040 0001 	orreq.w	r0, r0, #1
 80033e8:	3518      	adds	r5, #24
 80033ea:	42ac      	cmp	r4, r5
 80033ec:	bf08      	it	eq
 80033ee:	f040 0001 	orreq.w	r0, r0, #1
 80033f2:	3518      	adds	r5, #24
 80033f4:	42ac      	cmp	r4, r5
 80033f6:	bf08      	it	eq
 80033f8:	f040 0001 	orreq.w	r0, r0, #1
 80033fc:	3518      	adds	r5, #24
 80033fe:	42ac      	cmp	r4, r5
 8003400:	bf08      	it	eq
 8003402:	f040 0001 	orreq.w	r0, r0, #1
 8003406:	3518      	adds	r5, #24
 8003408:	42ac      	cmp	r4, r5
 800340a:	bf14      	ite	ne
 800340c:	4681      	movne	r9, r0
 800340e:	f040 0901 	orreq.w	r9, r0, #1
 8003412:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8003416:	42ac      	cmp	r4, r5
 8003418:	bf18      	it	ne
 800341a:	42b4      	cmpne	r4, r6
 800341c:	bf0c      	ite	eq
 800341e:	2501      	moveq	r5, #1
 8003420:	2500      	movne	r5, #0
 8003422:	d002      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003424:	f1b9 0f00 	cmp.w	r9, #0
 8003428:	d054      	beq.n	80034d4 <HAL_DMA_Start_IT+0x198>
 800342a:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8003430:	f026 0601 	bic.w	r6, r6, #1
 8003434:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003436:	2d00      	cmp	r5, #0
 8003438:	d078      	beq.n	800352c <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800343a:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800343e:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003440:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8003444:	b117      	cbz	r7, 800344c <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003446:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800344a:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800344c:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8003450:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8003454:	f006 081f 	and.w	r8, r6, #31
 8003458:	fa0e fe08 	lsl.w	lr, lr, r8
 800345c:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003460:	6826      	ldr	r6, [r4, #0]
 8003462:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8003466:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003468:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800346a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	f000 80e2 	beq.w	8003638 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003474:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003476:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003478:	b91d      	cbnz	r5, 8003482 <HAL_DMA_Start_IT+0x146>
 800347a:	f1b9 0f00 	cmp.w	r9, #0
 800347e:	f000 80e1 	beq.w	8003644 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	f023 031e 	bic.w	r3, r3, #30
 8003488:	f043 0316 	orr.w	r3, r3, #22
 800348c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800348e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003492:	b11b      	cbz	r3, 800349c <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	f043 0308 	orr.w	r3, r3, #8
 800349a:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800349c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	03d2      	lsls	r2, r2, #15
 80034a4:	d503      	bpl.n	80034ae <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ac:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80034ae:	b11f      	cbz	r7, 80034b8 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80034b8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ba:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6023      	str	r3, [r4, #0]
}
 80034c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c6:	bf00      	nop
 80034c8:	40020058 	.word	0x40020058
 80034cc:	40020010 	.word	0x40020010
 80034d0:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034d4:	4f61      	ldr	r7, [pc, #388]	; (800365c <HAL_DMA_Start_IT+0x320>)
 80034d6:	4e62      	ldr	r6, [pc, #392]	; (8003660 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d8:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034dc:	42b4      	cmp	r4, r6
 80034de:	bf18      	it	ne
 80034e0:	42bc      	cmpne	r4, r7
 80034e2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80034e6:	bf0c      	ite	eq
 80034e8:	2701      	moveq	r7, #1
 80034ea:	2700      	movne	r7, #0
 80034ec:	42b4      	cmp	r4, r6
 80034ee:	bf08      	it	eq
 80034f0:	f047 0701 	orreq.w	r7, r7, #1
 80034f4:	3614      	adds	r6, #20
 80034f6:	42b4      	cmp	r4, r6
 80034f8:	bf08      	it	eq
 80034fa:	f047 0701 	orreq.w	r7, r7, #1
 80034fe:	3614      	adds	r6, #20
 8003500:	42b4      	cmp	r4, r6
 8003502:	bf08      	it	eq
 8003504:	f047 0701 	orreq.w	r7, r7, #1
 8003508:	3614      	adds	r6, #20
 800350a:	42b4      	cmp	r4, r6
 800350c:	bf08      	it	eq
 800350e:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8003512:	6826      	ldr	r6, [r4, #0]
 8003514:	f026 0601 	bic.w	r6, r6, #1
 8003518:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800351a:	4e52      	ldr	r6, [pc, #328]	; (8003664 <HAL_DMA_Start_IT+0x328>)
 800351c:	42b4      	cmp	r4, r6
 800351e:	bf08      	it	eq
 8003520:	f047 0701 	orreq.w	r7, r7, #1
 8003524:	b917      	cbnz	r7, 800352c <HAL_DMA_Start_IT+0x1f0>
 8003526:	4f50      	ldr	r7, [pc, #320]	; (8003668 <HAL_DMA_Start_IT+0x32c>)
 8003528:	42bc      	cmp	r4, r7
 800352a:	d10b      	bne.n	8003544 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800352c:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8003530:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003532:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8003536:	b117      	cbz	r7, 800353e <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003538:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800353c:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800353e:	f1b9 0f00 	cmp.w	r9, #0
 8003542:	d183      	bne.n	800344c <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003544:	4f46      	ldr	r7, [pc, #280]	; (8003660 <HAL_DMA_Start_IT+0x324>)
 8003546:	f8df e114 	ldr.w	lr, [pc, #276]	; 800365c <HAL_DMA_Start_IT+0x320>
 800354a:	4574      	cmp	r4, lr
 800354c:	bf18      	it	ne
 800354e:	42bc      	cmpne	r4, r7
 8003550:	f10e 0e14 	add.w	lr, lr, #20
 8003554:	bf0c      	ite	eq
 8003556:	2701      	moveq	r7, #1
 8003558:	2700      	movne	r7, #0
 800355a:	4574      	cmp	r4, lr
 800355c:	bf08      	it	eq
 800355e:	f047 0701 	orreq.w	r7, r7, #1
 8003562:	f10e 0e14 	add.w	lr, lr, #20
 8003566:	4574      	cmp	r4, lr
 8003568:	bf08      	it	eq
 800356a:	f047 0701 	orreq.w	r7, r7, #1
 800356e:	f10e 0e14 	add.w	lr, lr, #20
 8003572:	4574      	cmp	r4, lr
 8003574:	bf08      	it	eq
 8003576:	f047 0701 	orreq.w	r7, r7, #1
 800357a:	f10e 0e14 	add.w	lr, lr, #20
 800357e:	4574      	cmp	r4, lr
 8003580:	bf08      	it	eq
 8003582:	f047 0701 	orreq.w	r7, r7, #1
 8003586:	f10e 0e14 	add.w	lr, lr, #20
 800358a:	4574      	cmp	r4, lr
 800358c:	bf08      	it	eq
 800358e:	f047 0701 	orreq.w	r7, r7, #1
 8003592:	b917      	cbnz	r7, 800359a <HAL_DMA_Start_IT+0x25e>
 8003594:	4f34      	ldr	r7, [pc, #208]	; (8003668 <HAL_DMA_Start_IT+0x32c>)
 8003596:	42bc      	cmp	r4, r7
 8003598:	d154      	bne.n	8003644 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800359a:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800359e:	2701      	movs	r7, #1
 80035a0:	f000 0e1f 	and.w	lr, r0, #31
 80035a4:	fa07 f70e 	lsl.w	r7, r7, lr
 80035a8:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80035ac:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ae:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d043      	beq.n	800363e <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80035b6:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80035b8:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f023 030e 	bic.w	r3, r3, #14
 80035c0:	f043 030a 	orr.w	r3, r3, #10
 80035c4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80035c6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d02d      	beq.n	800362a <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_DMA_Start_IT+0x320>)
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <HAL_DMA_Start_IT+0x324>)
 80035da:	4294      	cmp	r4, r2
 80035dc:	bf18      	it	ne
 80035de:	429c      	cmpne	r4, r3
 80035e0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	4294      	cmp	r4, r2
 80035ec:	bf08      	it	eq
 80035ee:	f043 0301 	orreq.w	r3, r3, #1
 80035f2:	3214      	adds	r2, #20
 80035f4:	4294      	cmp	r4, r2
 80035f6:	bf08      	it	eq
 80035f8:	f043 0301 	orreq.w	r3, r3, #1
 80035fc:	3214      	adds	r2, #20
 80035fe:	4294      	cmp	r4, r2
 8003600:	bf08      	it	eq
 8003602:	f043 0301 	orreq.w	r3, r3, #1
 8003606:	3214      	adds	r2, #20
 8003608:	4294      	cmp	r4, r2
 800360a:	bf08      	it	eq
 800360c:	f043 0301 	orreq.w	r3, r3, #1
 8003610:	3214      	adds	r2, #20
 8003612:	4294      	cmp	r4, r2
 8003614:	bf08      	it	eq
 8003616:	f043 0301 	orreq.w	r3, r3, #1
 800361a:	3214      	adds	r2, #20
 800361c:	4294      	cmp	r4, r2
 800361e:	bf08      	it	eq
 8003620:	f043 0301 	orreq.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	f43f af47 	beq.w	80034b8 <HAL_DMA_Start_IT+0x17c>
 800362a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800362e:	e735      	b.n	800349c <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8003630:	2001      	movs	r0, #1
 8003632:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003634:	2002      	movs	r0, #2
}
 8003636:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003638:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800363a:	60e1      	str	r1, [r4, #12]
 800363c:	e71c      	b.n	8003478 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800363e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003640:	60e1      	str	r1, [r4, #12]
 8003642:	e7ba      	b.n	80035ba <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f023 030e 	bic.w	r3, r3, #14
 800364a:	f043 030a 	orr.w	r3, r3, #10
 800364e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003650:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ba      	bne.n	80035ce <HAL_DMA_Start_IT+0x292>
 8003658:	e7bd      	b.n	80035d6 <HAL_DMA_Start_IT+0x29a>
 800365a:	bf00      	nop
 800365c:	5802541c 	.word	0x5802541c
 8003660:	58025408 	.word	0x58025408
 8003664:	58025480 	.word	0x58025480
 8003668:	58025494 	.word	0x58025494

0800366c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800366c:	2800      	cmp	r0, #0
 800366e:	d05f      	beq.n	8003730 <HAL_DMA_Abort_IT+0xc4>
{
 8003670:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003672:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003676:	4603      	mov	r3, r0
 8003678:	2a02      	cmp	r2, #2
 800367a:	d155      	bne.n	8003728 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800367c:	6801      	ldr	r1, [r0, #0]
 800367e:	4a57      	ldr	r2, [pc, #348]	; (80037dc <HAL_DMA_Abort_IT+0x170>)
 8003680:	4291      	cmp	r1, r2
 8003682:	d048      	beq.n	8003716 <HAL_DMA_Abort_IT+0xaa>
 8003684:	3218      	adds	r2, #24
 8003686:	4291      	cmp	r1, r2
 8003688:	d045      	beq.n	8003716 <HAL_DMA_Abort_IT+0xaa>
 800368a:	3230      	adds	r2, #48	; 0x30
 800368c:	4c54      	ldr	r4, [pc, #336]	; (80037e0 <HAL_DMA_Abort_IT+0x174>)
 800368e:	4855      	ldr	r0, [pc, #340]	; (80037e4 <HAL_DMA_Abort_IT+0x178>)
 8003690:	42a1      	cmp	r1, r4
 8003692:	bf18      	it	ne
 8003694:	4291      	cmpne	r1, r2
 8003696:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800369a:	bf0c      	ite	eq
 800369c:	2201      	moveq	r2, #1
 800369e:	2200      	movne	r2, #0
 80036a0:	4281      	cmp	r1, r0
 80036a2:	bf08      	it	eq
 80036a4:	f042 0201 	orreq.w	r2, r2, #1
 80036a8:	3030      	adds	r0, #48	; 0x30
 80036aa:	42a1      	cmp	r1, r4
 80036ac:	bf08      	it	eq
 80036ae:	f042 0201 	orreq.w	r2, r2, #1
 80036b2:	3430      	adds	r4, #48	; 0x30
 80036b4:	4281      	cmp	r1, r0
 80036b6:	bf08      	it	eq
 80036b8:	f042 0201 	orreq.w	r2, r2, #1
 80036bc:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80036c0:	42a1      	cmp	r1, r4
 80036c2:	bf08      	it	eq
 80036c4:	f042 0201 	orreq.w	r2, r2, #1
 80036c8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80036cc:	4281      	cmp	r1, r0
 80036ce:	bf08      	it	eq
 80036d0:	f042 0201 	orreq.w	r2, r2, #1
 80036d4:	3030      	adds	r0, #48	; 0x30
 80036d6:	42a1      	cmp	r1, r4
 80036d8:	bf08      	it	eq
 80036da:	f042 0201 	orreq.w	r2, r2, #1
 80036de:	3430      	adds	r4, #48	; 0x30
 80036e0:	4281      	cmp	r1, r0
 80036e2:	bf08      	it	eq
 80036e4:	f042 0201 	orreq.w	r2, r2, #1
 80036e8:	3030      	adds	r0, #48	; 0x30
 80036ea:	42a1      	cmp	r1, r4
 80036ec:	bf08      	it	eq
 80036ee:	f042 0201 	orreq.w	r2, r2, #1
 80036f2:	3430      	adds	r4, #48	; 0x30
 80036f4:	4281      	cmp	r1, r0
 80036f6:	bf08      	it	eq
 80036f8:	f042 0201 	orreq.w	r2, r2, #1
 80036fc:	3030      	adds	r0, #48	; 0x30
 80036fe:	42a1      	cmp	r1, r4
 8003700:	bf08      	it	eq
 8003702:	f042 0201 	orreq.w	r2, r2, #1
 8003706:	4281      	cmp	r1, r0
 8003708:	bf08      	it	eq
 800370a:	f042 0201 	orreq.w	r2, r2, #1
 800370e:	b912      	cbnz	r2, 8003716 <HAL_DMA_Abort_IT+0xaa>
 8003710:	4a35      	ldr	r2, [pc, #212]	; (80037e8 <HAL_DMA_Abort_IT+0x17c>)
 8003712:	4291      	cmp	r1, r2
 8003714:	d10e      	bne.n	8003734 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003716:	2204      	movs	r2, #4
  return HAL_OK;
 8003718:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800371e:	680b      	ldr	r3, [r1, #0]
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	600b      	str	r3, [r1, #0]
}
 8003726:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003728:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800372a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800372e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003730:	2001      	movs	r0, #1
}
 8003732:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003734:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <HAL_DMA_Abort_IT+0x180>)
 8003736:	4d2e      	ldr	r5, [pc, #184]	; (80037f0 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003738:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800373a:	42a9      	cmp	r1, r5
 800373c:	bf18      	it	ne
 800373e:	4291      	cmpne	r1, r2
 8003740:	4c2c      	ldr	r4, [pc, #176]	; (80037f4 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003742:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003746:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800374a:	bf0c      	ite	eq
 800374c:	2201      	moveq	r2, #1
 800374e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003750:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003752:	42a1      	cmp	r1, r4
 8003754:	bf08      	it	eq
 8003756:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800375a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800375c:	3428      	adds	r4, #40	; 0x28
 800375e:	42a9      	cmp	r1, r5
 8003760:	bf08      	it	eq
 8003762:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003766:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800376a:	42a1      	cmp	r1, r4
 800376c:	bf08      	it	eq
 800376e:	f042 0201 	orreq.w	r2, r2, #1
 8003772:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8003774:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003776:	42a1      	cmp	r1, r4
 8003778:	bf08      	it	eq
 800377a:	f042 0201 	orreq.w	r2, r2, #1
 800377e:	481e      	ldr	r0, [pc, #120]	; (80037f8 <HAL_DMA_Abort_IT+0x18c>)
 8003780:	4281      	cmp	r1, r0
 8003782:	bf08      	it	eq
 8003784:	f042 0201 	orreq.w	r2, r2, #1
 8003788:	b912      	cbnz	r2, 8003790 <HAL_DMA_Abort_IT+0x124>
 800378a:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_DMA_Abort_IT+0x190>)
 800378c:	4291      	cmp	r1, r2
 800378e:	d117      	bne.n	80037c0 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003790:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003792:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003794:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003798:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800379a:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800379e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037a2:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037a4:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037a6:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80037a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037aa:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 80037ae:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80037b0:	b132      	cbz	r2, 80037c0 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037b2:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b4:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037b8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80037bc:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037be:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80037c0:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 80037c2:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 80037c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80037c6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80037ca:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80037ce:	b11a      	cbz	r2, 80037d8 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 80037d0:	4618      	mov	r0, r3
 80037d2:	4790      	blx	r2
  return HAL_OK;
 80037d4:	4620      	mov	r0, r4
}
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80037d8:	4610      	mov	r0, r2
}
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	40020010 	.word	0x40020010
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020070 	.word	0x40020070
 80037e8:	400204b8 	.word	0x400204b8
 80037ec:	5802541c 	.word	0x5802541c
 80037f0:	58025408 	.word	0x58025408
 80037f4:	58025430 	.word	0x58025430
 80037f8:	58025480 	.word	0x58025480
 80037fc:	58025494 	.word	0x58025494

08003800 <HAL_DMA_IRQHandler>:
{
 8003800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8003804:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003806:	4b9c      	ldr	r3, [pc, #624]	; (8003a78 <HAL_DMA_IRQHandler+0x278>)
{
 8003808:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800380a:	4e9c      	ldr	r6, [pc, #624]	; (8003a7c <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800380c:	681d      	ldr	r5, [r3, #0]
{
 800380e:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8003810:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003812:	6803      	ldr	r3, [r0, #0]
 8003814:	4a9a      	ldr	r2, [pc, #616]	; (8003a80 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003816:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003818:	4293      	cmp	r3, r2
 800381a:	bf18      	it	ne
 800381c:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800381e:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003820:	bf08      	it	eq
 8003822:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8003824:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003826:	bf18      	it	ne
 8003828:	2600      	movne	r6, #0
 800382a:	d045      	beq.n	80038b8 <HAL_DMA_IRQHandler+0xb8>
 800382c:	3218      	adds	r2, #24
 800382e:	4895      	ldr	r0, [pc, #596]	; (8003a84 <HAL_DMA_IRQHandler+0x284>)
 8003830:	4283      	cmp	r3, r0
 8003832:	bf18      	it	ne
 8003834:	4293      	cmpne	r3, r2
 8003836:	f100 0018 	add.w	r0, r0, #24
 800383a:	bf0c      	ite	eq
 800383c:	2201      	moveq	r2, #1
 800383e:	2200      	movne	r2, #0
 8003840:	4283      	cmp	r3, r0
 8003842:	bf08      	it	eq
 8003844:	f042 0201 	orreq.w	r2, r2, #1
 8003848:	3018      	adds	r0, #24
 800384a:	4283      	cmp	r3, r0
 800384c:	bf08      	it	eq
 800384e:	f042 0201 	orreq.w	r2, r2, #1
 8003852:	3018      	adds	r0, #24
 8003854:	4283      	cmp	r3, r0
 8003856:	bf08      	it	eq
 8003858:	f042 0201 	orreq.w	r2, r2, #1
 800385c:	3018      	adds	r0, #24
 800385e:	4283      	cmp	r3, r0
 8003860:	bf08      	it	eq
 8003862:	f042 0201 	orreq.w	r2, r2, #1
 8003866:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800386a:	4283      	cmp	r3, r0
 800386c:	bf08      	it	eq
 800386e:	f042 0201 	orreq.w	r2, r2, #1
 8003872:	3018      	adds	r0, #24
 8003874:	4283      	cmp	r3, r0
 8003876:	bf08      	it	eq
 8003878:	f042 0201 	orreq.w	r2, r2, #1
 800387c:	3018      	adds	r0, #24
 800387e:	4283      	cmp	r3, r0
 8003880:	bf08      	it	eq
 8003882:	f042 0201 	orreq.w	r2, r2, #1
 8003886:	3018      	adds	r0, #24
 8003888:	4283      	cmp	r3, r0
 800388a:	bf08      	it	eq
 800388c:	f042 0201 	orreq.w	r2, r2, #1
 8003890:	3018      	adds	r0, #24
 8003892:	4283      	cmp	r3, r0
 8003894:	bf08      	it	eq
 8003896:	f042 0201 	orreq.w	r2, r2, #1
 800389a:	3018      	adds	r0, #24
 800389c:	4283      	cmp	r3, r0
 800389e:	bf08      	it	eq
 80038a0:	f042 0201 	orreq.w	r2, r2, #1
 80038a4:	3018      	adds	r0, #24
 80038a6:	4283      	cmp	r3, r0
 80038a8:	bf08      	it	eq
 80038aa:	f042 0201 	orreq.w	r2, r2, #1
 80038ae:	b91a      	cbnz	r2, 80038b8 <HAL_DMA_IRQHandler+0xb8>
 80038b0:	4a75      	ldr	r2, [pc, #468]	; (8003a88 <HAL_DMA_IRQHandler+0x288>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	f040 8250 	bne.w	8003d58 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038b8:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 80038bc:	2208      	movs	r2, #8
 80038be:	f001 0c1f 	and.w	ip, r1, #31
 80038c2:	fa02 f20c 	lsl.w	r2, r2, ip
 80038c6:	4217      	tst	r7, r2
 80038c8:	f040 8188 	bne.w	8003bdc <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038cc:	fa27 f20c 	lsr.w	r2, r7, ip
 80038d0:	07d2      	lsls	r2, r2, #31
 80038d2:	d50c      	bpl.n	80038ee <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	0610      	lsls	r0, r2, #24
 80038d8:	d509      	bpl.n	80038ee <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038da:	2201      	movs	r2, #1
 80038dc:	fa02 f20c 	lsl.w	r2, r2, ip
 80038e0:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038e2:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80038e6:	f042 0202 	orr.w	r2, r2, #2
 80038ea:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ee:	f04f 0e04 	mov.w	lr, #4
 80038f2:	fa0e f00c 	lsl.w	r0, lr, ip
 80038f6:	4238      	tst	r0, r7
 80038f8:	d05b      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038fa:	2e00      	cmp	r6, #0
 80038fc:	d14f      	bne.n	800399e <HAL_DMA_IRQHandler+0x19e>
 80038fe:	4a61      	ldr	r2, [pc, #388]	; (8003a84 <HAL_DMA_IRQHandler+0x284>)
 8003900:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003a8c <HAL_DMA_IRQHandler+0x28c>
 8003904:	4543      	cmp	r3, r8
 8003906:	bf18      	it	ne
 8003908:	4293      	cmpne	r3, r2
 800390a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800390e:	bf0c      	ite	eq
 8003910:	2201      	moveq	r2, #1
 8003912:	2200      	movne	r2, #0
 8003914:	4543      	cmp	r3, r8
 8003916:	bf08      	it	eq
 8003918:	f042 0201 	orreq.w	r2, r2, #1
 800391c:	f108 0818 	add.w	r8, r8, #24
 8003920:	4543      	cmp	r3, r8
 8003922:	bf08      	it	eq
 8003924:	f042 0201 	orreq.w	r2, r2, #1
 8003928:	f108 0818 	add.w	r8, r8, #24
 800392c:	4543      	cmp	r3, r8
 800392e:	bf08      	it	eq
 8003930:	f042 0201 	orreq.w	r2, r2, #1
 8003934:	f108 0818 	add.w	r8, r8, #24
 8003938:	4543      	cmp	r3, r8
 800393a:	bf08      	it	eq
 800393c:	f042 0201 	orreq.w	r2, r2, #1
 8003940:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8003944:	4543      	cmp	r3, r8
 8003946:	bf08      	it	eq
 8003948:	f042 0201 	orreq.w	r2, r2, #1
 800394c:	f108 0818 	add.w	r8, r8, #24
 8003950:	4543      	cmp	r3, r8
 8003952:	bf08      	it	eq
 8003954:	f042 0201 	orreq.w	r2, r2, #1
 8003958:	f108 0818 	add.w	r8, r8, #24
 800395c:	4543      	cmp	r3, r8
 800395e:	bf08      	it	eq
 8003960:	f042 0201 	orreq.w	r2, r2, #1
 8003964:	f108 0818 	add.w	r8, r8, #24
 8003968:	4543      	cmp	r3, r8
 800396a:	bf08      	it	eq
 800396c:	f042 0201 	orreq.w	r2, r2, #1
 8003970:	f108 0818 	add.w	r8, r8, #24
 8003974:	4543      	cmp	r3, r8
 8003976:	bf08      	it	eq
 8003978:	f042 0201 	orreq.w	r2, r2, #1
 800397c:	f108 0818 	add.w	r8, r8, #24
 8003980:	4543      	cmp	r3, r8
 8003982:	bf08      	it	eq
 8003984:	f042 0201 	orreq.w	r2, r2, #1
 8003988:	f108 0818 	add.w	r8, r8, #24
 800398c:	4543      	cmp	r3, r8
 800398e:	bf08      	it	eq
 8003990:	f042 0201 	orreq.w	r2, r2, #1
 8003994:	b91a      	cbnz	r2, 800399e <HAL_DMA_IRQHandler+0x19e>
 8003996:	4a3c      	ldr	r2, [pc, #240]	; (8003a88 <HAL_DMA_IRQHandler+0x288>)
 8003998:	4293      	cmp	r3, r2
 800399a:	f040 8219 	bne.w	8003dd0 <HAL_DMA_IRQHandler+0x5d0>
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	0792      	lsls	r2, r2, #30
 80039a2:	d506      	bpl.n	80039b2 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039a4:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a6:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80039aa:	f042 0204 	orr.w	r2, r2, #4
 80039ae:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039b2:	2210      	movs	r2, #16
 80039b4:	fa02 fc0c 	lsl.w	ip, r2, ip
 80039b8:	ea1c 0f07 	tst.w	ip, r7
 80039bc:	d06c      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039be:	2e00      	cmp	r6, #0
 80039c0:	d145      	bne.n	8003a4e <HAL_DMA_IRQHandler+0x24e>
 80039c2:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <HAL_DMA_IRQHandler+0x284>)
 80039c4:	4e31      	ldr	r6, [pc, #196]	; (8003a8c <HAL_DMA_IRQHandler+0x28c>)
 80039c6:	42b3      	cmp	r3, r6
 80039c8:	bf18      	it	ne
 80039ca:	4293      	cmpne	r3, r2
 80039cc:	f106 0630 	add.w	r6, r6, #48	; 0x30
 80039d0:	bf0c      	ite	eq
 80039d2:	2201      	moveq	r2, #1
 80039d4:	2200      	movne	r2, #0
 80039d6:	42b3      	cmp	r3, r6
 80039d8:	bf08      	it	eq
 80039da:	f042 0201 	orreq.w	r2, r2, #1
 80039de:	3618      	adds	r6, #24
 80039e0:	42b3      	cmp	r3, r6
 80039e2:	bf08      	it	eq
 80039e4:	f042 0201 	orreq.w	r2, r2, #1
 80039e8:	3618      	adds	r6, #24
 80039ea:	42b3      	cmp	r3, r6
 80039ec:	bf08      	it	eq
 80039ee:	f042 0201 	orreq.w	r2, r2, #1
 80039f2:	3618      	adds	r6, #24
 80039f4:	42b3      	cmp	r3, r6
 80039f6:	bf08      	it	eq
 80039f8:	f042 0201 	orreq.w	r2, r2, #1
 80039fc:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8003a00:	42b3      	cmp	r3, r6
 8003a02:	bf08      	it	eq
 8003a04:	f042 0201 	orreq.w	r2, r2, #1
 8003a08:	3618      	adds	r6, #24
 8003a0a:	42b3      	cmp	r3, r6
 8003a0c:	bf08      	it	eq
 8003a0e:	f042 0201 	orreq.w	r2, r2, #1
 8003a12:	3618      	adds	r6, #24
 8003a14:	42b3      	cmp	r3, r6
 8003a16:	bf08      	it	eq
 8003a18:	f042 0201 	orreq.w	r2, r2, #1
 8003a1c:	3618      	adds	r6, #24
 8003a1e:	42b3      	cmp	r3, r6
 8003a20:	bf08      	it	eq
 8003a22:	f042 0201 	orreq.w	r2, r2, #1
 8003a26:	3618      	adds	r6, #24
 8003a28:	42b3      	cmp	r3, r6
 8003a2a:	bf08      	it	eq
 8003a2c:	f042 0201 	orreq.w	r2, r2, #1
 8003a30:	3618      	adds	r6, #24
 8003a32:	42b3      	cmp	r3, r6
 8003a34:	bf08      	it	eq
 8003a36:	f042 0201 	orreq.w	r2, r2, #1
 8003a3a:	3618      	adds	r6, #24
 8003a3c:	42b3      	cmp	r3, r6
 8003a3e:	bf08      	it	eq
 8003a40:	f042 0201 	orreq.w	r2, r2, #1
 8003a44:	b91a      	cbnz	r2, 8003a4e <HAL_DMA_IRQHandler+0x24e>
 8003a46:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <HAL_DMA_IRQHandler+0x288>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f040 81c9 	bne.w	8003de0 <HAL_DMA_IRQHandler+0x5e0>
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	0710      	lsls	r0, r2, #28
 8003a52:	d521      	bpl.n	8003a98 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a54:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	0356      	lsls	r6, r2, #13
 8003a5c:	f100 814c 	bmi.w	8003cf8 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	05d2      	lsls	r2, r2, #23
 8003a64:	d403      	bmi.n	8003a6e <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	f022 0208 	bic.w	r2, r2, #8
 8003a6c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003a6e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8003a72:	b18b      	cbz	r3, 8003a98 <HAL_DMA_IRQHandler+0x298>
 8003a74:	e00c      	b.n	8003a90 <HAL_DMA_IRQHandler+0x290>
 8003a76:	bf00      	nop
 8003a78:	24000060 	.word	0x24000060
 8003a7c:	40020010 	.word	0x40020010
 8003a80:	40020028 	.word	0x40020028
 8003a84:	40020058 	.word	0x40020058
 8003a88:	400204b8 	.word	0x400204b8
 8003a8c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8003a90:	4648      	mov	r0, r9
 8003a92:	4798      	blx	r3
 8003a94:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a98:	f001 011f 	and.w	r1, r1, #31
 8003a9c:	2620      	movs	r6, #32
 8003a9e:	408e      	lsls	r6, r1
 8003aa0:	423e      	tst	r6, r7
 8003aa2:	d068      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8003aa8:	4ba5      	ldr	r3, [pc, #660]	; (8003d40 <HAL_DMA_IRQHandler+0x540>)
 8003aaa:	4fa6      	ldr	r7, [pc, #664]	; (8003d44 <HAL_DMA_IRQHandler+0x544>)
 8003aac:	42ba      	cmp	r2, r7
 8003aae:	bf18      	it	ne
 8003ab0:	429a      	cmpne	r2, r3
 8003ab2:	f107 0718 	add.w	r7, r7, #24
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	42ba      	cmp	r2, r7
 8003abe:	bf08      	it	eq
 8003ac0:	f043 0301 	orreq.w	r3, r3, #1
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	42ba      	cmp	r2, r7
 8003ac8:	bf08      	it	eq
 8003aca:	f043 0301 	orreq.w	r3, r3, #1
 8003ace:	3718      	adds	r7, #24
 8003ad0:	42ba      	cmp	r2, r7
 8003ad2:	bf08      	it	eq
 8003ad4:	f043 0301 	orreq.w	r3, r3, #1
 8003ad8:	3718      	adds	r7, #24
 8003ada:	42ba      	cmp	r2, r7
 8003adc:	bf08      	it	eq
 8003ade:	f043 0301 	orreq.w	r3, r3, #1
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	42ba      	cmp	r2, r7
 8003ae6:	bf08      	it	eq
 8003ae8:	f043 0301 	orreq.w	r3, r3, #1
 8003aec:	3718      	adds	r7, #24
 8003aee:	42ba      	cmp	r2, r7
 8003af0:	bf08      	it	eq
 8003af2:	f043 0301 	orreq.w	r3, r3, #1
 8003af6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8003afa:	42ba      	cmp	r2, r7
 8003afc:	bf08      	it	eq
 8003afe:	f043 0301 	orreq.w	r3, r3, #1
 8003b02:	3718      	adds	r7, #24
 8003b04:	42ba      	cmp	r2, r7
 8003b06:	bf08      	it	eq
 8003b08:	f043 0301 	orreq.w	r3, r3, #1
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	42ba      	cmp	r2, r7
 8003b10:	bf08      	it	eq
 8003b12:	f043 0301 	orreq.w	r3, r3, #1
 8003b16:	3718      	adds	r7, #24
 8003b18:	42ba      	cmp	r2, r7
 8003b1a:	bf08      	it	eq
 8003b1c:	f043 0301 	orreq.w	r3, r3, #1
 8003b20:	3718      	adds	r7, #24
 8003b22:	42ba      	cmp	r2, r7
 8003b24:	bf08      	it	eq
 8003b26:	f043 0301 	orreq.w	r3, r3, #1
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	42ba      	cmp	r2, r7
 8003b2e:	bf08      	it	eq
 8003b30:	f043 0301 	orreq.w	r3, r3, #1
 8003b34:	3718      	adds	r7, #24
 8003b36:	42ba      	cmp	r2, r7
 8003b38:	bf08      	it	eq
 8003b3a:	f043 0301 	orreq.w	r3, r3, #1
 8003b3e:	b91b      	cbnz	r3, 8003b48 <HAL_DMA_IRQHandler+0x348>
 8003b40:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <HAL_DMA_IRQHandler+0x548>)
 8003b42:	429a      	cmp	r2, r3
 8003b44:	f040 8162 	bne.w	8003e0c <HAL_DMA_IRQHandler+0x60c>
 8003b48:	6813      	ldr	r3, [r2, #0]
 8003b4a:	06db      	lsls	r3, r3, #27
 8003b4c:	d513      	bpl.n	8003b76 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b4e:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b50:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8003b54:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b56:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b58:	f000 80ae 	beq.w	8003cb8 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b5c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b60:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b62:	f000 80d3 	beq.w	8003d0c <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b66:	031c      	lsls	r4, r3, #12
 8003b68:	f140 80de 	bpl.w	8003d28 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 8003b6c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8003b70:	b10b      	cbz	r3, 8003b76 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8003b72:	4648      	mov	r0, r9
 8003b74:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b76:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80b9 	beq.w	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b80:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8003b84:	07d8      	lsls	r0, r3, #31
 8003b86:	d51f      	bpl.n	8003bc8 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8003b88:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003b92:	6813      	ldr	r3, [r2, #0]
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b9a:	4b6c      	ldr	r3, [pc, #432]	; (8003d4c <HAL_DMA_IRQHandler+0x54c>)
 8003b9c:	fba3 3505 	umull	r3, r5, r3, r5
 8003ba0:	0aad      	lsrs	r5, r5, #10
 8003ba2:	e002      	b.n	8003baa <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ba4:	6813      	ldr	r3, [r2, #0]
 8003ba6:	07d9      	lsls	r1, r3, #31
 8003ba8:	d504      	bpl.n	8003bb4 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 8003baa:	9b01      	ldr	r3, [sp, #4]
 8003bac:	3301      	adds	r3, #1
 8003bae:	42ab      	cmp	r3, r5
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	d9f7      	bls.n	8003ba4 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bb4:	6813      	ldr	r3, [r2, #0]
 8003bb6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003bb8:	bf4c      	ite	mi
 8003bba:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003bbc:	2301      	movpl	r3, #1
 8003bbe:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8003bc8:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8090 	beq.w	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 8003bd2:	4648      	mov	r0, r9
}
 8003bd4:	b003      	add	sp, #12
 8003bd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 8003bda:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	0740      	lsls	r0, r0, #29
 8003be0:	d50a      	bpl.n	8003bf8 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	f020 0004 	bic.w	r0, r0, #4
 8003be8:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bea:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bec:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bf8:	fa27 f20c 	lsr.w	r2, r7, ip
 8003bfc:	07d2      	lsls	r2, r2, #31
 8003bfe:	f57f ae76 	bpl.w	80038ee <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c02:	4a53      	ldr	r2, [pc, #332]	; (8003d50 <HAL_DMA_IRQHandler+0x550>)
 8003c04:	4853      	ldr	r0, [pc, #332]	; (8003d54 <HAL_DMA_IRQHandler+0x554>)
 8003c06:	4283      	cmp	r3, r0
 8003c08:	bf18      	it	ne
 8003c0a:	4293      	cmpne	r3, r2
 8003c0c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003c10:	bf0c      	ite	eq
 8003c12:	2201      	moveq	r2, #1
 8003c14:	2200      	movne	r2, #0
 8003c16:	4283      	cmp	r3, r0
 8003c18:	bf08      	it	eq
 8003c1a:	f042 0201 	orreq.w	r2, r2, #1
 8003c1e:	3018      	adds	r0, #24
 8003c20:	4283      	cmp	r3, r0
 8003c22:	bf08      	it	eq
 8003c24:	f042 0201 	orreq.w	r2, r2, #1
 8003c28:	3018      	adds	r0, #24
 8003c2a:	4283      	cmp	r3, r0
 8003c2c:	bf08      	it	eq
 8003c2e:	f042 0201 	orreq.w	r2, r2, #1
 8003c32:	3018      	adds	r0, #24
 8003c34:	4283      	cmp	r3, r0
 8003c36:	bf08      	it	eq
 8003c38:	f042 0201 	orreq.w	r2, r2, #1
 8003c3c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003c40:	4283      	cmp	r3, r0
 8003c42:	bf08      	it	eq
 8003c44:	f042 0201 	orreq.w	r2, r2, #1
 8003c48:	3018      	adds	r0, #24
 8003c4a:	4283      	cmp	r3, r0
 8003c4c:	bf08      	it	eq
 8003c4e:	f042 0201 	orreq.w	r2, r2, #1
 8003c52:	3018      	adds	r0, #24
 8003c54:	4283      	cmp	r3, r0
 8003c56:	bf08      	it	eq
 8003c58:	f042 0201 	orreq.w	r2, r2, #1
 8003c5c:	3018      	adds	r0, #24
 8003c5e:	4283      	cmp	r3, r0
 8003c60:	bf08      	it	eq
 8003c62:	f042 0201 	orreq.w	r2, r2, #1
 8003c66:	3018      	adds	r0, #24
 8003c68:	4283      	cmp	r3, r0
 8003c6a:	bf08      	it	eq
 8003c6c:	f042 0201 	orreq.w	r2, r2, #1
 8003c70:	3018      	adds	r0, #24
 8003c72:	4283      	cmp	r3, r0
 8003c74:	bf08      	it	eq
 8003c76:	f042 0201 	orreq.w	r2, r2, #1
 8003c7a:	3018      	adds	r0, #24
 8003c7c:	4283      	cmp	r3, r0
 8003c7e:	bf08      	it	eq
 8003c80:	f042 0201 	orreq.w	r2, r2, #1
 8003c84:	3018      	adds	r0, #24
 8003c86:	4283      	cmp	r3, r0
 8003c88:	bf08      	it	eq
 8003c8a:	f042 0201 	orreq.w	r2, r2, #1
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	f47f ae20 	bne.w	80038d4 <HAL_DMA_IRQHandler+0xd4>
 8003c94:	2e00      	cmp	r6, #0
 8003c96:	f47f ae1d 	bne.w	80038d4 <HAL_DMA_IRQHandler+0xd4>
 8003c9a:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	fa02 f20c 	lsl.w	r2, r2, ip
 8003ca2:	423a      	tst	r2, r7
 8003ca4:	f040 8094 	bne.w	8003dd0 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ca8:	2210      	movs	r2, #16
 8003caa:	fa02 fc0c 	lsl.w	ip, r2, ip
 8003cae:	ea17 0f0c 	tst.w	r7, ip
 8003cb2:	f43f aef1 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x298>
 8003cb6:	e684      	b.n	80039c2 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cb8:	f023 0316 	bic.w	r3, r3, #22
 8003cbc:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cbe:	6953      	ldr	r3, [r2, #20]
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cc6:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8003cca:	b39b      	cbz	r3, 8003d34 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ccc:	6813      	ldr	r3, [r2, #0]
 8003cce:	f023 0308 	bic.w	r3, r3, #8
 8003cd2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cd4:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 8003cd8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cda:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8003cde:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ce2:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8003ce4:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003ce8:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f47f af70 	bne.w	8003bd2 <HAL_DMA_IRQHandler+0x3d2>
}
 8003cf2:	b003      	add	sp, #12
 8003cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	0318      	lsls	r0, r3, #12
 8003cfc:	f57f aeb7 	bpl.w	8003a6e <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d00:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f47f aec3 	bne.w	8003a90 <HAL_DMA_IRQHandler+0x290>
 8003d0a:	e6c5      	b.n	8003a98 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d0c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003d10:	f47f af2c 	bne.w	8003b6c <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d14:	6811      	ldr	r1, [r2, #0]
 8003d16:	f021 0110 	bic.w	r1, r1, #16
 8003d1a:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003d1c:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8003d1e:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003d22:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8003d26:	e721      	b.n	8003b6c <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 8003d28:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f47f af20 	bne.w	8003b72 <HAL_DMA_IRQHandler+0x372>
 8003d32:	e720      	b.n	8003b76 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d34:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1c7      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x4cc>
 8003d3c:	e7ca      	b.n	8003cd4 <HAL_DMA_IRQHandler+0x4d4>
 8003d3e:	bf00      	nop
 8003d40:	40020010 	.word	0x40020010
 8003d44:	40020028 	.word	0x40020028
 8003d48:	400204b8 	.word	0x400204b8
 8003d4c:	1b4e81b5 	.word	0x1b4e81b5
 8003d50:	40020058 	.word	0x40020058
 8003d54:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d58:	4a4e      	ldr	r2, [pc, #312]	; (8003e94 <HAL_DMA_IRQHandler+0x694>)
 8003d5a:	4d4f      	ldr	r5, [pc, #316]	; (8003e98 <HAL_DMA_IRQHandler+0x698>)
 8003d5c:	42ab      	cmp	r3, r5
 8003d5e:	bf18      	it	ne
 8003d60:	4293      	cmpne	r3, r2
 8003d62:	f105 0514 	add.w	r5, r5, #20
 8003d66:	bf0c      	ite	eq
 8003d68:	2201      	moveq	r2, #1
 8003d6a:	2200      	movne	r2, #0
 8003d6c:	42ab      	cmp	r3, r5
 8003d6e:	bf08      	it	eq
 8003d70:	f042 0201 	orreq.w	r2, r2, #1
 8003d74:	3514      	adds	r5, #20
 8003d76:	42ab      	cmp	r3, r5
 8003d78:	bf08      	it	eq
 8003d7a:	f042 0201 	orreq.w	r2, r2, #1
 8003d7e:	3514      	adds	r5, #20
 8003d80:	42ab      	cmp	r3, r5
 8003d82:	bf08      	it	eq
 8003d84:	f042 0201 	orreq.w	r2, r2, #1
 8003d88:	3514      	adds	r5, #20
 8003d8a:	42ab      	cmp	r3, r5
 8003d8c:	bf08      	it	eq
 8003d8e:	f042 0201 	orreq.w	r2, r2, #1
 8003d92:	3514      	adds	r5, #20
 8003d94:	42ab      	cmp	r3, r5
 8003d96:	bf08      	it	eq
 8003d98:	f042 0201 	orreq.w	r2, r2, #1
 8003d9c:	b912      	cbnz	r2, 8003da4 <HAL_DMA_IRQHandler+0x5a4>
 8003d9e:	4a3f      	ldr	r2, [pc, #252]	; (8003e9c <HAL_DMA_IRQHandler+0x69c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d1a6      	bne.n	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003da4:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 8003da8:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003daa:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003dac:	f005 051f 	and.w	r5, r5, #31
 8003db0:	40ae      	lsls	r6, r5
 8003db2:	420e      	tst	r6, r1
 8003db4:	d019      	beq.n	8003dea <HAL_DMA_IRQHandler+0x5ea>
 8003db6:	0757      	lsls	r7, r2, #29
 8003db8:	d517      	bpl.n	8003dea <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dba:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003dbc:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dbe:	d54b      	bpl.n	8003e58 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003dc0:	03d1      	lsls	r1, r2, #15
 8003dc2:	d44f      	bmi.n	8003e64 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dc4:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f af02 	bne.w	8003bd2 <HAL_DMA_IRQHandler+0x3d2>
 8003dce:	e790      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003dd0:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	fa02 fc0c 	lsl.w	ip, r2, ip
 8003dd8:	ea17 0f0c 	tst.w	r7, ip
 8003ddc:	f43f ae5c 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	0752      	lsls	r2, r2, #29
 8003de4:	f57f ae58 	bpl.w	8003a98 <HAL_DMA_IRQHandler+0x298>
 8003de8:	e634      	b.n	8003a54 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003dea:	2602      	movs	r6, #2
 8003dec:	40ae      	lsls	r6, r5
 8003dee:	420e      	tst	r6, r1
 8003df0:	d011      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x616>
 8003df2:	0797      	lsls	r7, r2, #30
 8003df4:	d50f      	bpl.n	8003e16 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003df6:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df8:	0414      	lsls	r4, r2, #16
 8003dfa:	d539      	bpl.n	8003e70 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003dfc:	03d0      	lsls	r0, r2, #15
 8003dfe:	d443      	bmi.n	8003e88 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 8003e00:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f47f aee4 	bne.w	8003bd2 <HAL_DMA_IRQHandler+0x3d2>
 8003e0a:	e772      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e0c:	6813      	ldr	r3, [r2, #0]
 8003e0e:	079f      	lsls	r7, r3, #30
 8003e10:	f57f aeb1 	bpl.w	8003b76 <HAL_DMA_IRQHandler+0x376>
 8003e14:	e69b      	b.n	8003b4e <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e16:	2608      	movs	r6, #8
 8003e18:	40ae      	lsls	r6, r5
 8003e1a:	420e      	tst	r6, r1
 8003e1c:	f43f af69 	beq.w	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
 8003e20:	0711      	lsls	r1, r2, #28
 8003e22:	f57f af66 	bpl.w	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e26:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8003e28:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2a:	f022 020e 	bic.w	r2, r2, #14
 8003e2e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e30:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8003e32:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e36:	fa03 f505 	lsl.w	r5, r3, r5
 8003e3a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e3c:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003e40:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003e44:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	f43f af52 	beq.w	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 8003e4e:	4648      	mov	r0, r9
}
 8003e50:	b003      	add	sp, #12
 8003e52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8003e56:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e58:	0692      	lsls	r2, r2, #26
 8003e5a:	d403      	bmi.n	8003e64 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003e64:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f47f aeb2 	bne.w	8003bd2 <HAL_DMA_IRQHandler+0x3d2>
 8003e6e:	e740      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e70:	f012 0220 	ands.w	r2, r2, #32
 8003e74:	d108      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e76:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003e78:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e7a:	f021 010a 	bic.w	r1, r1, #10
 8003e7e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003e80:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003e84:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003e88:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f47f aea0 	bne.w	8003bd2 <HAL_DMA_IRQHandler+0x3d2>
 8003e92:	e72e      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x4f2>
 8003e94:	58025408 	.word	0x58025408
 8003e98:	5802541c 	.word	0x5802541c
 8003e9c:	58025494 	.word	0x58025494

08003ea0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea0:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea2:	6805      	ldr	r5, [r0, #0]
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea4:	6880      	ldr	r0, [r0, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8003ea6:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea8:	2840      	cmp	r0, #64	; 0x40
 8003eaa:	d003      	beq.n	8003eb4 <DMA_MultiBufferSetConfig+0x14>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Stream source address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8003eac:	60a9      	str	r1, [r5, #8]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8003eae:	60ea      	str	r2, [r5, #12]
    }
  }
}
 8003eb0:	bc70      	pop	{r4, r5, r6}
 8003eb2:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8003eb4:	60aa      	str	r2, [r5, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8003eb6:	60e9      	str	r1, [r5, #12]
}
 8003eb8:	bc70      	pop	{r4, r5, r6}
 8003eba:	4770      	bx	lr

08003ebc <HAL_DMAEx_MultiBufferStart_IT>:
{
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	4604      	mov	r4, r0
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ec0:	6880      	ldr	r0, [r0, #8]
 8003ec2:	2880      	cmp	r0, #128	; 0x80
 8003ec4:	f000 8182 	beq.w	80041cc <HAL_DMAEx_MultiBufferStart_IT+0x310>
  __HAL_LOCK(hdma);
 8003ec8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003ecc:	2801      	cmp	r0, #1
 8003ece:	f000 8209 	beq.w	80042e4 <HAL_DMAEx_MultiBufferStart_IT+0x428>
 8003ed2:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ed4:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 8003ed8:	4285      	cmp	r5, r0
 8003eda:	fa5f fc85 	uxtb.w	ip, r5
  __HAL_LOCK(hdma);
 8003ede:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ee2:	d003      	beq.n	8003eec <HAL_DMAEx_MultiBufferStart_IT+0x30>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee8:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eec:	6825      	ldr	r5, [r4, #0]
 8003eee:	489e      	ldr	r0, [pc, #632]	; (8004168 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8003ef0:	4e9e      	ldr	r6, [pc, #632]	; (800416c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8003ef2:	42b5      	cmp	r5, r6
 8003ef4:	bf18      	it	ne
 8003ef6:	4285      	cmpne	r5, r0
 8003ef8:	f106 0618 	add.w	r6, r6, #24
 8003efc:	bf0c      	ite	eq
 8003efe:	2001      	moveq	r0, #1
 8003f00:	2000      	movne	r0, #0
 8003f02:	42b5      	cmp	r5, r6
 8003f04:	bf08      	it	eq
 8003f06:	f040 0001 	orreq.w	r0, r0, #1
 8003f0a:	3618      	adds	r6, #24
 8003f0c:	42b5      	cmp	r5, r6
 8003f0e:	bf08      	it	eq
 8003f10:	f040 0001 	orreq.w	r0, r0, #1
 8003f14:	3618      	adds	r6, #24
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	bf08      	it	eq
 8003f1a:	f040 0001 	orreq.w	r0, r0, #1
 8003f1e:	3618      	adds	r6, #24
 8003f20:	42b5      	cmp	r5, r6
 8003f22:	bf08      	it	eq
 8003f24:	f040 0001 	orreq.w	r0, r0, #1
 8003f28:	3618      	adds	r6, #24
 8003f2a:	42b5      	cmp	r5, r6
 8003f2c:	bf08      	it	eq
 8003f2e:	f040 0001 	orreq.w	r0, r0, #1
 8003f32:	3618      	adds	r6, #24
 8003f34:	42b5      	cmp	r5, r6
 8003f36:	bf08      	it	eq
 8003f38:	f040 0001 	orreq.w	r0, r0, #1
 8003f3c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8003f40:	42b5      	cmp	r5, r6
 8003f42:	bf08      	it	eq
 8003f44:	f040 0001 	orreq.w	r0, r0, #1
 8003f48:	3618      	adds	r6, #24
 8003f4a:	42b5      	cmp	r5, r6
 8003f4c:	bf08      	it	eq
 8003f4e:	f040 0001 	orreq.w	r0, r0, #1
 8003f52:	3618      	adds	r6, #24
 8003f54:	42b5      	cmp	r5, r6
 8003f56:	bf08      	it	eq
 8003f58:	f040 0001 	orreq.w	r0, r0, #1
 8003f5c:	3618      	adds	r6, #24
 8003f5e:	42b5      	cmp	r5, r6
 8003f60:	bf08      	it	eq
 8003f62:	f040 0001 	orreq.w	r0, r0, #1
 8003f66:	3618      	adds	r6, #24
 8003f68:	42b5      	cmp	r5, r6
 8003f6a:	bf08      	it	eq
 8003f6c:	f040 0001 	orreq.w	r0, r0, #1
 8003f70:	3618      	adds	r6, #24
 8003f72:	42b5      	cmp	r5, r6
 8003f74:	bf08      	it	eq
 8003f76:	f040 0001 	orreq.w	r0, r0, #1
 8003f7a:	3618      	adds	r6, #24
 8003f7c:	42b5      	cmp	r5, r6
 8003f7e:	bf08      	it	eq
 8003f80:	f040 0001 	orreq.w	r0, r0, #1
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f84:	2602      	movs	r6, #2
 8003f86:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f8a:	2600      	movs	r6, #0
 8003f8c:	6566      	str	r6, [r4, #84]	; 0x54
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f8e:	b918      	cbnz	r0, 8003f98 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
 8003f90:	4877      	ldr	r0, [pc, #476]	; (8004170 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8003f92:	4285      	cmp	r5, r0
 8003f94:	f040 81ad 	bne.w	80042f2 <HAL_DMAEx_MultiBufferStart_IT+0x436>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8003f98:	682e      	ldr	r6, [r5, #0]
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f9a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8003f9c:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fa0:	f000 001f 	and.w	r0, r0, #31
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8003fa4:	602e      	str	r6, [r5, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8003fa6:	612b      	str	r3, [r5, #16]
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fa8:	233f      	movs	r3, #63	; 0x3f
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8003faa:	6da5      	ldr	r5, [r4, #88]	; 0x58
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fac:	4083      	lsls	r3, r0
 8003fae:	60ab      	str	r3, [r5, #8]
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fb0:	9b06      	ldr	r3, [sp, #24]
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7ff ff74 	bl	8003ea0 <DMA_MultiBufferSetConfig>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fb8:	496b      	ldr	r1, [pc, #428]	; (8004168 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	4a6b      	ldr	r2, [pc, #428]	; (800416c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bf18      	it	ne
 8003fc2:	428b      	cmpne	r3, r1
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2101      	moveq	r1, #1
 8003fc8:	2100      	movne	r1, #0
 8003fca:	f040 8104 	bne.w	80041d6 <HAL_DMAEx_MultiBufferStart_IT+0x31a>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fce:	e9d4 2019 	ldrd	r2, r0, [r4, #100]	; 0x64
 8003fd2:	6050      	str	r0, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003fd4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003fd6:	b110      	cbz	r0, 8003fde <HAL_DMAEx_MultiBufferStart_IT+0x122>
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd8:	e9d4 251c 	ldrd	r2, r5, [r4, #112]	; 0x70
 8003fdc:	6055      	str	r5, [r2, #4]
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	f022 021e 	bic.w	r2, r2, #30
 8003fe4:	f042 0216 	orr.w	r2, r2, #22
 8003fe8:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ff0:	615a      	str	r2, [r3, #20]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ff2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	f000 8177 	beq.w	80042e8 <HAL_DMAEx_MultiBufferStart_IT+0x42c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f042 0208 	orr.w	r2, r2, #8
 8004000:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004002:	2900      	cmp	r1, #0
 8004004:	d16d      	bne.n	80040e2 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8004006:	4a5b      	ldr	r2, [pc, #364]	; (8004174 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004008:	485b      	ldr	r0, [pc, #364]	; (8004178 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800400a:	4283      	cmp	r3, r0
 800400c:	bf18      	it	ne
 800400e:	4293      	cmpne	r3, r2
 8004010:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004014:	bf0c      	ite	eq
 8004016:	2201      	moveq	r2, #1
 8004018:	2200      	movne	r2, #0
 800401a:	4283      	cmp	r3, r0
 800401c:	bf08      	it	eq
 800401e:	f042 0201 	orreq.w	r2, r2, #1
 8004022:	3018      	adds	r0, #24
 8004024:	4283      	cmp	r3, r0
 8004026:	bf08      	it	eq
 8004028:	f042 0201 	orreq.w	r2, r2, #1
 800402c:	3018      	adds	r0, #24
 800402e:	4283      	cmp	r3, r0
 8004030:	bf08      	it	eq
 8004032:	f042 0201 	orreq.w	r2, r2, #1
 8004036:	3018      	adds	r0, #24
 8004038:	4283      	cmp	r3, r0
 800403a:	bf08      	it	eq
 800403c:	f042 0201 	orreq.w	r2, r2, #1
 8004040:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004044:	4283      	cmp	r3, r0
 8004046:	bf08      	it	eq
 8004048:	f042 0201 	orreq.w	r2, r2, #1
 800404c:	3018      	adds	r0, #24
 800404e:	4283      	cmp	r3, r0
 8004050:	bf08      	it	eq
 8004052:	f042 0201 	orreq.w	r2, r2, #1
 8004056:	3018      	adds	r0, #24
 8004058:	4283      	cmp	r3, r0
 800405a:	bf08      	it	eq
 800405c:	f042 0201 	orreq.w	r2, r2, #1
 8004060:	3018      	adds	r0, #24
 8004062:	4283      	cmp	r3, r0
 8004064:	bf08      	it	eq
 8004066:	f042 0201 	orreq.w	r2, r2, #1
 800406a:	3018      	adds	r0, #24
 800406c:	4283      	cmp	r3, r0
 800406e:	bf08      	it	eq
 8004070:	f042 0201 	orreq.w	r2, r2, #1
 8004074:	3018      	adds	r0, #24
 8004076:	4283      	cmp	r3, r0
 8004078:	bf08      	it	eq
 800407a:	f042 0201 	orreq.w	r2, r2, #1
 800407e:	3018      	adds	r0, #24
 8004080:	4283      	cmp	r3, r0
 8004082:	bf08      	it	eq
 8004084:	f042 0201 	orreq.w	r2, r2, #1
 8004088:	3018      	adds	r0, #24
 800408a:	4283      	cmp	r3, r0
 800408c:	bf08      	it	eq
 800408e:	f042 0201 	orreq.w	r2, r2, #1
 8004092:	483a      	ldr	r0, [pc, #232]	; (800417c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004094:	4283      	cmp	r3, r0
 8004096:	bf08      	it	eq
 8004098:	f042 0201 	orreq.w	r2, r2, #1
 800409c:	3014      	adds	r0, #20
 800409e:	4283      	cmp	r3, r0
 80040a0:	bf08      	it	eq
 80040a2:	f042 0201 	orreq.w	r2, r2, #1
 80040a6:	3014      	adds	r0, #20
 80040a8:	4283      	cmp	r3, r0
 80040aa:	bf08      	it	eq
 80040ac:	f042 0201 	orreq.w	r2, r2, #1
 80040b0:	3014      	adds	r0, #20
 80040b2:	4283      	cmp	r3, r0
 80040b4:	bf08      	it	eq
 80040b6:	f042 0201 	orreq.w	r2, r2, #1
 80040ba:	3014      	adds	r0, #20
 80040bc:	4283      	cmp	r3, r0
 80040be:	bf08      	it	eq
 80040c0:	f042 0201 	orreq.w	r2, r2, #1
 80040c4:	3014      	adds	r0, #20
 80040c6:	4283      	cmp	r3, r0
 80040c8:	bf08      	it	eq
 80040ca:	f042 0201 	orreq.w	r2, r2, #1
 80040ce:	3014      	adds	r0, #20
 80040d0:	4283      	cmp	r3, r0
 80040d2:	bf08      	it	eq
 80040d4:	f042 0201 	orreq.w	r2, r2, #1
 80040d8:	b912      	cbnz	r2, 80040e0 <HAL_DMAEx_MultiBufferStart_IT+0x224>
 80040da:	4a29      	ldr	r2, [pc, #164]	; (8004180 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10f      	bne.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x244>
 80040e0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80040e4:	6814      	ldr	r4, [r2, #0]
 80040e6:	03e4      	lsls	r4, r4, #15
 80040e8:	d503      	bpl.n	80040f2 <HAL_DMAEx_MultiBufferStart_IT+0x236>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040ea:	6814      	ldr	r4, [r2, #0]
 80040ec:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80040f0:	6014      	str	r4, [r2, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80040f2:	b118      	cbz	r0, 80040fc <HAL_DMAEx_MultiBufferStart_IT+0x240>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040f4:	6802      	ldr	r2, [r0, #0]
 80040f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fa:	6002      	str	r2, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80040fc:	2900      	cmp	r1, #0
 80040fe:	d15f      	bne.n	80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8004100:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004102:	4c1c      	ldr	r4, [pc, #112]	; (8004174 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004104:	491f      	ldr	r1, [pc, #124]	; (8004184 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8004106:	42a3      	cmp	r3, r4
 8004108:	bf18      	it	ne
 800410a:	4293      	cmpne	r3, r2
 800410c:	481e      	ldr	r0, [pc, #120]	; (8004188 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800410e:	f104 0460 	add.w	r4, r4, #96	; 0x60
 8004112:	bf0c      	ite	eq
 8004114:	2201      	moveq	r2, #1
 8004116:	2200      	movne	r2, #0
 8004118:	428b      	cmp	r3, r1
 800411a:	bf08      	it	eq
 800411c:	f042 0201 	orreq.w	r2, r2, #1
 8004120:	3130      	adds	r1, #48	; 0x30
 8004122:	4283      	cmp	r3, r0
 8004124:	bf08      	it	eq
 8004126:	f042 0201 	orreq.w	r2, r2, #1
 800412a:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 800412e:	428b      	cmp	r3, r1
 8004130:	bf08      	it	eq
 8004132:	f042 0201 	orreq.w	r2, r2, #1
 8004136:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800413a:	42a3      	cmp	r3, r4
 800413c:	bf08      	it	eq
 800413e:	f042 0201 	orreq.w	r2, r2, #1
 8004142:	f504 7468 	add.w	r4, r4, #928	; 0x3a0
 8004146:	428b      	cmp	r3, r1
 8004148:	bf08      	it	eq
 800414a:	f042 0201 	orreq.w	r2, r2, #1
 800414e:	3130      	adds	r1, #48	; 0x30
 8004150:	4283      	cmp	r3, r0
 8004152:	bf08      	it	eq
 8004154:	f042 0201 	orreq.w	r2, r2, #1
 8004158:	3060      	adds	r0, #96	; 0x60
 800415a:	428b      	cmp	r3, r1
 800415c:	bf08      	it	eq
 800415e:	f042 0201 	orreq.w	r2, r2, #1
 8004162:	3130      	adds	r1, #48	; 0x30
 8004164:	e012      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>
 8004166:	bf00      	nop
 8004168:	40020010 	.word	0x40020010
 800416c:	40020028 	.word	0x40020028
 8004170:	400204b8 	.word	0x400204b8
 8004174:	40020058 	.word	0x40020058
 8004178:	40020040 	.word	0x40020040
 800417c:	58025408 	.word	0x58025408
 8004180:	58025494 	.word	0x58025494
 8004184:	40020070 	.word	0x40020070
 8004188:	40020088 	.word	0x40020088
 800418c:	42a3      	cmp	r3, r4
 800418e:	bf08      	it	eq
 8004190:	f042 0201 	orreq.w	r2, r2, #1
 8004194:	428b      	cmp	r3, r1
 8004196:	bf08      	it	eq
 8004198:	f042 0201 	orreq.w	r2, r2, #1
 800419c:	3130      	adds	r1, #48	; 0x30
 800419e:	4283      	cmp	r3, r0
 80041a0:	bf08      	it	eq
 80041a2:	f042 0201 	orreq.w	r2, r2, #1
 80041a6:	428b      	cmp	r3, r1
 80041a8:	bf08      	it	eq
 80041aa:	f042 0201 	orreq.w	r2, r2, #1
 80041ae:	b93a      	cbnz	r2, 80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 80041b0:	3030      	adds	r0, #48	; 0x30
 80041b2:	1a18      	subs	r0, r3, r0
 80041b4:	fab0 f080 	clz	r0, r0
 80041b8:	0940      	lsrs	r0, r0, #5
 80041ba:	2800      	cmp	r0, #0
 80041bc:	f000 80a7 	beq.w	800430e <HAL_DMAEx_MultiBufferStart_IT+0x452>
 80041c0:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80041cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 80041d0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80041d2:	6563      	str	r3, [r4, #84]	; 0x54
}
 80041d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041d6:	3218      	adds	r2, #24
 80041d8:	4851      	ldr	r0, [pc, #324]	; (8004320 <HAL_DMAEx_MultiBufferStart_IT+0x464>)
 80041da:	4d52      	ldr	r5, [pc, #328]	; (8004324 <HAL_DMAEx_MultiBufferStart_IT+0x468>)
 80041dc:	4283      	cmp	r3, r0
 80041de:	bf18      	it	ne
 80041e0:	4293      	cmpne	r3, r2
 80041e2:	f100 0018 	add.w	r0, r0, #24
 80041e6:	bf0c      	ite	eq
 80041e8:	2201      	moveq	r2, #1
 80041ea:	2200      	movne	r2, #0
 80041ec:	4283      	cmp	r3, r0
 80041ee:	bf08      	it	eq
 80041f0:	f042 0201 	orreq.w	r2, r2, #1
 80041f4:	3018      	adds	r0, #24
 80041f6:	4283      	cmp	r3, r0
 80041f8:	bf08      	it	eq
 80041fa:	f042 0201 	orreq.w	r2, r2, #1
 80041fe:	3018      	adds	r0, #24
 8004200:	4283      	cmp	r3, r0
 8004202:	bf08      	it	eq
 8004204:	f042 0201 	orreq.w	r2, r2, #1
 8004208:	3018      	adds	r0, #24
 800420a:	4283      	cmp	r3, r0
 800420c:	bf08      	it	eq
 800420e:	f042 0201 	orreq.w	r2, r2, #1
 8004212:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004216:	4283      	cmp	r3, r0
 8004218:	bf08      	it	eq
 800421a:	f042 0201 	orreq.w	r2, r2, #1
 800421e:	3018      	adds	r0, #24
 8004220:	4283      	cmp	r3, r0
 8004222:	bf08      	it	eq
 8004224:	f042 0201 	orreq.w	r2, r2, #1
 8004228:	3018      	adds	r0, #24
 800422a:	4283      	cmp	r3, r0
 800422c:	bf08      	it	eq
 800422e:	f042 0201 	orreq.w	r2, r2, #1
 8004232:	3018      	adds	r0, #24
 8004234:	4283      	cmp	r3, r0
 8004236:	bf08      	it	eq
 8004238:	f042 0201 	orreq.w	r2, r2, #1
 800423c:	3018      	adds	r0, #24
 800423e:	4283      	cmp	r3, r0
 8004240:	bf08      	it	eq
 8004242:	f042 0201 	orreq.w	r2, r2, #1
 8004246:	3018      	adds	r0, #24
 8004248:	4283      	cmp	r3, r0
 800424a:	bf08      	it	eq
 800424c:	f042 0201 	orreq.w	r2, r2, #1
 8004250:	3018      	adds	r0, #24
 8004252:	4283      	cmp	r3, r0
 8004254:	bf08      	it	eq
 8004256:	f042 0201 	orreq.w	r2, r2, #1
 800425a:	3018      	adds	r0, #24
 800425c:	4283      	cmp	r3, r0
 800425e:	bf08      	it	eq
 8004260:	f042 0201 	orreq.w	r2, r2, #1
 8004264:	4830      	ldr	r0, [pc, #192]	; (8004328 <HAL_DMAEx_MultiBufferStart_IT+0x46c>)
 8004266:	42ab      	cmp	r3, r5
 8004268:	bf18      	it	ne
 800426a:	4283      	cmpne	r3, r0
 800426c:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8004270:	bf0c      	ite	eq
 8004272:	2001      	moveq	r0, #1
 8004274:	2000      	movne	r0, #0
 8004276:	42ab      	cmp	r3, r5
 8004278:	bf08      	it	eq
 800427a:	f040 0001 	orreq.w	r0, r0, #1
 800427e:	3514      	adds	r5, #20
 8004280:	42ab      	cmp	r3, r5
 8004282:	bf08      	it	eq
 8004284:	f040 0001 	orreq.w	r0, r0, #1
 8004288:	3514      	adds	r5, #20
 800428a:	42ab      	cmp	r3, r5
 800428c:	bf08      	it	eq
 800428e:	f040 0001 	orreq.w	r0, r0, #1
 8004292:	3514      	adds	r5, #20
 8004294:	42ab      	cmp	r3, r5
 8004296:	bf08      	it	eq
 8004298:	f040 0001 	orreq.w	r0, r0, #1
 800429c:	3514      	adds	r5, #20
 800429e:	42ab      	cmp	r3, r5
 80042a0:	bf08      	it	eq
 80042a2:	f040 0001 	orreq.w	r0, r0, #1
 80042a6:	3514      	adds	r5, #20
 80042a8:	42ab      	cmp	r3, r5
 80042aa:	bf08      	it	eq
 80042ac:	f040 0001 	orreq.w	r0, r0, #1
 80042b0:	b900      	cbnz	r0, 80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>
 80042b2:	b152      	cbz	r2, 80042ca <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b4:	e9d4 0519 	ldrd	r0, r5, [r4, #100]	; 0x64
 80042b8:	6045      	str	r5, [r0, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80042ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80042bc:	b110      	cbz	r0, 80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x408>
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042be:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
 80042c2:	606e      	str	r6, [r5, #4]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	f47f ae8a 	bne.w	8003fde <HAL_DMAEx_MultiBufferStart_IT+0x122>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80042ca:	681a      	ldr	r2, [r3, #0]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042cc:	6c20      	ldr	r0, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80042ce:	f022 020e 	bic.w	r2, r2, #14
 80042d2:	f042 020a 	orr.w	r2, r2, #10
 80042d6:	601a      	str	r2, [r3, #0]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042d8:	b1f0      	cbz	r0, 8004318 <HAL_DMAEx_MultiBufferStart_IT+0x45c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f042 0204 	orr.w	r2, r2, #4
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e690      	b.n	8004006 <HAL_DMAEx_MultiBufferStart_IT+0x14a>
  __HAL_LOCK(hdma);
 80042e4:	2002      	movs	r0, #2
}
 80042e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	f47f ae85 	bne.w	8003ffa <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 80042f0:	e687      	b.n	8004002 <HAL_DMAEx_MultiBufferStart_IT+0x146>
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042f2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80042f4:	f248 0620 	movw	r6, #32800	; 0x8020
 80042f8:	682f      	ldr	r7, [r5, #0]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042fa:	f000 001f 	and.w	r0, r0, #31
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80042fe:	433e      	orrs	r6, r7
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004300:	fa0c f000 	lsl.w	r0, ip, r0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004304:	602e      	str	r6, [r5, #0]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004306:	612b      	str	r3, [r5, #16]
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004308:	6da3      	ldr	r3, [r4, #88]	; 0x58
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800430a:	6058      	str	r0, [r3, #4]
 800430c:	e650      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0xf4>
    __HAL_DMA_ENABLE(hdma);
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
}
 8004316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004318:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800431a:	2a00      	cmp	r2, #0
 800431c:	d1dd      	bne.n	80042da <HAL_DMAEx_MultiBufferStart_IT+0x41e>
 800431e:	e672      	b.n	8004006 <HAL_DMAEx_MultiBufferStart_IT+0x14a>
 8004320:	40020058 	.word	0x40020058
 8004324:	58025408 	.word	0x58025408
 8004328:	5802541c 	.word	0x5802541c

0800432c <HAL_DMAEx_ChangeMemory>:
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800432c:	6800      	ldr	r0, [r0, #0]
{
 800432e:	b410      	push	{r4}
    if(memory == MEMORY0)
 8004330:	b922      	cbnz	r2, 800433c <HAL_DMAEx_ChangeMemory+0x10>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8004332:	60c1      	str	r1, [r0, #12]
}
 8004334:	2000      	movs	r0, #0
 8004336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800433a:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800433c:	6101      	str	r1, [r0, #16]
}
 800433e:	2000      	movs	r0, #0
 8004340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop

08004348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800434c:	680c      	ldr	r4, [r1, #0]
{
 800434e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004350:	2c00      	cmp	r4, #0
 8004352:	f000 80a6 	beq.w	80044a2 <HAL_GPIO_Init+0x15a>
 8004356:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435a:	4f8e      	ldr	r7, [pc, #568]	; (8004594 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 800435c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800435e:	2201      	movs	r2, #1
 8004360:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8004362:	ea12 0e04 	ands.w	lr, r2, r4
 8004366:	f000 8095 	beq.w	8004494 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800436a:	684d      	ldr	r5, [r1, #4]
 800436c:	f005 0903 	and.w	r9, r5, #3
 8004370:	f109 36ff 	add.w	r6, r9, #4294967295
 8004374:	2e01      	cmp	r6, #1
 8004376:	f240 8097 	bls.w	80044a8 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800437a:	f1b9 0f03 	cmp.w	r9, #3
 800437e:	f040 80d1 	bne.w	8004524 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004382:	fa09 f20c 	lsl.w	r2, r9, ip
 8004386:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800438a:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800438c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004390:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004394:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8004398:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800439a:	d07b      	beq.n	8004494 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80043a0:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043a4:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a8:	f042 0202 	orr.w	r2, r2, #2
 80043ac:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043b0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80043b8:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 80043bc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80043c0:	f002 0202 	and.w	r2, r2, #2
 80043c4:	9201      	str	r2, [sp, #4]
 80043c6:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043c8:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80043ca:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043ce:	fa02 f209 	lsl.w	r2, r2, r9
 80043d2:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043d6:	4e70      	ldr	r6, [pc, #448]	; (8004598 <HAL_GPIO_Init+0x250>)
 80043d8:	42b0      	cmp	r0, r6
 80043da:	d029      	beq.n	8004430 <HAL_GPIO_Init+0xe8>
 80043dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043e0:	42b0      	cmp	r0, r6
 80043e2:	f000 80ac 	beq.w	800453e <HAL_GPIO_Init+0x1f6>
 80043e6:	4e6d      	ldr	r6, [pc, #436]	; (800459c <HAL_GPIO_Init+0x254>)
 80043e8:	42b0      	cmp	r0, r6
 80043ea:	f000 80ae 	beq.w	800454a <HAL_GPIO_Init+0x202>
 80043ee:	4e6c      	ldr	r6, [pc, #432]	; (80045a0 <HAL_GPIO_Init+0x258>)
 80043f0:	42b0      	cmp	r0, r6
 80043f2:	f000 809e 	beq.w	8004532 <HAL_GPIO_Init+0x1ea>
 80043f6:	4e6b      	ldr	r6, [pc, #428]	; (80045a4 <HAL_GPIO_Init+0x25c>)
 80043f8:	42b0      	cmp	r0, r6
 80043fa:	f000 80b2 	beq.w	8004562 <HAL_GPIO_Init+0x21a>
 80043fe:	4e6a      	ldr	r6, [pc, #424]	; (80045a8 <HAL_GPIO_Init+0x260>)
 8004400:	42b0      	cmp	r0, r6
 8004402:	f000 80b4 	beq.w	800456e <HAL_GPIO_Init+0x226>
 8004406:	4e69      	ldr	r6, [pc, #420]	; (80045ac <HAL_GPIO_Init+0x264>)
 8004408:	42b0      	cmp	r0, r6
 800440a:	f000 80a4 	beq.w	8004556 <HAL_GPIO_Init+0x20e>
 800440e:	4e68      	ldr	r6, [pc, #416]	; (80045b0 <HAL_GPIO_Init+0x268>)
 8004410:	42b0      	cmp	r0, r6
 8004412:	f000 80b2 	beq.w	800457a <HAL_GPIO_Init+0x232>
 8004416:	4e67      	ldr	r6, [pc, #412]	; (80045b4 <HAL_GPIO_Init+0x26c>)
 8004418:	42b0      	cmp	r0, r6
 800441a:	f000 80b4 	beq.w	8004586 <HAL_GPIO_Init+0x23e>
 800441e:	4e66      	ldr	r6, [pc, #408]	; (80045b8 <HAL_GPIO_Init+0x270>)
 8004420:	42b0      	cmp	r0, r6
 8004422:	bf0c      	ite	eq
 8004424:	2609      	moveq	r6, #9
 8004426:	260a      	movne	r6, #10
 8004428:	fa06 f909 	lsl.w	r9, r6, r9
 800442c:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004430:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004438:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800443a:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 800443e:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004440:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004444:	bf54      	ite	pl
 8004446:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 800444a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 800444e:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004450:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 8004452:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004458:	bf54      	ite	pl
 800445a:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 800445e:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 8004462:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004464:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004468:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800446a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800446e:	bf54      	ite	pl
 8004470:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8004474:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004478:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800447a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800447e:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8004482:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8004486:	bf54      	ite	pl
 8004488:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 800448c:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8004490:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8004494:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004496:	f10c 0c02 	add.w	ip, ip, #2
 800449a:	fa34 f203 	lsrs.w	r2, r4, r3
 800449e:	f47f af5e 	bne.w	800435e <HAL_GPIO_Init+0x16>
  }
}
 80044a2:	b003      	add	sp, #12
 80044a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044a8:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80044ac:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ae:	fa08 f80c 	lsl.w	r8, r8, ip
 80044b2:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044b6:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044b8:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044bc:	fa06 f60c 	lsl.w	r6, r6, ip
 80044c0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80044c4:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 80044ca:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ce:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044d0:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044d4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80044d6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80044d8:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044da:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044de:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044e0:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e4:	fa06 f60c 	lsl.w	r6, r6, ip
 80044e8:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 80044ec:	fa09 f20c 	lsl.w	r2, r9, ip
 80044f0:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f2:	f47f af4a 	bne.w	800438a <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044f6:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80044fa:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044fe:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8004502:	260f      	movs	r6, #15
 8004504:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8004508:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 800450c:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004510:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004514:	690e      	ldr	r6, [r1, #16]
 8004516:	fa06 f60b 	lsl.w	r6, r6, fp
 800451a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 800451e:	f8c9 6020 	str.w	r6, [r9, #32]
 8004522:	e732      	b.n	800438a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004524:	f04f 0803 	mov.w	r8, #3
 8004528:	fa08 f80c 	lsl.w	r8, r8, ip
 800452c:	ea6f 0808 	mvn.w	r8, r8
 8004530:	e7d2      	b.n	80044d8 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004532:	2603      	movs	r6, #3
 8004534:	fa06 f909 	lsl.w	r9, r6, r9
 8004538:	ea42 0209 	orr.w	r2, r2, r9
 800453c:	e778      	b.n	8004430 <HAL_GPIO_Init+0xe8>
 800453e:	2601      	movs	r6, #1
 8004540:	fa06 f909 	lsl.w	r9, r6, r9
 8004544:	ea42 0209 	orr.w	r2, r2, r9
 8004548:	e772      	b.n	8004430 <HAL_GPIO_Init+0xe8>
 800454a:	2602      	movs	r6, #2
 800454c:	fa06 f909 	lsl.w	r9, r6, r9
 8004550:	ea42 0209 	orr.w	r2, r2, r9
 8004554:	e76c      	b.n	8004430 <HAL_GPIO_Init+0xe8>
 8004556:	2606      	movs	r6, #6
 8004558:	fa06 f909 	lsl.w	r9, r6, r9
 800455c:	ea42 0209 	orr.w	r2, r2, r9
 8004560:	e766      	b.n	8004430 <HAL_GPIO_Init+0xe8>
 8004562:	2604      	movs	r6, #4
 8004564:	fa06 f909 	lsl.w	r9, r6, r9
 8004568:	ea42 0209 	orr.w	r2, r2, r9
 800456c:	e760      	b.n	8004430 <HAL_GPIO_Init+0xe8>
 800456e:	2605      	movs	r6, #5
 8004570:	fa06 f909 	lsl.w	r9, r6, r9
 8004574:	ea42 0209 	orr.w	r2, r2, r9
 8004578:	e75a      	b.n	8004430 <HAL_GPIO_Init+0xe8>
 800457a:	2607      	movs	r6, #7
 800457c:	fa06 f909 	lsl.w	r9, r6, r9
 8004580:	ea42 0209 	orr.w	r2, r2, r9
 8004584:	e754      	b.n	8004430 <HAL_GPIO_Init+0xe8>
 8004586:	2608      	movs	r6, #8
 8004588:	fa06 f909 	lsl.w	r9, r6, r9
 800458c:	ea42 0209 	orr.w	r2, r2, r9
 8004590:	e74e      	b.n	8004430 <HAL_GPIO_Init+0xe8>
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400
 8004598:	58020000 	.word	0x58020000
 800459c:	58020800 	.word	0x58020800
 80045a0:	58020c00 	.word	0x58020c00
 80045a4:	58021000 	.word	0x58021000
 80045a8:	58021400 	.word	0x58021400
 80045ac:	58021800 	.word	0x58021800
 80045b0:	58021c00 	.word	0x58021c00
 80045b4:	58022000 	.word	0x58022000
 80045b8:	58022400 	.word	0x58022400

080045bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045bc:	b902      	cbnz	r2, 80045c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045be:	0409      	lsls	r1, r1, #16
 80045c0:	6181      	str	r1, [r0, #24]
  }
}
 80045c2:	4770      	bx	lr

080045c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
              hi2c->State = HAL_I2C_STATE_READY;
 80045c8:	f04f 0820 	mov.w	r8, #32
{
 80045cc:	4682      	mov	sl, r0
 80045ce:	460e      	mov	r6, r1
 80045d0:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d2:	f8da 3000 	ldr.w	r3, [sl]
 80045d6:	699d      	ldr	r5, [r3, #24]
 80045d8:	f015 0502 	ands.w	r5, r5, #2
 80045dc:	f040 80c6 	bne.w	800476c <I2C_WaitOnTXISFlagUntilTimeout+0x1a8>
  uint32_t itflag   = hi2c->Instance->ISR;
 80045e0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045e2:	f012 0210 	ands.w	r2, r2, #16
 80045e6:	d051      	beq.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e8:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80045ea:	46b9      	mov	r9, r7
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ec:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045ee:	1c74      	adds	r4, r6, #1
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	d151      	bne.n	8004698 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
 80045f4:	0690      	lsls	r0, r2, #26
 80045f6:	f100 80b0 	bmi.w	800475a <I2C_WaitOnTXISFlagUntilTimeout+0x196>
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	f040 80b0 	bne.w	8004760 <I2C_WaitOnTXISFlagUntilTimeout+0x19c>
 8004600:	699c      	ldr	r4, [r3, #24]
 8004602:	06a1      	lsls	r1, r4, #26
 8004604:	d5fc      	bpl.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004606:	240d      	movs	r4, #13
 8004608:	2007      	movs	r0, #7
 800460a:	f04f 0c05 	mov.w	ip, #5
    }

    error_code |= HAL_I2C_ERROR_AF;
 800460e:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8004610:	2501      	movs	r5, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004612:	f8c3 801c 	str.w	r8, [r3, #28]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004616:	6999      	ldr	r1, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004618:	f411 7f80 	tst.w	r1, #256	; 0x100
 800461c:	d027      	beq.n	800466e <I2C_WaitOnTXISFlagUntilTimeout+0xaa>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800461e:	f44f 7280 	mov.w	r2, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004622:	054d      	lsls	r5, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004624:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004626:	d426      	bmi.n	8004676 <I2C_WaitOnTXISFlagUntilTimeout+0xb2>

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004628:	058c      	lsls	r4, r1, #22
 800462a:	d479      	bmi.n	8004720 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
 800462c:	4664      	mov	r4, ip
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	0790      	lsls	r0, r2, #30
 8004632:	d501      	bpl.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    hi2c->Instance->TXDR = 0x00U;
 8004634:	2200      	movs	r2, #0
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	07d1      	lsls	r1, r2, #31
 800463c:	d403      	bmi.n	8004646 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004646:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800464a:	484b      	ldr	r0, [pc, #300]	; (8004778 <I2C_WaitOnTXISFlagUntilTimeout+0x1b4>)
    hi2c->State = HAL_I2C_STATE_READY;
 800464c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800464e:	4002      	ands	r2, r0
      return HAL_ERROR;
 8004650:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004652:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8004654:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800465c:	4323      	orrs	r3, r4
 800465e:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	f88a 5041 	strb.w	r5, [sl, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004666:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
}
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800466e:	0548      	lsls	r0, r1, #21
 8004670:	d551      	bpl.n	8004716 <I2C_WaitOnTXISFlagUntilTimeout+0x152>
    error_code |= HAL_I2C_ERROR_OVR;
 8004672:	f042 0408 	orr.w	r4, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004676:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800467a:	058d      	lsls	r5, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800467c:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800467e:	d5d6      	bpl.n	800462e <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004680:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004688:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 800468a:	e7d0      	b.n	800462e <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
 800468c:	2409      	movs	r4, #9
 800468e:	2003      	movs	r0, #3
 8004690:	f04f 0c01 	mov.w	ip, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004694:	4615      	mov	r5, r2
 8004696:	e7be      	b.n	8004616 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004698:	0692      	lsls	r2, r2, #26
 800469a:	d45e      	bmi.n	800475a <I2C_WaitOnTXISFlagUntilTimeout+0x196>
 800469c:	2d00      	cmp	r5, #0
 800469e:	d15f      	bne.n	8004760 <I2C_WaitOnTXISFlagUntilTimeout+0x19c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fe f8a4 	bl	80027ec <HAL_GetTick>
 80046a4:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046a8:	f8da 3000 	ldr.w	r3, [sl]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046ac:	4286      	cmp	r6, r0
 80046ae:	d301      	bcc.n	80046b4 <I2C_WaitOnTXISFlagUntilTimeout+0xf0>
 80046b0:	2e00      	cmp	r6, #0
 80046b2:	d19c      	bne.n	80045ee <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046b4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80046b6:	f89a 2042 	ldrb.w	r2, [sl, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046ba:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80046bc:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046be:	040c      	lsls	r4, r1, #16
 80046c0:	d50f      	bpl.n	80046e2 <I2C_WaitOnTXISFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
 80046c2:	0441      	lsls	r1, r0, #17
 80046c4:	d40d      	bmi.n	80046e2 <I2C_WaitOnTXISFlagUntilTimeout+0x11e>
 80046c6:	2a20      	cmp	r2, #32
 80046c8:	d00b      	beq.n	80046e2 <I2C_WaitOnTXISFlagUntilTimeout+0x11e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80046d2:	f7fe f88b 	bl	80027ec <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d6:	f8da 3000 	ldr.w	r3, [sl]
            tickstart = HAL_GetTick();
 80046da:	4681      	mov	r9, r0
 80046dc:	e001      	b.n	80046e2 <I2C_WaitOnTXISFlagUntilTimeout+0x11e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046de:	f8da 3000 	ldr.w	r3, [sl]
 80046e2:	699c      	ldr	r4, [r3, #24]
 80046e4:	f014 0420 	ands.w	r4, r4, #32
 80046e8:	d181      	bne.n	80045ee <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046ea:	f7fe f87f 	bl	80027ec <HAL_GetTick>
 80046ee:	eba0 0009 	sub.w	r0, r0, r9
 80046f2:	2819      	cmp	r0, #25
 80046f4:	d9f3      	bls.n	80046de <I2C_WaitOnTXISFlagUntilTimeout+0x11a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f6:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
              status = HAL_ERROR;
 80046fa:	2501      	movs	r5, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046fc:	f8da 3000 	ldr.w	r3, [sl]
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004700:	f042 0220 	orr.w	r2, r2, #32
              __HAL_UNLOCK(hi2c);
 8004704:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800470c:	f88a 8041 	strb.w	r8, [sl, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004710:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
              status = HAL_ERROR;
 8004714:	e7e5      	b.n	80046e2 <I2C_WaitOnTXISFlagUntilTimeout+0x11e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004716:	058c      	lsls	r4, r1, #22
 8004718:	d504      	bpl.n	8004724 <I2C_WaitOnTXISFlagUntilTimeout+0x160>
    error_code |= HAL_I2C_ERROR_ARLO;
 800471a:	f042 0402 	orr.w	r4, r2, #2
 800471e:	e7b1      	b.n	8004684 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004720:	4604      	mov	r4, r0
 8004722:	e7af      	b.n	8004684 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>
  if (status != HAL_OK)
 8004724:	bb2d      	cbnz	r5, 8004772 <I2C_WaitOnTXISFlagUntilTimeout+0x1ae>
    if (Timeout != HAL_MAX_DELAY)
 8004726:	1c72      	adds	r2, r6, #1
 8004728:	f43f af55 	beq.w	80045d6 <I2C_WaitOnTXISFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472c:	f7fe f85e 	bl	80027ec <HAL_GetTick>
 8004730:	1bc0      	subs	r0, r0, r7
 8004732:	42b0      	cmp	r0, r6
 8004734:	d802      	bhi.n	800473c <I2C_WaitOnTXISFlagUntilTimeout+0x178>
 8004736:	2e00      	cmp	r6, #0
 8004738:	f47f af4b 	bne.w	80045d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473c:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004740:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8004744:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004746:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8004748:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800474c:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004750:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
        return HAL_ERROR;
 8004758:	e787      	b.n	800466a <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
    if (status == HAL_OK)
 800475a:	2d00      	cmp	r5, #0
 800475c:	f43f af53 	beq.w	8004606 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
 8004760:	240d      	movs	r4, #13
 8004762:	2007      	movs	r0, #7
 8004764:	f04f 0c05 	mov.w	ip, #5
    error_code |= HAL_I2C_ERROR_AF;
 8004768:	2204      	movs	r2, #4
 800476a:	e754      	b.n	8004616 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
  return HAL_OK;
 800476c:	2000      	movs	r0, #0
}
 800476e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004772:	4614      	mov	r4, r2
 8004774:	e75b      	b.n	800462e <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
 8004776:	bf00      	nop
 8004778:	fe00e800 	.word	0xfe00e800

0800477c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
              hi2c->State = HAL_I2C_STATE_READY;
 8004780:	f04f 0820 	mov.w	r8, #32
{
 8004784:	4682      	mov	sl, r0
 8004786:	460e      	mov	r6, r1
 8004788:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478a:	f8da 3000 	ldr.w	r3, [sl]
 800478e:	699d      	ldr	r5, [r3, #24]
 8004790:	f015 0520 	ands.w	r5, r5, #32
 8004794:	f040 80c4 	bne.w	8004920 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a4>
  uint32_t itflag   = hi2c->Instance->ISR;
 8004798:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800479a:	f012 0210 	ands.w	r2, r2, #16
 800479e:	d051      	beq.n	8004844 <I2C_WaitOnSTOPFlagUntilTimeout+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a0:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80047a2:	46b9      	mov	r9, r7
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a4:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047a6:	1c74      	adds	r4, r6, #1
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	d151      	bne.n	8004850 <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
 80047ac:	0690      	lsls	r0, r2, #26
 80047ae:	f100 80ae 	bmi.w	800490e <I2C_WaitOnSTOPFlagUntilTimeout+0x192>
 80047b2:	2d00      	cmp	r5, #0
 80047b4:	f040 80ae 	bne.w	8004914 <I2C_WaitOnSTOPFlagUntilTimeout+0x198>
 80047b8:	699c      	ldr	r4, [r3, #24]
 80047ba:	06a1      	lsls	r1, r4, #26
 80047bc:	d5fc      	bpl.n	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047be:	240d      	movs	r4, #13
 80047c0:	2007      	movs	r0, #7
 80047c2:	f04f 0c05 	mov.w	ip, #5
    error_code |= HAL_I2C_ERROR_AF;
 80047c6:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80047c8:	2501      	movs	r5, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ca:	f8c3 801c 	str.w	r8, [r3, #28]
  itflag = hi2c->Instance->ISR;
 80047ce:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047d0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80047d4:	d027      	beq.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047d6:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047da:	054d      	lsls	r5, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047dc:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047de:	d426      	bmi.n	800482e <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047e0:	058c      	lsls	r4, r1, #22
 80047e2:	d479      	bmi.n	80048d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x15c>
 80047e4:	4664      	mov	r4, ip
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	0791      	lsls	r1, r2, #30
 80047ea:	d501      	bpl.n	80047f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    hi2c->Instance->TXDR = 0x00U;
 80047ec:	2200      	movs	r2, #0
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	07d2      	lsls	r2, r2, #31
 80047f4:	d403      	bmi.n	80047fe <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80047fe:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8004802:	484a      	ldr	r0, [pc, #296]	; (800492c <I2C_WaitOnSTOPFlagUntilTimeout+0x1b0>)
    hi2c->State = HAL_I2C_STATE_READY;
 8004804:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 8004806:	4002      	ands	r2, r0
      return HAL_ERROR;
 8004808:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800480a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800480c:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8004810:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8004814:	4323      	orrs	r3, r4
 8004816:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	f88a 5041 	strb.w	r5, [sl, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800481e:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
}
 8004822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004826:	0548      	lsls	r0, r1, #21
 8004828:	d551      	bpl.n	80048ce <I2C_WaitOnSTOPFlagUntilTimeout+0x152>
    error_code |= HAL_I2C_ERROR_OVR;
 800482a:	f042 0408 	orr.w	r4, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800482e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004832:	058d      	lsls	r5, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004834:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004836:	d5d6      	bpl.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004838:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800483c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004840:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 8004842:	e7d0      	b.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 8004844:	2409      	movs	r4, #9
 8004846:	2003      	movs	r0, #3
 8004848:	f04f 0c01 	mov.w	ip, #1
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	4615      	mov	r5, r2
 800484e:	e7be      	b.n	80047ce <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004850:	0692      	lsls	r2, r2, #26
 8004852:	d45c      	bmi.n	800490e <I2C_WaitOnSTOPFlagUntilTimeout+0x192>
 8004854:	2d00      	cmp	r5, #0
 8004856:	d15d      	bne.n	8004914 <I2C_WaitOnSTOPFlagUntilTimeout+0x198>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004858:	f7fd ffc8 	bl	80027ec <HAL_GetTick>
 800485c:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004860:	f8da 3000 	ldr.w	r3, [sl]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004864:	4286      	cmp	r6, r0
 8004866:	d301      	bcc.n	800486c <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
 8004868:	2e00      	cmp	r6, #0
 800486a:	d19c      	bne.n	80047a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800486c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800486e:	f89a 2042 	ldrb.w	r2, [sl, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004872:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8004874:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004876:	040c      	lsls	r4, r1, #16
 8004878:	d50f      	bpl.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
 800487a:	0441      	lsls	r1, r0, #17
 800487c:	d40d      	bmi.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
 800487e:	2a20      	cmp	r2, #32
 8004880:	d00b      	beq.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004888:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800488a:	f7fd ffaf 	bl	80027ec <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800488e:	f8da 3000 	ldr.w	r3, [sl]
            tickstart = HAL_GetTick();
 8004892:	4681      	mov	r9, r0
 8004894:	e001      	b.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004896:	f8da 3000 	ldr.w	r3, [sl]
 800489a:	699c      	ldr	r4, [r3, #24]
 800489c:	f014 0420 	ands.w	r4, r4, #32
 80048a0:	d181      	bne.n	80047a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048a2:	f7fd ffa3 	bl	80027ec <HAL_GetTick>
 80048a6:	eba0 0009 	sub.w	r0, r0, r9
 80048aa:	2819      	cmp	r0, #25
 80048ac:	d9f3      	bls.n	8004896 <I2C_WaitOnSTOPFlagUntilTimeout+0x11a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ae:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
              status = HAL_ERROR;
 80048b2:	2501      	movs	r5, #1
              __HAL_UNLOCK(hi2c);
 80048b4:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048b8:	f043 0320 	orr.w	r3, r3, #32
 80048bc:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80048c0:	f88a 8041 	strb.w	r8, [sl, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048c4:	f8da 3000 	ldr.w	r3, [sl]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c8:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
              status = HAL_ERROR;
 80048cc:	e7e5      	b.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048ce:	0588      	lsls	r0, r1, #22
 80048d0:	d504      	bpl.n	80048dc <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
    error_code |= HAL_I2C_ERROR_ARLO;
 80048d2:	f042 0402 	orr.w	r4, r2, #2
 80048d6:	e7b1      	b.n	800483c <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048d8:	4604      	mov	r4, r0
 80048da:	e7af      	b.n	800483c <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  if (status != HAL_OK)
 80048dc:	bb1d      	cbnz	r5, 8004926 <I2C_WaitOnSTOPFlagUntilTimeout+0x1aa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fd ff85 	bl	80027ec <HAL_GetTick>
 80048e2:	1bc0      	subs	r0, r0, r7
 80048e4:	42b0      	cmp	r0, r6
 80048e6:	d802      	bhi.n	80048ee <I2C_WaitOnSTOPFlagUntilTimeout+0x172>
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	f47f af4e 	bne.w	800478a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ee:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048f2:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80048f6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048f8:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80048fa:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048fe:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004902:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
}
 800490a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
 800490e:	2d00      	cmp	r5, #0
 8004910:	f43f af55 	beq.w	80047be <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8004914:	240d      	movs	r4, #13
 8004916:	2007      	movs	r0, #7
 8004918:	f04f 0c05 	mov.w	ip, #5
    error_code |= HAL_I2C_ERROR_AF;
 800491c:	2204      	movs	r2, #4
 800491e:	e756      	b.n	80047ce <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
  return HAL_OK;
 8004920:	2000      	movs	r0, #0
}
 8004922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004926:	4614      	mov	r4, r2
 8004928:	e75d      	b.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 800492a:	bf00      	nop
 800492c:	fe00e800 	.word	0xfe00e800

08004930 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004930:	2800      	cmp	r0, #0
 8004932:	d04e      	beq.n	80049d2 <HAL_I2C_Init+0xa2>
{
 8004934:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004936:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800493a:	4604      	mov	r4, r0
 800493c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004940:	2b00      	cmp	r3, #0
 8004942:	d041      	beq.n	80049c8 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 8004944:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004946:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004948:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800494a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800494e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004954:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8004956:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800495a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800495c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800495e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004966:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004968:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800496a:	d029      	beq.n	80049c0 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800496c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004970:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004972:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004974:	d102      	bne.n	800497c <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800497a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800497c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800497e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004982:	4915      	ldr	r1, [pc, #84]	; (80049d8 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004984:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004986:	4301      	orrs	r1, r0
 8004988:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800498a:	68d9      	ldr	r1, [r3, #12]
 800498c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004990:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004992:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004996:	4302      	orrs	r2, r0
 8004998:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800499c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049a0:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a2:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049a4:	4301      	orrs	r1, r0
  return HAL_OK;
 80049a6:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049a8:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	f041 0101 	orr.w	r1, r1, #1
 80049b0:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80049be:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049c6:	e7d9      	b.n	800497c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80049c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80049cc:	f7fd fca8 	bl	8002320 <HAL_I2C_MspInit>
 80049d0:	e7b8      	b.n	8004944 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80049d2:	2001      	movs	r0, #1
}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	02008000 	.word	0x02008000

080049dc <HAL_I2C_Mem_Write>:
{
 80049dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e0:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80049e6:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ea:	2b20      	cmp	r3, #32
{
 80049ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f0:	f040 80a8 	bne.w	8004b44 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 80049f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f6:	4604      	mov	r4, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 809d 	beq.w	8004b38 <HAL_I2C_Mem_Write+0x15c>
 80049fe:	f1bb 0f00 	cmp.w	fp, #0
 8004a02:	f000 8099 	beq.w	8004b38 <HAL_I2C_Mem_Write+0x15c>
    __HAL_LOCK(hi2c);
 8004a06:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	f000 809a 	beq.w	8004b44 <HAL_I2C_Mem_Write+0x168>
 8004a10:	2301      	movs	r3, #1
 8004a12:	460f      	mov	r7, r1
 8004a14:	4691      	mov	r9, r2
 8004a16:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004a1a:	f7fd fee7 	bl	80027ec <HAL_GetTick>
 8004a1e:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8004a20:	e005      	b.n	8004a2e <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fd fee3 	bl	80027ec <HAL_GetTick>
 8004a26:	1b80      	subs	r0, r0, r6
 8004a28:	2819      	cmp	r0, #25
 8004a2a:	f200 80a9 	bhi.w	8004b80 <HAL_I2C_Mem_Write+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	699d      	ldr	r5, [r3, #24]
 8004a32:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 8004a36:	d1f4      	bne.n	8004a22 <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 8004a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a3a:	f3c7 0709 	ubfx	r7, r7, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a3e:	4977      	ldr	r1, [pc, #476]	; (8004c1c <HAL_I2C_Mem_Write+0x240>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a40:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004a42:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a44:	2221      	movs	r2, #33	; 0x21
    hi2c->XferISR   = NULL;
 8004a46:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a48:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a4c:	2240      	movs	r2, #64	; 0x40
 8004a4e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a52:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8004a54:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	400a      	ands	r2, r1
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a5c:	fa5f f18a 	uxtb.w	r1, sl
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a64:	496e      	ldr	r1, [pc, #440]	; (8004c20 <HAL_I2C_Mem_Write+0x244>)
 8004a66:	433a      	orrs	r2, r7
 8004a68:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6a:	4632      	mov	r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a6c:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	4641      	mov	r1, r8
 8004a70:	f7ff fda8 	bl	80045c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d171      	bne.n	8004b5c <HAL_I2C_Mem_Write+0x180>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a78:	f1ba 0f01 	cmp.w	sl, #1
 8004a7c:	d00a      	beq.n	8004a94 <HAL_I2C_Mem_Write+0xb8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a7e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8004a82:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a84:	4641      	mov	r1, r8
 8004a86:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	f7ff fd9a 	bl	80045c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d163      	bne.n	8004b5c <HAL_I2C_Mem_Write+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a94:	fa5f f389 	uxtb.w	r3, r9
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	6293      	str	r3, [r2, #40]	; 0x28
 8004a9c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004aa0:	f040 8089 	bne.w	8004bb6 <HAL_I2C_Mem_Write+0x1da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa4:	6993      	ldr	r3, [r2, #24]
 8004aa6:	0618      	lsls	r0, r3, #24
 8004aa8:	d5fc      	bpl.n	8004aa4 <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2bff      	cmp	r3, #255	; 0xff
 8004ab0:	f240 8091 	bls.w	8004bd6 <HAL_I2C_Mem_Write+0x1fa>
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ab4:	6853      	ldr	r3, [r2, #4]
 8004ab6:	495b      	ldr	r1, [pc, #364]	; (8004c24 <HAL_I2C_Mem_Write+0x248>)
 8004ab8:	400b      	ands	r3, r1
 8004aba:	495b      	ldr	r1, [pc, #364]	; (8004c28 <HAL_I2C_Mem_Write+0x24c>)
 8004abc:	433b      	orrs	r3, r7
 8004abe:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac0:	23ff      	movs	r3, #255	; 0xff
 8004ac2:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ac4:	6051      	str	r1, [r2, #4]
 8004ac6:	4d57      	ldr	r5, [pc, #348]	; (8004c24 <HAL_I2C_Mem_Write+0x248>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac8:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8004acc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8004c28 <HAL_I2C_Mem_Write+0x24c>
 8004ad0:	e004      	b.n	8004adc <HAL_I2C_Mem_Write+0x100>
    } while (hi2c->XferCount > 0U);
 8004ad2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 808b 	beq.w	8004bf2 <HAL_I2C_Mem_Write+0x216>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004adc:	4632      	mov	r2, r6
 8004ade:	4641      	mov	r1, r8
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7ff fd6f 	bl	80045c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d173      	bne.n	8004bd2 <HAL_I2C_Mem_Write+0x1f6>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004aec:	6821      	ldr	r1, [r4, #0]
 8004aee:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 8004af2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004af4:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004af6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004af8:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8004afa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004afc:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8004afe:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8004b00:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004b02:	b292      	uxth	r2, r2
 8004b04:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b06:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b08:	b292      	uxth	r2, r2
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	d0e1      	beq.n	8004ad2 <HAL_I2C_Mem_Write+0xf6>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1df      	bne.n	8004ad2 <HAL_I2C_Mem_Write+0xf6>
 8004b12:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004b16:	d126      	bne.n	8004b66 <HAL_I2C_Mem_Write+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b18:	698b      	ldr	r3, [r1, #24]
 8004b1a:	061a      	lsls	r2, r3, #24
 8004b1c:	d5fc      	bpl.n	8004b18 <HAL_I2C_Mem_Write+0x13c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2bff      	cmp	r3, #255	; 0xff
 8004b24:	d93a      	bls.n	8004b9c <HAL_I2C_Mem_Write+0x1c0>
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b26:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b28:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b2c:	402b      	ands	r3, r5
 8004b2e:	433b      	orrs	r3, r7
 8004b30:	ea43 0309 	orr.w	r3, r3, r9
 8004b34:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b36:	e7cc      	b.n	8004ad2 <HAL_I2C_Mem_Write+0xf6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b38:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8004b3c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b3e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8004b44:	2002      	movs	r0, #2
}
 8004b46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b4c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b5c:	2300      	movs	r3, #0
      return HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8004b60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004b64:	e7ec      	b.n	8004b40 <HAL_I2C_Mem_Write+0x164>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b66:	698b      	ldr	r3, [r1, #24]
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	d4d8      	bmi.n	8004b1e <HAL_I2C_Mem_Write+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7fd fe3e 	bl	80027ec <HAL_GetTick>
 8004b70:	1b80      	subs	r0, r0, r6
 8004b72:	4580      	cmp	r8, r0
 8004b74:	d304      	bcc.n	8004b80 <HAL_I2C_Mem_Write+0x1a4>
 8004b76:	f1b8 0f00 	cmp.w	r8, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Mem_Write+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b7c:	6821      	ldr	r1, [r4, #0]
 8004b7e:	e7c8      	b.n	8004b12 <HAL_I2C_Mem_Write+0x136>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b80:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	2200      	movs	r2, #0
          return HAL_ERROR;
 8004b86:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8004b8a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b8e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b94:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8004b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          hi2c->XferSize = hi2c->XferCount;
 8004b9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ba0:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
 8004ba2:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ba4:	684b      	ldr	r3, [r1, #4]
 8004ba6:	402b      	ands	r3, r5
 8004ba8:	433b      	orrs	r3, r7
 8004baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	604b      	str	r3, [r1, #4]
}
 8004bb4:	e78d      	b.n	8004ad2 <HAL_I2C_Mem_Write+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb6:	6993      	ldr	r3, [r2, #24]
 8004bb8:	0619      	lsls	r1, r3, #24
 8004bba:	f53f af76 	bmi.w	8004aaa <HAL_I2C_Mem_Write+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fd fe15 	bl	80027ec <HAL_GetTick>
 8004bc2:	1b80      	subs	r0, r0, r6
 8004bc4:	4580      	cmp	r8, r0
 8004bc6:	d3c0      	bcc.n	8004b4a <HAL_I2C_Mem_Write+0x16e>
 8004bc8:	f1b8 0f00 	cmp.w	r8, #0
 8004bcc:	d0bd      	beq.n	8004b4a <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	e764      	b.n	8004a9c <HAL_I2C_Mem_Write+0xc0>
        return HAL_ERROR;
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	e7b4      	b.n	8004b40 <HAL_I2C_Mem_Write+0x164>
      hi2c->XferSize = hi2c->XferCount;
 8004bd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004bd8:	4812      	ldr	r0, [pc, #72]	; (8004c24 <HAL_I2C_Mem_Write+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 8004bda:	b29b      	uxth	r3, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bdc:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 8004bde:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004be0:	6853      	ldr	r3, [r2, #4]
 8004be2:	4003      	ands	r3, r0
 8004be4:	433b      	orrs	r3, r7
 8004be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bee:	6053      	str	r3, [r2, #4]
}
 8004bf0:	e769      	b.n	8004ac6 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f7ff fdc0 	bl	800477c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d1e8      	bne.n	8004bd2 <HAL_I2C_Mem_Write+0x1f6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8004c04:	4d09      	ldr	r5, [pc, #36]	; (8004c2c <HAL_I2C_Mem_Write+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c06:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	402a      	ands	r2, r5
 8004c0c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004c12:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c16:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004c1a:	e791      	b.n	8004b40 <HAL_I2C_Mem_Write+0x164>
 8004c1c:	fc009800 	.word	0xfc009800
 8004c20:	01002000 	.word	0x01002000
 8004c24:	fc009c00 	.word	0xfc009c00
 8004c28:	01ff0000 	.word	0x01ff0000
 8004c2c:	fe00e800 	.word	0xfe00e800

08004c30 <HAL_I2C_Mem_Read>:
{
 8004c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004c3a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c3e:	2b20      	cmp	r3, #32
{
 8004c40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c42:	f040 80bf 	bne.w	8004dc4 <HAL_I2C_Mem_Read+0x194>
    if ((pData == NULL) || (Size == 0U))
 8004c46:	9b08      	ldr	r3, [sp, #32]
 8004c48:	4682      	mov	sl, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80b3 	beq.w	8004db6 <HAL_I2C_Mem_Read+0x186>
 8004c50:	f1b9 0f00 	cmp.w	r9, #0
 8004c54:	f000 80af 	beq.w	8004db6 <HAL_I2C_Mem_Read+0x186>
    __HAL_LOCK(hi2c);
 8004c58:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	f000 80b1 	beq.w	8004dc4 <HAL_I2C_Mem_Read+0x194>
 8004c62:	2301      	movs	r3, #1
 8004c64:	460e      	mov	r6, r1
 8004c66:	4690      	mov	r8, r2
 8004c68:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004c6c:	f7fd fdbe 	bl	80027ec <HAL_GetTick>
 8004c70:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8004c72:	e005      	b.n	8004c80 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c74:	f7fd fdba 	bl	80027ec <HAL_GetTick>
 8004c78:	1b40      	subs	r0, r0, r5
 8004c7a:	2819      	cmp	r0, #25
 8004c7c:	f200 808b 	bhi.w	8004d96 <HAL_I2C_Mem_Read+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c80:	f8da 3000 	ldr.w	r3, [sl]
 8004c84:	6998      	ldr	r0, [r3, #24]
 8004c86:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8004c8a:	d1f3      	bne.n	8004c74 <HAL_I2C_Mem_Read+0x44>
    hi2c->pBuffPtr  = pData;
 8004c8c:	9a08      	ldr	r2, [sp, #32]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c8e:	f3c6 0609 	ubfx	r6, r6, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c92:	4987      	ldr	r1, [pc, #540]	; (8004eb0 <HAL_I2C_Mem_Read+0x280>)
    hi2c->pBuffPtr  = pData;
 8004c94:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c98:	2222      	movs	r2, #34	; 0x22
    hi2c->XferISR   = NULL;
 8004c9a:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c9e:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ca2:	2240      	movs	r2, #64	; 0x40
 8004ca4:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca8:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cac:	4650      	mov	r0, sl
    hi2c->XferCount = Size;
 8004cae:	f8aa 902a 	strh.w	r9, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	400a      	ands	r2, r1
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cb6:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbc:	4621      	mov	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cbe:	4332      	orrs	r2, r6
 8004cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc4:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc6:	462a      	mov	r2, r5
 8004cc8:	f7ff fc7c 	bl	80045c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	f040 8087 	bne.w	8004de0 <HAL_I2C_Mem_Read+0x1b0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cd2:	2f01      	cmp	r7, #1
 8004cd4:	d00b      	beq.n	8004cee <HAL_I2C_Mem_Read+0xbe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cd6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004cda:	f8da 3000 	ldr.w	r3, [sl]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4650      	mov	r0, sl
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	f7ff fc6d 	bl	80045c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d178      	bne.n	8004de0 <HAL_I2C_Mem_Read+0x1b0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cee:	fa5f f388 	uxtb.w	r3, r8
 8004cf2:	f8da 2000 	ldr.w	r2, [sl]
 8004cf6:	6293      	str	r3, [r2, #40]	; 0x28
 8004cf8:	1c61      	adds	r1, r4, #1
 8004cfa:	f040 80a4 	bne.w	8004e46 <HAL_I2C_Mem_Read+0x216>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cfe:	6993      	ldr	r3, [r2, #24]
 8004d00:	065b      	lsls	r3, r3, #25
 8004d02:	d5fc      	bpl.n	8004cfe <HAL_I2C_Mem_Read+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d04:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2bff      	cmp	r3, #255	; 0xff
 8004d0c:	f240 80a9 	bls.w	8004e62 <HAL_I2C_Mem_Read+0x232>
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d10:	6853      	ldr	r3, [r2, #4]
 8004d12:	4967      	ldr	r1, [pc, #412]	; (8004eb0 <HAL_I2C_Mem_Read+0x280>)
 8004d14:	400b      	ands	r3, r1
 8004d16:	4967      	ldr	r1, [pc, #412]	; (8004eb4 <HAL_I2C_Mem_Read+0x284>)
 8004d18:	4333      	orrs	r3, r6
 8004d1a:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d1c:	23ff      	movs	r3, #255	; 0xff
 8004d1e:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d22:	6051      	str	r1, [r2, #4]
 8004d24:	1c60      	adds	r0, r4, #1
 8004d26:	4f64      	ldr	r7, [pc, #400]	; (8004eb8 <HAL_I2C_Mem_Read+0x288>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d28:	f04f 09ff 	mov.w	r9, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d2c:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8004ec4 <HAL_I2C_Mem_Read+0x294>
 8004d30:	d127      	bne.n	8004d82 <HAL_I2C_Mem_Read+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d32:	6993      	ldr	r3, [r2, #24]
 8004d34:	0759      	lsls	r1, r3, #29
 8004d36:	d5fc      	bpl.n	8004d32 <HAL_I2C_Mem_Read+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d3a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004d3e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004d40:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
      hi2c->XferCount--;
 8004d44:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004d48:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8004d4a:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004d4c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      hi2c->XferSize--;
 8004d50:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
      hi2c->XferCount--;
 8004d54:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8004d56:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8004d58:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d5c:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
 8004d60:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d62:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8004d64:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d68:	b90b      	cbnz	r3, 8004d6e <HAL_I2C_Mem_Read+0x13e>
 8004d6a:	2a00      	cmp	r2, #0
 8004d6c:	d147      	bne.n	8004dfe <HAL_I2C_Mem_Read+0x1ce>
    } while (hi2c->XferCount > 0U);
 8004d6e:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8084 	beq.w	8004e82 <HAL_I2C_Mem_Read+0x252>
 8004d7a:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d7c:	f8da 2000 	ldr.w	r2, [sl]
 8004d80:	d0d7      	beq.n	8004d32 <HAL_I2C_Mem_Read+0x102>
 8004d82:	6993      	ldr	r3, [r2, #24]
 8004d84:	075b      	lsls	r3, r3, #29
 8004d86:	d4d7      	bmi.n	8004d38 <HAL_I2C_Mem_Read+0x108>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d88:	f7fd fd30 	bl	80027ec <HAL_GetTick>
 8004d8c:	1b40      	subs	r0, r0, r5
 8004d8e:	4284      	cmp	r4, r0
 8004d90:	d301      	bcc.n	8004d96 <HAL_I2C_Mem_Read+0x166>
 8004d92:	2c00      	cmp	r4, #0
 8004d94:	d1f1      	bne.n	8004d7a <HAL_I2C_Mem_Read+0x14a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d96:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9c:	2200      	movs	r2, #0
          return HAL_ERROR;
 8004d9e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004da0:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8004da2:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004da6:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dae:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
}
 8004db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004db6:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8004dba:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dbc:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
}
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8004dc4:	2002      	movs	r0, #2
}
 8004dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dca:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dd8:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004de0:	2300      	movs	r3, #0
      return HAL_ERROR;
 8004de2:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8004de4:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
      return HAL_ERROR;
 8004de8:	e7ea      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dea:	6993      	ldr	r3, [r2, #24]
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	d40d      	bmi.n	8004e0c <HAL_I2C_Mem_Read+0x1dc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df0:	f7fd fcfc 	bl	80027ec <HAL_GetTick>
 8004df4:	1b40      	subs	r0, r0, r5
 8004df6:	4284      	cmp	r4, r0
 8004df8:	d3cd      	bcc.n	8004d96 <HAL_I2C_Mem_Read+0x166>
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	d0cb      	beq.n	8004d96 <HAL_I2C_Mem_Read+0x166>
 8004dfe:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e00:	f8da 2000 	ldr.w	r2, [sl]
 8004e04:	d1f1      	bne.n	8004dea <HAL_I2C_Mem_Read+0x1ba>
 8004e06:	6993      	ldr	r3, [r2, #24]
 8004e08:	0619      	lsls	r1, r3, #24
 8004e0a:	d5fc      	bpl.n	8004e06 <HAL_I2C_Mem_Read+0x1d6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2bff      	cmp	r3, #255	; 0xff
 8004e14:	d908      	bls.n	8004e28 <HAL_I2C_Mem_Read+0x1f8>
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e16:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e18:	f8aa 9028 	strh.w	r9, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e1c:	403b      	ands	r3, r7
 8004e1e:	4333      	orrs	r3, r6
 8004e20:	ea43 0308 	orr.w	r3, r3, r8
 8004e24:	6053      	str	r3, [r2, #4]
}
 8004e26:	e7a2      	b.n	8004d6e <HAL_I2C_Mem_Read+0x13e>
          hi2c->XferSize = hi2c->XferCount;
 8004e28:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e2e:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8004e30:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e34:	6853      	ldr	r3, [r2, #4]
 8004e36:	403b      	ands	r3, r7
 8004e38:	4333      	orrs	r3, r6
 8004e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e42:	6053      	str	r3, [r2, #4]
}
 8004e44:	e793      	b.n	8004d6e <HAL_I2C_Mem_Read+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e46:	6993      	ldr	r3, [r2, #24]
 8004e48:	065f      	lsls	r7, r3, #25
 8004e4a:	f53f af5b 	bmi.w	8004d04 <HAL_I2C_Mem_Read+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fd fccd 	bl	80027ec <HAL_GetTick>
 8004e52:	1b40      	subs	r0, r0, r5
 8004e54:	4284      	cmp	r4, r0
 8004e56:	d3b8      	bcc.n	8004dca <HAL_I2C_Mem_Read+0x19a>
 8004e58:	2c00      	cmp	r4, #0
 8004e5a:	d0b6      	beq.n	8004dca <HAL_I2C_Mem_Read+0x19a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5c:	f8da 2000 	ldr.w	r2, [sl]
 8004e60:	e74a      	b.n	8004cf8 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 8004e62:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e66:	4812      	ldr	r0, [pc, #72]	; (8004eb0 <HAL_I2C_Mem_Read+0x280>)
      hi2c->XferSize = hi2c->XferCount;
 8004e68:	b29b      	uxth	r3, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e6a:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 8004e6c:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e70:	6853      	ldr	r3, [r2, #4]
 8004e72:	4003      	ands	r3, r0
 8004e74:	4333      	orrs	r3, r6
 8004e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004e7a:	4910      	ldr	r1, [pc, #64]	; (8004ebc <HAL_I2C_Mem_Read+0x28c>)
 8004e7c:	4319      	orrs	r1, r3
 8004e7e:	6051      	str	r1, [r2, #4]
}
 8004e80:	e750      	b.n	8004d24 <HAL_I2C_Mem_Read+0xf4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e82:	462a      	mov	r2, r5
 8004e84:	4621      	mov	r1, r4
 8004e86:	4650      	mov	r0, sl
 8004e88:	f7ff fc78 	bl	800477c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e8c:	b970      	cbnz	r0, 8004eac <HAL_I2C_Mem_Read+0x27c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e8e:	f8da 3000 	ldr.w	r3, [sl]
 8004e92:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8004e94:	4c0a      	ldr	r4, [pc, #40]	; (8004ec0 <HAL_I2C_Mem_Read+0x290>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e96:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	4022      	ands	r2, r4
 8004e9c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004ea2:	f88a 0040 	strb.w	r0, [sl, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ea6:	f88a 0042 	strb.w	r0, [sl, #66]	; 0x42
    return HAL_OK;
 8004eaa:	e789      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x190>
      return HAL_ERROR;
 8004eac:	2001      	movs	r0, #1
 8004eae:	e787      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x190>
 8004eb0:	fc009800 	.word	0xfc009800
 8004eb4:	01ff2400 	.word	0x01ff2400
 8004eb8:	fc009c00 	.word	0xfc009c00
 8004ebc:	02002400 	.word	0x02002400
 8004ec0:	fe00e800 	.word	0xfe00e800
 8004ec4:	01ff0000 	.word	0x01ff0000

08004ec8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004ecc:	2a20      	cmp	r2, #32
 8004ece:	d123      	bne.n	8004f18 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004ed0:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2a01      	cmp	r2, #1
 8004edc:	d01c      	beq.n	8004f18 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ede:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee0:	2024      	movs	r0, #36	; 0x24
{
 8004ee2:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee4:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee8:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8004eec:	6810      	ldr	r0, [r2, #0]
 8004eee:	f020 0001 	bic.w	r0, r0, #1
 8004ef2:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ef4:	6810      	ldr	r0, [r2, #0]
 8004ef6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8004efa:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004efc:	6810      	ldr	r0, [r2, #0]
 8004efe:	4301      	orrs	r1, r0

    return HAL_OK;
 8004f00:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f02:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004f04:	6811      	ldr	r1, [r2, #0]
 8004f06:	f041 0101 	orr.w	r1, r1, #1
 8004f0a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f0c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004f10:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004f14:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8004f18:	2002      	movs	r0, #2
}
 8004f1a:	4770      	bx	lr

08004f1c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004f20:	2a20      	cmp	r2, #32
 8004f22:	d122      	bne.n	8004f6a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8004f24:	4603      	mov	r3, r0
{
 8004f26:	b500      	push	{lr}
 8004f28:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004f30:	2a01      	cmp	r2, #1
 8004f32:	d01c      	beq.n	8004f6e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f34:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f36:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f38:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f3c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8004f40:	6810      	ldr	r0, [r2, #0]
 8004f42:	f020 0001 	bic.w	r0, r0, #1
 8004f46:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8004f48:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8004f4a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8004f4e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 8004f52:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8004f54:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004f56:	6811      	ldr	r1, [r2, #0]
 8004f58:	f041 0101 	orr.w	r1, r1, #1
 8004f5c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004f62:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004f66:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8004f6a:	2002      	movs	r0, #2
}
 8004f6c:	4770      	bx	lr
    return HAL_BUSY;
 8004f6e:	2002      	movs	r0, #2
}
 8004f70:	f85d fb04 	ldr.w	pc, [sp], #4

08004f74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f74:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f76:	4c10      	ldr	r4, [pc, #64]	; (8004fb8 <HAL_PWREx_ConfigSupply+0x44>)
 8004f78:	68e3      	ldr	r3, [r4, #12]
 8004f7a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f7e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f80:	d105      	bne.n	8004f8e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f82:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f86:	1a18      	subs	r0, r3, r0
 8004f88:	bf18      	it	ne
 8004f8a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004f8c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	4318      	orrs	r0, r3
 8004f94:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8004f96:	f7fd fc29 	bl	80027ec <HAL_GetTick>
 8004f9a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f9c:	e005      	b.n	8004faa <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f9e:	f7fd fc25 	bl	80027ec <HAL_GetTick>
 8004fa2:	1b40      	subs	r0, r0, r5
 8004fa4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004fa8:	d804      	bhi.n	8004fb4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	049b      	lsls	r3, r3, #18
 8004fae:	d5f6      	bpl.n	8004f9e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8004fb0:	2000      	movs	r0, #0
}
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004fb4:	2001      	movs	r0, #1
}
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	58024800 	.word	0x58024800

08004fbc <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8004fbe:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fc2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fc4:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8004fc6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fcc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8004fd0:	d038      	beq.n	8005044 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004fd2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fd6:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fda:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004fde:	fb05 f101 	mul.w	r1, r5, r1
 8004fe2:	2a01      	cmp	r2, #1
 8004fe4:	ee07 1a90 	vmov	s15, r1
 8004fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8004fec:	d002      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8004fee:	2a02      	cmp	r2, #2
 8004ff0:	d04e      	beq.n	8005090 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8004ff2:	b34a      	cbz	r2, 8005048 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ff4:	ee07 0a90 	vmov	s15, r0
 8004ff8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80050b0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8004ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005006:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80050b4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800500a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500e:	ee06 3a90 	vmov	s13, r3
 8005012:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005016:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800501a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800501e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005022:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005026:	4b21      	ldr	r3, [pc, #132]	; (80050ac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800502e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005040:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8005044:	bc30      	pop	{r4, r5}
 8005046:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	0692      	lsls	r2, r2, #26
 800504c:	d527      	bpl.n	800509e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800504e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005050:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005054:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005056:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800505c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005064:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80050b4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8005068:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800506c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800506e:	ee06 3a90 	vmov	s13, r3
 8005072:	ee05 2a90 	vmov	s11, r2
 8005076:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800507a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800507e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005082:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005086:	eee7 6a05 	vfma.f32	s13, s14, s10
 800508a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800508e:	e7ca      	b.n	8005026 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005090:	ee07 0a90 	vmov	s15, r0
 8005094:	eddf 6a09 	vldr	s13, [pc, #36]	; 80050bc <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8005098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509c:	e7b0      	b.n	8005000 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800509e:	ee07 0a90 	vmov	s15, r0
 80050a2:	eddf 6a07 	vldr	s13, [pc, #28]	; 80050c0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 80050a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050aa:	e7a9      	b.n	8005000 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80050ac:	58024400 	.word	0x58024400
 80050b0:	4a742400 	.word	0x4a742400
 80050b4:	39000000 	.word	0x39000000
 80050b8:	03d09000 	.word	0x03d09000
 80050bc:	4bbebc20 	.word	0x4bbebc20
 80050c0:	4c742400 	.word	0x4c742400

080050c4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f000 81e8 	beq.w	800549a <HAL_RCC_OscConfig+0x3d6>
{
 80050ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050cc:	6803      	ldr	r3, [r0, #0]
 80050ce:	4604      	mov	r4, r0
 80050d0:	07d9      	lsls	r1, r3, #31
 80050d2:	d52e      	bpl.n	8005132 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050d4:	49a4      	ldr	r1, [pc, #656]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 80050d6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050d8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050da:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050de:	2a10      	cmp	r2, #16
 80050e0:	f000 8107 	beq.w	80052f2 <HAL_RCC_OscConfig+0x22e>
 80050e4:	2a18      	cmp	r2, #24
 80050e6:	f000 80ff 	beq.w	80052e8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ea:	6863      	ldr	r3, [r4, #4]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	f000 812a 	beq.w	8005348 <HAL_RCC_OscConfig+0x284>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8168 	beq.w	80053ca <HAL_RCC_OscConfig+0x306>
 80050fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050fe:	4b9a      	ldr	r3, [pc, #616]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	f000 8269 	beq.w	80055d8 <HAL_RCC_OscConfig+0x514>
 8005106:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005112:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005114:	f7fd fb6a 	bl	80027ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005118:	4e93      	ldr	r6, [pc, #588]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800511a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800511c:	e005      	b.n	800512a <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511e:	f7fd fb65 	bl	80027ec <HAL_GetTick>
 8005122:	1b40      	subs	r0, r0, r5
 8005124:	2864      	cmp	r0, #100	; 0x64
 8005126:	f200 814e 	bhi.w	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800512a:	6833      	ldr	r3, [r6, #0]
 800512c:	039b      	lsls	r3, r3, #14
 800512e:	d5f6      	bpl.n	800511e <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	079d      	lsls	r5, r3, #30
 8005134:	f100 808a 	bmi.w	800524c <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005138:	06d9      	lsls	r1, r3, #27
 800513a:	d533      	bpl.n	80051a4 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513c:	4a8a      	ldr	r2, [pc, #552]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 800513e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005140:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005142:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005146:	2b08      	cmp	r3, #8
 8005148:	f000 80e3 	beq.w	8005312 <HAL_RCC_OscConfig+0x24e>
 800514c:	2b18      	cmp	r3, #24
 800514e:	f000 80db 	beq.w	8005308 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005152:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8005154:	4d84      	ldr	r5, [pc, #528]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 816f 	beq.w	800543a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005162:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005164:	f7fd fb42 	bl	80027ec <HAL_GetTick>
 8005168:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800516a:	e005      	b.n	8005178 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800516c:	f7fd fb3e 	bl	80027ec <HAL_GetTick>
 8005170:	1b80      	subs	r0, r0, r6
 8005172:	2802      	cmp	r0, #2
 8005174:	f200 8127 	bhi.w	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	05db      	lsls	r3, r3, #23
 800517c:	d5f6      	bpl.n	800516c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800517e:	f7fd fb4d 	bl	800281c <HAL_GetREVID>
 8005182:	f241 0303 	movw	r3, #4099	; 0x1003
 8005186:	4298      	cmp	r0, r3
 8005188:	f200 8247 	bhi.w	800561a <HAL_RCC_OscConfig+0x556>
 800518c:	6a22      	ldr	r2, [r4, #32]
 800518e:	686b      	ldr	r3, [r5, #4]
 8005190:	2a20      	cmp	r2, #32
 8005192:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005196:	bf0c      	ite	eq
 8005198:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800519c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80051a0:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	071d      	lsls	r5, r3, #28
 80051a6:	d516      	bpl.n	80051d6 <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051a8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80051aa:	4d6f      	ldr	r5, [pc, #444]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8122 	beq.w	80053f6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 80051b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80051ba:	f7fd fb17 	bl	80027ec <HAL_GetTick>
 80051be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051c0:	e005      	b.n	80051ce <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c2:	f7fd fb13 	bl	80027ec <HAL_GetTick>
 80051c6:	1b80      	subs	r0, r0, r6
 80051c8:	2802      	cmp	r0, #2
 80051ca:	f200 80fc 	bhi.w	80053c6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80051d0:	0798      	lsls	r0, r3, #30
 80051d2:	d5f6      	bpl.n	80051c2 <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	069a      	lsls	r2, r3, #26
 80051d8:	d516      	bpl.n	8005208 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80051da:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80051dc:	4d62      	ldr	r5, [pc, #392]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 811a 	beq.w	8005418 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80051ec:	f7fd fafe 	bl	80027ec <HAL_GetTick>
 80051f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051f2:	e005      	b.n	8005200 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80051f4:	f7fd fafa 	bl	80027ec <HAL_GetTick>
 80051f8:	1b80      	subs	r0, r0, r6
 80051fa:	2802      	cmp	r0, #2
 80051fc:	f200 80e3 	bhi.w	80053c6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	049f      	lsls	r7, r3, #18
 8005204:	d5f6      	bpl.n	80051f4 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	0759      	lsls	r1, r3, #29
 800520a:	f100 80a3 	bmi.w	8005354 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800520e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005210:	b1d0      	cbz	r0, 8005248 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005212:	4d55      	ldr	r5, [pc, #340]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 8005214:	692b      	ldr	r3, [r5, #16]
 8005216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800521a:	2b18      	cmp	r3, #24
 800521c:	f000 81ae 	beq.w	800557c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8005220:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005222:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005228:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522a:	f000 8142 	beq.w	80054b2 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800522e:	f7fd fadd 	bl	80027ec <HAL_GetTick>
 8005232:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005234:	e005      	b.n	8005242 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fd fad9 	bl	80027ec <HAL_GetTick>
 800523a:	1b00      	subs	r0, r0, r4
 800523c:	2802      	cmp	r0, #2
 800523e:	f200 80c2 	bhi.w	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	019b      	lsls	r3, r3, #6
 8005246:	d4f6      	bmi.n	8005236 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8005248:	2000      	movs	r0, #0
}
 800524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800524c:	4a46      	ldr	r2, [pc, #280]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 800524e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005250:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005252:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8005256:	d12d      	bne.n	80052b4 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005258:	4b43      	ldr	r3, [pc, #268]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 800525a:	68e2      	ldr	r2, [r4, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	0759      	lsls	r1, r3, #29
 8005260:	d501      	bpl.n	8005266 <HAL_RCC_OscConfig+0x1a2>
 8005262:	2a00      	cmp	r2, #0
 8005264:	d04e      	beq.n	8005304 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005266:	4d40      	ldr	r5, [pc, #256]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	f023 0319 	bic.w	r3, r3, #25
 800526e:	4313      	orrs	r3, r2
 8005270:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8005272:	f7fd fabb 	bl	80027ec <HAL_GetTick>
 8005276:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005278:	e005      	b.n	8005286 <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800527a:	f7fd fab7 	bl	80027ec <HAL_GetTick>
 800527e:	1b80      	subs	r0, r0, r6
 8005280:	2802      	cmp	r0, #2
 8005282:	f200 80a0 	bhi.w	80053c6 <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005286:	682b      	ldr	r3, [r5, #0]
 8005288:	075b      	lsls	r3, r3, #29
 800528a:	d5f6      	bpl.n	800527a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528c:	f7fd fac6 	bl	800281c <HAL_GetREVID>
 8005290:	f241 0303 	movw	r3, #4099	; 0x1003
 8005294:	4298      	cmp	r0, r3
 8005296:	f200 80f7 	bhi.w	8005488 <HAL_RCC_OscConfig+0x3c4>
 800529a:	6922      	ldr	r2, [r4, #16]
 800529c:	686b      	ldr	r3, [r5, #4]
 800529e:	2a40      	cmp	r2, #64	; 0x40
 80052a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052a4:	bf0c      	ite	eq
 80052a6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80052aa:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80052ae:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	e741      	b.n	8005138 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052b4:	2b18      	cmp	r3, #24
 80052b6:	f000 80e3 	beq.w	8005480 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052ba:	4d2b      	ldr	r5, [pc, #172]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052bc:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052be:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052c0:	2a00      	cmp	r2, #0
 80052c2:	f000 80cc 	beq.w	800545e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052c6:	f023 0319 	bic.w	r3, r3, #25
 80052ca:	4313      	orrs	r3, r2
 80052cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80052ce:	f7fd fa8d 	bl	80027ec <HAL_GetTick>
 80052d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052d4:	e004      	b.n	80052e0 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052d6:	f7fd fa89 	bl	80027ec <HAL_GetTick>
 80052da:	1b80      	subs	r0, r0, r6
 80052dc:	2802      	cmp	r0, #2
 80052de:	d872      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	075f      	lsls	r7, r3, #29
 80052e4:	d5f7      	bpl.n	80052d6 <HAL_RCC_OscConfig+0x212>
 80052e6:	e7d1      	b.n	800528c <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052e8:	f001 0103 	and.w	r1, r1, #3
 80052ec:	2902      	cmp	r1, #2
 80052ee:	f47f aefc 	bne.w	80050ea <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f2:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	0392      	lsls	r2, r2, #14
 80052f8:	f57f af1b 	bpl.w	8005132 <HAL_RCC_OscConfig+0x6e>
 80052fc:	6862      	ldr	r2, [r4, #4]
 80052fe:	2a00      	cmp	r2, #0
 8005300:	f47f af17 	bne.w	8005132 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8005304:	2001      	movs	r0, #1
}
 8005306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005308:	f002 0203 	and.w	r2, r2, #3
 800530c:	2a01      	cmp	r2, #1
 800530e:	f47f af20 	bne.w	8005152 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	05da      	lsls	r2, r3, #23
 8005318:	d502      	bpl.n	8005320 <HAL_RCC_OscConfig+0x25c>
 800531a:	69e3      	ldr	r3, [r4, #28]
 800531c:	2b80      	cmp	r3, #128	; 0x80
 800531e:	d1f1      	bne.n	8005304 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005320:	f7fd fa7c 	bl	800281c <HAL_GetREVID>
 8005324:	f241 0303 	movw	r3, #4099	; 0x1003
 8005328:	4298      	cmp	r0, r3
 800532a:	f200 80b8 	bhi.w	800549e <HAL_RCC_OscConfig+0x3da>
 800532e:	6a22      	ldr	r2, [r4, #32]
 8005330:	2a20      	cmp	r2, #32
 8005332:	f000 8187 	beq.w	8005644 <HAL_RCC_OscConfig+0x580>
 8005336:	490c      	ldr	r1, [pc, #48]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 8005338:	684b      	ldr	r3, [r1, #4]
 800533a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800533e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8005342:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	e72d      	b.n	80051a4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005348:	4a07      	ldr	r2, [pc, #28]	; (8005368 <HAL_RCC_OscConfig+0x2a4>)
 800534a:	6813      	ldr	r3, [r2, #0]
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005352:	e6df      	b.n	8005114 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8005354:	4d05      	ldr	r5, [pc, #20]	; (800536c <HAL_RCC_OscConfig+0x2a8>)
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800535e:	f7fd fa45 	bl	80027ec <HAL_GetTick>
 8005362:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005364:	e009      	b.n	800537a <HAL_RCC_OscConfig+0x2b6>
 8005366:	bf00      	nop
 8005368:	58024400 	.word	0x58024400
 800536c:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fd fa3c 	bl	80027ec <HAL_GetTick>
 8005374:	1b80      	subs	r0, r0, r6
 8005376:	2864      	cmp	r0, #100	; 0x64
 8005378:	d825      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	05da      	lsls	r2, r3, #23
 800537e:	d5f7      	bpl.n	8005370 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005380:	68a3      	ldr	r3, [r4, #8]
 8005382:	2b01      	cmp	r3, #1
 8005384:	f000 8158 	beq.w	8005638 <HAL_RCC_OscConfig+0x574>
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 812d 	beq.w	80055e8 <HAL_RCC_OscConfig+0x524>
 800538e:	2b05      	cmp	r3, #5
 8005390:	4ba6      	ldr	r3, [pc, #664]	; (800562c <HAL_RCC_OscConfig+0x568>)
 8005392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005394:	f000 815f 	beq.w	8005656 <HAL_RCC_OscConfig+0x592>
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	671a      	str	r2, [r3, #112]	; 0x70
 800539e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053a0:	f022 0204 	bic.w	r2, r2, #4
 80053a4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80053a6:	f7fd fa21 	bl	80027ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053aa:	4ea0      	ldr	r6, [pc, #640]	; (800562c <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ac:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80053b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053b2:	e004      	b.n	80053be <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fd fa1a 	bl	80027ec <HAL_GetTick>
 80053b8:	1b40      	subs	r0, r0, r5
 80053ba:	42b8      	cmp	r0, r7
 80053bc:	d803      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053be:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80053c0:	079b      	lsls	r3, r3, #30
 80053c2:	d5f7      	bpl.n	80053b4 <HAL_RCC_OscConfig+0x2f0>
 80053c4:	e723      	b.n	800520e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 80053c6:	2003      	movs	r0, #3
}
 80053c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ca:	4d98      	ldr	r5, [pc, #608]	; (800562c <HAL_RCC_OscConfig+0x568>)
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80053dc:	f7fd fa06 	bl	80027ec <HAL_GetTick>
 80053e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053e2:	e004      	b.n	80053ee <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fd fa02 	bl	80027ec <HAL_GetTick>
 80053e8:	1b80      	subs	r0, r0, r6
 80053ea:	2864      	cmp	r0, #100	; 0x64
 80053ec:	d8eb      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ee:	682b      	ldr	r3, [r5, #0]
 80053f0:	039f      	lsls	r7, r3, #14
 80053f2:	d4f7      	bmi.n	80053e4 <HAL_RCC_OscConfig+0x320>
 80053f4:	e69c      	b.n	8005130 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80053f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80053fe:	f7fd f9f5 	bl	80027ec <HAL_GetTick>
 8005402:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005404:	e004      	b.n	8005410 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005406:	f7fd f9f1 	bl	80027ec <HAL_GetTick>
 800540a:	1b80      	subs	r0, r0, r6
 800540c:	2802      	cmp	r0, #2
 800540e:	d8da      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005410:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005412:	0799      	lsls	r1, r3, #30
 8005414:	d4f7      	bmi.n	8005406 <HAL_RCC_OscConfig+0x342>
 8005416:	e6dd      	b.n	80051d4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800541e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005420:	f7fd f9e4 	bl	80027ec <HAL_GetTick>
 8005424:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005426:	e004      	b.n	8005432 <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005428:	f7fd f9e0 	bl	80027ec <HAL_GetTick>
 800542c:	1b80      	subs	r0, r0, r6
 800542e:	2802      	cmp	r0, #2
 8005430:	d8c9      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	0498      	lsls	r0, r3, #18
 8005436:	d4f7      	bmi.n	8005428 <HAL_RCC_OscConfig+0x364>
 8005438:	e6e5      	b.n	8005206 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800543a:	682b      	ldr	r3, [r5, #0]
 800543c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005440:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005442:	f7fd f9d3 	bl	80027ec <HAL_GetTick>
 8005446:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005448:	e004      	b.n	8005454 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800544a:	f7fd f9cf 	bl	80027ec <HAL_GetTick>
 800544e:	1b80      	subs	r0, r0, r6
 8005450:	2802      	cmp	r0, #2
 8005452:	d8b8      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	05df      	lsls	r7, r3, #23
 8005458:	d4f7      	bmi.n	800544a <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	e6a2      	b.n	80051a4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005464:	f7fd f9c2 	bl	80027ec <HAL_GetTick>
 8005468:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800546a:	e004      	b.n	8005476 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546c:	f7fd f9be 	bl	80027ec <HAL_GetTick>
 8005470:	1b80      	subs	r0, r0, r6
 8005472:	2802      	cmp	r0, #2
 8005474:	d8a7      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005476:	682b      	ldr	r3, [r5, #0]
 8005478:	0758      	lsls	r0, r3, #29
 800547a:	d4f7      	bmi.n	800546c <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	e65b      	b.n	8005138 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005480:	0790      	lsls	r0, r2, #30
 8005482:	f47f af1a 	bne.w	80052ba <HAL_RCC_OscConfig+0x1f6>
 8005486:	e6e7      	b.n	8005258 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005488:	686b      	ldr	r3, [r5, #4]
 800548a:	6922      	ldr	r2, [r4, #16]
 800548c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005490:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005494:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	e64e      	b.n	8005138 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800549a:	2001      	movs	r0, #1
}
 800549c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800549e:	4a63      	ldr	r2, [pc, #396]	; (800562c <HAL_RCC_OscConfig+0x568>)
 80054a0:	6a21      	ldr	r1, [r4, #32]
 80054a2:	68d3      	ldr	r3, [r2, #12]
 80054a4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80054a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80054ac:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	e678      	b.n	80051a4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80054b2:	f7fd f99b 	bl	80027ec <HAL_GetTick>
 80054b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054b8:	e004      	b.n	80054c4 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fd f997 	bl	80027ec <HAL_GetTick>
 80054be:	1b80      	subs	r0, r0, r6
 80054c0:	2802      	cmp	r0, #2
 80054c2:	d880      	bhi.n	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	0199      	lsls	r1, r3, #6
 80054c8:	d4f7      	bmi.n	80054ba <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80054cc:	4b58      	ldr	r3, [pc, #352]	; (8005630 <HAL_RCC_OscConfig+0x56c>)
 80054ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80054d0:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054d2:	4958      	ldr	r1, [pc, #352]	; (8005634 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054d4:	4e55      	ldr	r6, [pc, #340]	; (800562c <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054d6:	4313      	orrs	r3, r2
 80054d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054da:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80054de:	62ab      	str	r3, [r5, #40]	; 0x28
 80054e0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80054e4:	3b01      	subs	r3, #1
 80054e6:	3a01      	subs	r2, #1
 80054e8:	025b      	lsls	r3, r3, #9
 80054ea:	0412      	lsls	r2, r2, #16
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80054f2:	4313      	orrs	r3, r2
 80054f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054f6:	3a01      	subs	r2, #1
 80054f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fc:	4313      	orrs	r3, r2
 80054fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005500:	3a01      	subs	r2, #1
 8005502:	0612      	lsls	r2, r2, #24
 8005504:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005508:	4313      	orrs	r3, r2
 800550a:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800550c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005514:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005516:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005518:	4011      	ands	r1, r2
 800551a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800551e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005520:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005522:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005524:	f023 030c 	bic.w	r3, r3, #12
 8005528:	4313      	orrs	r3, r2
 800552a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800552c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800552e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005530:	f023 0302 	bic.w	r3, r3, #2
 8005534:	4313      	orrs	r3, r2
 8005536:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005538:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800553a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005540:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005546:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005548:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800554a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800554e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8005550:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800555e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005560:	f7fd f944 	bl	80027ec <HAL_GetTick>
 8005564:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005566:	e005      	b.n	8005574 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005568:	f7fd f940 	bl	80027ec <HAL_GetTick>
 800556c:	1b00      	subs	r0, r0, r4
 800556e:	2802      	cmp	r0, #2
 8005570:	f63f af29 	bhi.w	80053c6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	019a      	lsls	r2, r3, #6
 8005578:	d5f6      	bpl.n	8005568 <HAL_RCC_OscConfig+0x4a4>
 800557a:	e665      	b.n	8005248 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800557c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800557e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005580:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005582:	f43f ae62 	beq.w	800524a <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005586:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800558a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800558c:	428b      	cmp	r3, r1
 800558e:	f47f aeb9 	bne.w	8005304 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005592:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005598:	429a      	cmp	r2, r3
 800559a:	f47f aeb3 	bne.w	8005304 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800559e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055a0:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80055a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	f47f aeac 	bne.w	8005304 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055ae:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80055b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	f47f aea5 	bne.w	8005304 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055bc:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80055c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	f47f ae9e 	bne.w	8005304 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80055c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80055ca:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80055ce:	3801      	subs	r0, #1
  return HAL_OK;
 80055d0:	1a28      	subs	r0, r5, r0
 80055d2:	bf18      	it	ne
 80055d4:	2001      	movne	r0, #1
}
 80055d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e595      	b.n	8005114 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e8:	4d10      	ldr	r5, [pc, #64]	; (800562c <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	672b      	str	r3, [r5, #112]	; 0x70
 80055f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80055f8:	f023 0304 	bic.w	r3, r3, #4
 80055fc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80055fe:	f7fd f8f5 	bl	80027ec <HAL_GetTick>
 8005602:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005604:	e005      	b.n	8005612 <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fd f8f1 	bl	80027ec <HAL_GetTick>
 800560a:	1b80      	subs	r0, r0, r6
 800560c:	42b8      	cmp	r0, r7
 800560e:	f63f aeda 	bhi.w	80053c6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005612:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005614:	0798      	lsls	r0, r3, #30
 8005616:	d4f6      	bmi.n	8005606 <HAL_RCC_OscConfig+0x542>
 8005618:	e5f9      	b.n	800520e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800561a:	68eb      	ldr	r3, [r5, #12]
 800561c:	6a22      	ldr	r2, [r4, #32]
 800561e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005622:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005626:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	e5bb      	b.n	80051a4 <HAL_RCC_OscConfig+0xe0>
 800562c:	58024400 	.word	0x58024400
 8005630:	fffffc0c 	.word	0xfffffc0c
 8005634:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005638:	4a0b      	ldr	r2, [pc, #44]	; (8005668 <HAL_RCC_OscConfig+0x5a4>)
 800563a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005642:	e6b0      	b.n	80053a6 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005644:	4a08      	ldr	r2, [pc, #32]	; (8005668 <HAL_RCC_OscConfig+0x5a4>)
 8005646:	6853      	ldr	r3, [r2, #4]
 8005648:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800564c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005650:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	e5a6      	b.n	80051a4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005656:	f042 0204 	orr.w	r2, r2, #4
 800565a:	671a      	str	r2, [r3, #112]	; 0x70
 800565c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	671a      	str	r2, [r3, #112]	; 0x70
 8005664:	e69f      	b.n	80053a6 <HAL_RCC_OscConfig+0x2e2>
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400

0800566c <HAL_RCC_MCOConfig>:
{
 800566c:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800566e:	4e25      	ldr	r6, [pc, #148]	; (8005704 <HAL_RCC_MCOConfig+0x98>)
{
 8005670:	b088      	sub	sp, #32
 8005672:	460d      	mov	r5, r1
 8005674:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 8005676:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 800567a:	b9f8      	cbnz	r0, 80056bc <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800567c:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005680:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005684:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 8005686:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800568a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800568e:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 8005690:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005694:	481c      	ldr	r0, [pc, #112]	; (8005708 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800569a:	2302      	movs	r3, #2
 800569c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056a0:	2200      	movs	r2, #0
 80056a2:	2303      	movs	r3, #3
 80056a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80056a8:	f7fe fe4e 	bl	8004348 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80056ac:	6932      	ldr	r2, [r6, #16]
 80056ae:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 80056b2:	432a      	orrs	r2, r5
 80056b4:	4322      	orrs	r2, r4
 80056b6:	6132      	str	r2, [r6, #16]
}
 80056b8:	b008      	add	sp, #32
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80056bc:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 80056c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80056c4:	4811      	ldr	r0, [pc, #68]	; (800570c <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 80056c6:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80056ca:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80056d4:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 80056d6:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80056d8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 80056da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	2303      	movs	r3, #3
 80056e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80056e6:	2300      	movs	r3, #0
 80056e8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80056ea:	f7fe fe2d 	bl	8004348 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80056ee:	6933      	ldr	r3, [r6, #16]
 80056f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80056f4:	ea43 0105 	orr.w	r1, r3, r5
 80056f8:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 80056fc:	6131      	str	r1, [r6, #16]
}
 80056fe:	b008      	add	sp, #32
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	bf00      	nop
 8005704:	58024400 	.word	0x58024400
 8005708:	58020000 	.word	0x58020000
 800570c:	58020800 	.word	0x58020800

08005710 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005710:	4a47      	ldr	r2, [pc, #284]	; (8005830 <HAL_RCC_GetSysClockFreq+0x120>)
 8005712:	6913      	ldr	r3, [r2, #16]
 8005714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005718:	2b10      	cmp	r3, #16
 800571a:	d004      	beq.n	8005726 <HAL_RCC_GetSysClockFreq+0x16>
 800571c:	2b18      	cmp	r3, #24
 800571e:	d00d      	beq.n	800573c <HAL_RCC_GetSysClockFreq+0x2c>
 8005720:	b11b      	cbz	r3, 800572a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8005722:	4844      	ldr	r0, [pc, #272]	; (8005834 <HAL_RCC_GetSysClockFreq+0x124>)
 8005724:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005726:	4844      	ldr	r0, [pc, #272]	; (8005838 <HAL_RCC_GetSysClockFreq+0x128>)
 8005728:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	0699      	lsls	r1, r3, #26
 800572e:	d54a      	bpl.n	80057c6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005730:	6813      	ldr	r3, [r2, #0]
 8005732:	4842      	ldr	r0, [pc, #264]	; (800583c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005734:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005738:	40d8      	lsrs	r0, r3
 800573a:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800573c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800573e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005740:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005742:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8005744:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005748:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800574a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800574e:	d038      	beq.n	80057c2 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005750:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005754:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005758:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800575c:	fb05 f101 	mul.w	r1, r5, r1
 8005760:	2b01      	cmp	r3, #1
 8005762:	ee07 1a90 	vmov	s15, r1
 8005766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800576a:	d002      	beq.n	8005772 <HAL_RCC_GetSysClockFreq+0x62>
 800576c:	2b02      	cmp	r3, #2
 800576e:	d02c      	beq.n	80057ca <HAL_RCC_GetSysClockFreq+0xba>
 8005770:	b393      	cbz	r3, 80057d8 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005772:	ee07 0a90 	vmov	s15, r0
 8005776:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005840 <HAL_RCC_GetSysClockFreq+0x130>
 800577a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800577e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005780:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005784:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8005844 <HAL_RCC_GetSysClockFreq+0x134>
 8005788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578c:	ee06 3a90 	vmov	s13, r3
 8005790:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005794:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005798:	ee76 6a85 	vadd.f32	s13, s13, s10
 800579c:	eee7 6a25 	vfma.f32	s13, s14, s11
 80057a0:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80057a4:	4b22      	ldr	r3, [pc, #136]	; (8005830 <HAL_RCC_GetSysClockFreq+0x120>)
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80057ac:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057be:	ee17 0a90 	vmov	r0, s15
}
 80057c2:	bc30      	pop	{r4, r5}
 80057c4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057c6:	481d      	ldr	r0, [pc, #116]	; (800583c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80057c8:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057ca:	ee07 0a90 	vmov	s15, r0
 80057ce:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005848 <HAL_RCC_GetSysClockFreq+0x138>
 80057d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d6:	e7d2      	b.n	800577e <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d8:	6813      	ldr	r3, [r2, #0]
 80057da:	069b      	lsls	r3, r3, #26
 80057dc:	d520      	bpl.n	8005820 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057de:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057e0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057e4:	4915      	ldr	r1, [pc, #84]	; (800583c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80057ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057ec:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8005844 <HAL_RCC_GetSysClockFreq+0x134>
 80057f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057fc:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057fe:	ee06 3a90 	vmov	s13, r3
 8005802:	ee05 1a90 	vmov	s11, r1
 8005806:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800580a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800580e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005812:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005816:	eee7 6a05 	vfma.f32	s13, s14, s10
 800581a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800581e:	e7c1      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005820:	ee07 0a90 	vmov	s15, r0
 8005824:	eddf 6a09 	vldr	s13, [pc, #36]	; 800584c <HAL_RCC_GetSysClockFreq+0x13c>
 8005828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582c:	e7a7      	b.n	800577e <HAL_RCC_GetSysClockFreq+0x6e>
 800582e:	bf00      	nop
 8005830:	58024400 	.word	0x58024400
 8005834:	003d0900 	.word	0x003d0900
 8005838:	017d7840 	.word	0x017d7840
 800583c:	03d09000 	.word	0x03d09000
 8005840:	4a742400 	.word	0x4a742400
 8005844:	39000000 	.word	0x39000000
 8005848:	4bbebc20 	.word	0x4bbebc20
 800584c:	4c742400 	.word	0x4c742400

08005850 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005850:	2800      	cmp	r0, #0
 8005852:	f000 810c 	beq.w	8005a6e <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005856:	4a8c      	ldr	r2, [pc, #560]	; (8005a88 <HAL_RCC_ClockConfig+0x238>)
 8005858:	6813      	ldr	r3, [r2, #0]
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	428b      	cmp	r3, r1
{
 8005860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005864:	4604      	mov	r4, r0
 8005866:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	d20c      	bcs.n	8005884 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586a:	6813      	ldr	r3, [r2, #0]
 800586c:	f023 030f 	bic.w	r3, r3, #15
 8005870:	430b      	orrs	r3, r1
 8005872:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005874:	6813      	ldr	r3, [r2, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	428b      	cmp	r3, r1
 800587c:	d002      	beq.n	8005884 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800587e:	2001      	movs	r0, #1
}
 8005880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	075f      	lsls	r7, r3, #29
 8005888:	d50b      	bpl.n	80058a2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800588a:	4980      	ldr	r1, [pc, #512]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 800588c:	6920      	ldr	r0, [r4, #16]
 800588e:	698a      	ldr	r2, [r1, #24]
 8005890:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005894:	4290      	cmp	r0, r2
 8005896:	d904      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005898:	698a      	ldr	r2, [r1, #24]
 800589a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800589e:	4302      	orrs	r2, r0
 80058a0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a2:	071e      	lsls	r6, r3, #28
 80058a4:	d50b      	bpl.n	80058be <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058a6:	4979      	ldr	r1, [pc, #484]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 80058a8:	6960      	ldr	r0, [r4, #20]
 80058aa:	69ca      	ldr	r2, [r1, #28]
 80058ac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80058b0:	4290      	cmp	r0, r2
 80058b2:	d904      	bls.n	80058be <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058b4:	69ca      	ldr	r2, [r1, #28]
 80058b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80058ba:	4302      	orrs	r2, r0
 80058bc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058be:	06d8      	lsls	r0, r3, #27
 80058c0:	d50b      	bpl.n	80058da <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058c2:	4972      	ldr	r1, [pc, #456]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 80058c4:	69a0      	ldr	r0, [r4, #24]
 80058c6:	69ca      	ldr	r2, [r1, #28]
 80058c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80058cc:	4290      	cmp	r0, r2
 80058ce:	d904      	bls.n	80058da <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058d0:	69ca      	ldr	r2, [r1, #28]
 80058d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058d6:	4302      	orrs	r2, r0
 80058d8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058da:	0699      	lsls	r1, r3, #26
 80058dc:	d50b      	bpl.n	80058f6 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058de:	496b      	ldr	r1, [pc, #428]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 80058e0:	69e0      	ldr	r0, [r4, #28]
 80058e2:	6a0a      	ldr	r2, [r1, #32]
 80058e4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80058e8:	4290      	cmp	r0, r2
 80058ea:	d904      	bls.n	80058f6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80058ec:	6a0a      	ldr	r2, [r1, #32]
 80058ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80058f2:	4302      	orrs	r2, r0
 80058f4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f6:	079a      	lsls	r2, r3, #30
 80058f8:	f140 80ab 	bpl.w	8005a52 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058fc:	4863      	ldr	r0, [pc, #396]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 80058fe:	68e1      	ldr	r1, [r4, #12]
 8005900:	6982      	ldr	r2, [r0, #24]
 8005902:	f002 020f 	and.w	r2, r2, #15
 8005906:	4291      	cmp	r1, r2
 8005908:	d904      	bls.n	8005914 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590a:	6982      	ldr	r2, [r0, #24]
 800590c:	f022 020f 	bic.w	r2, r2, #15
 8005910:	430a      	orrs	r2, r1
 8005912:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005914:	07d8      	lsls	r0, r3, #31
 8005916:	d530      	bpl.n	800597a <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005918:	4a5c      	ldr	r2, [pc, #368]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 800591a:	68a1      	ldr	r1, [r4, #8]
 800591c:	6993      	ldr	r3, [r2, #24]
 800591e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005922:	430b      	orrs	r3, r1
 8005924:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005926:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005928:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	2902      	cmp	r1, #2
 800592c:	f000 80a1 	beq.w	8005a72 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005930:	2903      	cmp	r1, #3
 8005932:	f000 8098 	beq.w	8005a66 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005936:	2901      	cmp	r1, #1
 8005938:	f000 80a1 	beq.w	8005a7e <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800593c:	0758      	lsls	r0, r3, #29
 800593e:	d59e      	bpl.n	800587e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005940:	4e52      	ldr	r6, [pc, #328]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005942:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005946:	6933      	ldr	r3, [r6, #16]
 8005948:	f023 0307 	bic.w	r3, r3, #7
 800594c:	430b      	orrs	r3, r1
 800594e:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8005950:	f7fc ff4c 	bl	80027ec <HAL_GetTick>
 8005954:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	e005      	b.n	8005964 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fc ff48 	bl	80027ec <HAL_GetTick>
 800595c:	1bc0      	subs	r0, r0, r7
 800595e:	4540      	cmp	r0, r8
 8005960:	f200 808b 	bhi.w	8005a7a <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005964:	6933      	ldr	r3, [r6, #16]
 8005966:	6862      	ldr	r2, [r4, #4]
 8005968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800596c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005970:	d1f2      	bne.n	8005958 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	0799      	lsls	r1, r3, #30
 8005976:	d506      	bpl.n	8005986 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005978:	68e1      	ldr	r1, [r4, #12]
 800597a:	4844      	ldr	r0, [pc, #272]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 800597c:	6982      	ldr	r2, [r0, #24]
 800597e:	f002 020f 	and.w	r2, r2, #15
 8005982:	428a      	cmp	r2, r1
 8005984:	d869      	bhi.n	8005a5a <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005986:	4940      	ldr	r1, [pc, #256]	; (8005a88 <HAL_RCC_ClockConfig+0x238>)
 8005988:	680a      	ldr	r2, [r1, #0]
 800598a:	f002 020f 	and.w	r2, r2, #15
 800598e:	42aa      	cmp	r2, r5
 8005990:	d90a      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	680a      	ldr	r2, [r1, #0]
 8005994:	f022 020f 	bic.w	r2, r2, #15
 8005998:	432a      	orrs	r2, r5
 800599a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800599c:	680a      	ldr	r2, [r1, #0]
 800599e:	f002 020f 	and.w	r2, r2, #15
 80059a2:	42aa      	cmp	r2, r5
 80059a4:	f47f af6b 	bne.w	800587e <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059a8:	075a      	lsls	r2, r3, #29
 80059aa:	d50b      	bpl.n	80059c4 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059ac:	4937      	ldr	r1, [pc, #220]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 80059ae:	6920      	ldr	r0, [r4, #16]
 80059b0:	698a      	ldr	r2, [r1, #24]
 80059b2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80059b6:	4290      	cmp	r0, r2
 80059b8:	d204      	bcs.n	80059c4 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059ba:	698a      	ldr	r2, [r1, #24]
 80059bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80059c0:	4302      	orrs	r2, r0
 80059c2:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	071f      	lsls	r7, r3, #28
 80059c6:	d50b      	bpl.n	80059e0 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059c8:	4930      	ldr	r1, [pc, #192]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 80059ca:	6960      	ldr	r0, [r4, #20]
 80059cc:	69ca      	ldr	r2, [r1, #28]
 80059ce:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80059d2:	4290      	cmp	r0, r2
 80059d4:	d204      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059d6:	69ca      	ldr	r2, [r1, #28]
 80059d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80059dc:	4302      	orrs	r2, r0
 80059de:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e0:	06de      	lsls	r6, r3, #27
 80059e2:	d50b      	bpl.n	80059fc <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059e4:	4929      	ldr	r1, [pc, #164]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 80059e6:	69a0      	ldr	r0, [r4, #24]
 80059e8:	69ca      	ldr	r2, [r1, #28]
 80059ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80059ee:	4290      	cmp	r0, r2
 80059f0:	d204      	bcs.n	80059fc <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059f2:	69ca      	ldr	r2, [r1, #28]
 80059f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059f8:	4302      	orrs	r2, r0
 80059fa:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059fc:	069d      	lsls	r5, r3, #26
 80059fe:	d50b      	bpl.n	8005a18 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a00:	4a22      	ldr	r2, [pc, #136]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 8005a02:	69e1      	ldr	r1, [r4, #28]
 8005a04:	6a13      	ldr	r3, [r2, #32]
 8005a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a0a:	4299      	cmp	r1, r3
 8005a0c:	d204      	bcs.n	8005a18 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a0e:	6a13      	ldr	r3, [r2, #32]
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a14:	430b      	orrs	r3, r1
 8005a16:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a18:	f7ff fe7a 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <HAL_RCC_ClockConfig+0x23c>)
 8005a1e:	4603      	mov	r3, r0
 8005a20:	481b      	ldr	r0, [pc, #108]	; (8005a90 <HAL_RCC_ClockConfig+0x240>)
 8005a22:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a24:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a26:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8005a2a:	4d1a      	ldr	r5, [pc, #104]	; (8005a94 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a2c:	f002 020f 	and.w	r2, r2, #15
 8005a30:	4c19      	ldr	r4, [pc, #100]	; (8005a98 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a32:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a34:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a36:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8005a3a:	4818      	ldr	r0, [pc, #96]	; (8005a9c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a3c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a40:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8005a42:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005a44:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a46:	40d3      	lsrs	r3, r2
 8005a48:	6023      	str	r3, [r4, #0]
}
 8005a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8005a4e:	f7fc be6b 	b.w	8002728 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a52:	07da      	lsls	r2, r3, #31
 8005a54:	f53f af60 	bmi.w	8005918 <HAL_RCC_ClockConfig+0xc8>
 8005a58:	e795      	b.n	8005986 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5a:	6982      	ldr	r2, [r0, #24]
 8005a5c:	f022 020f 	bic.w	r2, r2, #15
 8005a60:	4311      	orrs	r1, r2
 8005a62:	6181      	str	r1, [r0, #24]
 8005a64:	e78f      	b.n	8005986 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a66:	019f      	lsls	r7, r3, #6
 8005a68:	f53f af6a 	bmi.w	8005940 <HAL_RCC_ClockConfig+0xf0>
 8005a6c:	e707      	b.n	800587e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005a6e:	2001      	movs	r0, #1
}
 8005a70:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a72:	039b      	lsls	r3, r3, #14
 8005a74:	f53f af64 	bmi.w	8005940 <HAL_RCC_ClockConfig+0xf0>
 8005a78:	e701      	b.n	800587e <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8005a7a:	2003      	movs	r0, #3
 8005a7c:	e700      	b.n	8005880 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a7e:	05de      	lsls	r6, r3, #23
 8005a80:	f53f af5e 	bmi.w	8005940 <HAL_RCC_ClockConfig+0xf0>
 8005a84:	e6fb      	b.n	800587e <HAL_RCC_ClockConfig+0x2e>
 8005a86:	bf00      	nop
 8005a88:	52002000 	.word	0x52002000
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	080090f8 	.word	0x080090f8
 8005a94:	24000060 	.word	0x24000060
 8005a98:	24000064 	.word	0x24000064
 8005a9c:	2400006c 	.word	0x2400006c

08005aa0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa0:	4a18      	ldr	r2, [pc, #96]	; (8005b04 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa4:	6913      	ldr	r3, [r2, #16]
 8005aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aaa:	2b10      	cmp	r3, #16
 8005aac:	d01a      	beq.n	8005ae4 <HAL_RCC_GetHCLKFreq+0x44>
 8005aae:	2b18      	cmp	r3, #24
 8005ab0:	d023      	beq.n	8005afa <HAL_RCC_GetHCLKFreq+0x5a>
 8005ab2:	b1cb      	cbz	r3, 8005ae8 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8005ab4:	4814      	ldr	r0, [pc, #80]	; (8005b08 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <HAL_RCC_GetHCLKFreq+0x64>)
 8005ab8:	4914      	ldr	r1, [pc, #80]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x6c>)
 8005aba:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005abc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005abe:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ac2:	4c13      	ldr	r4, [pc, #76]	; (8005b10 <HAL_RCC_GetHCLKFreq+0x70>)
 8005ac4:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ac8:	4d12      	ldr	r5, [pc, #72]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005aca:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005acc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ace:	f002 021f 	and.w	r2, r2, #31
 8005ad2:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ad6:	f003 001f 	and.w	r0, r3, #31
 8005ada:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8005ade:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ae0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ae4:	480c      	ldr	r0, [pc, #48]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x78>)
 8005ae6:	e7e6      	b.n	8005ab6 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae8:	6813      	ldr	r3, [r2, #0]
 8005aea:	069b      	lsls	r3, r3, #26
 8005aec:	d508      	bpl.n	8005b00 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	480a      	ldr	r0, [pc, #40]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x7c>)
 8005af2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005af6:	40d0      	lsrs	r0, r2
 8005af8:	e7dd      	b.n	8005ab6 <HAL_RCC_GetHCLKFreq+0x16>
 8005afa:	f7ff fa5f 	bl	8004fbc <HAL_RCC_GetSysClockFreq.part.0>
 8005afe:	e7da      	b.n	8005ab6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b00:	4806      	ldr	r0, [pc, #24]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x7c>)
 8005b02:	e7d8      	b.n	8005ab6 <HAL_RCC_GetHCLKFreq+0x16>
 8005b04:	58024400 	.word	0x58024400
 8005b08:	003d0900 	.word	0x003d0900
 8005b0c:	080090f8 	.word	0x080090f8
 8005b10:	24000064 	.word	0x24000064
 8005b14:	24000060 	.word	0x24000060
 8005b18:	017d7840 	.word	0x017d7840
 8005b1c:	03d09000 	.word	0x03d09000

08005b20 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b20:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b22:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b24:	6913      	ldr	r3, [r2, #16]
 8005b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d021      	beq.n	8005b72 <HAL_RCC_GetPCLK1Freq+0x52>
 8005b2e:	2b18      	cmp	r3, #24
 8005b30:	d02b      	beq.n	8005b8a <HAL_RCC_GetPCLK1Freq+0x6a>
 8005b32:	b303      	cbz	r3, 8005b76 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8005b34:	4818      	ldr	r0, [pc, #96]	; (8005b98 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b36:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <HAL_RCC_GetPCLK1Freq+0x74>)
 8005b38:	4918      	ldr	r1, [pc, #96]	; (8005b9c <HAL_RCC_GetPCLK1Freq+0x7c>)
 8005b3a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8005b3c:	4d18      	ldr	r5, [pc, #96]	; (8005ba0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b3e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b42:	4c18      	ldr	r4, [pc, #96]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b44:	5ccb      	ldrb	r3, [r1, r3]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b4e:	6990      	ldr	r0, [r2, #24]
 8005b50:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8005b54:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b56:	5c08      	ldrb	r0, [r1, r0]
 8005b58:	f000 001f 	and.w	r0, r0, #31
 8005b5c:	40c3      	lsrs	r3, r0
 8005b5e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b60:	69d2      	ldr	r2, [r2, #28]
 8005b62:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005b66:	5c88      	ldrb	r0, [r1, r2]
 8005b68:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b6c:	fa23 f000 	lsr.w	r0, r3, r0
 8005b70:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b72:	480d      	ldr	r0, [pc, #52]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x88>)
 8005b74:	e7df      	b.n	8005b36 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b76:	6813      	ldr	r3, [r2, #0]
 8005b78:	069b      	lsls	r3, r3, #26
 8005b7a:	d509      	bpl.n	8005b90 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b7c:	6810      	ldr	r0, [r2, #0]
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x8c>)
 8005b80:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005b84:	fa23 f000 	lsr.w	r0, r3, r0
 8005b88:	e7d5      	b.n	8005b36 <HAL_RCC_GetPCLK1Freq+0x16>
 8005b8a:	f7ff fa17 	bl	8004fbc <HAL_RCC_GetSysClockFreq.part.0>
 8005b8e:	e7d2      	b.n	8005b36 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b90:	4806      	ldr	r0, [pc, #24]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x8c>)
 8005b92:	e7d0      	b.n	8005b36 <HAL_RCC_GetPCLK1Freq+0x16>
 8005b94:	58024400 	.word	0x58024400
 8005b98:	003d0900 	.word	0x003d0900
 8005b9c:	080090f8 	.word	0x080090f8
 8005ba0:	24000060 	.word	0x24000060
 8005ba4:	24000064 	.word	0x24000064
 8005ba8:	017d7840 	.word	0x017d7840
 8005bac:	03d09000 	.word	0x03d09000

08005bb0 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb0:	4a1c      	ldr	r2, [pc, #112]	; (8005c24 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb4:	6913      	ldr	r3, [r2, #16]
 8005bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d021      	beq.n	8005c02 <HAL_RCC_GetPCLK2Freq+0x52>
 8005bbe:	2b18      	cmp	r3, #24
 8005bc0:	d02b      	beq.n	8005c1a <HAL_RCC_GetPCLK2Freq+0x6a>
 8005bc2:	b303      	cbz	r3, 8005c06 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8005bc4:	4818      	ldr	r0, [pc, #96]	; (8005c28 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <HAL_RCC_GetPCLK2Freq+0x74>)
 8005bc8:	4918      	ldr	r1, [pc, #96]	; (8005c2c <HAL_RCC_GetPCLK2Freq+0x7c>)
 8005bca:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8005bcc:	4d18      	ldr	r5, [pc, #96]	; (8005c30 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bce:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bd2:	4c18      	ldr	r4, [pc, #96]	; (8005c34 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bd4:	5ccb      	ldrb	r3, [r1, r3]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bde:	6990      	ldr	r0, [r2, #24]
 8005be0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8005be4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005be6:	5c08      	ldrb	r0, [r1, r0]
 8005be8:	f000 001f 	and.w	r0, r0, #31
 8005bec:	40c3      	lsrs	r3, r0
 8005bee:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005bf0:	69d2      	ldr	r2, [r2, #28]
 8005bf2:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8005bf6:	5c88      	ldrb	r0, [r1, r2]
 8005bf8:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005bfc:	fa23 f000 	lsr.w	r0, r3, r0
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c02:	480d      	ldr	r0, [pc, #52]	; (8005c38 <HAL_RCC_GetPCLK2Freq+0x88>)
 8005c04:	e7df      	b.n	8005bc6 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c06:	6813      	ldr	r3, [r2, #0]
 8005c08:	069b      	lsls	r3, r3, #26
 8005c0a:	d509      	bpl.n	8005c20 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c0c:	6810      	ldr	r0, [r2, #0]
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8005c10:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005c14:	fa23 f000 	lsr.w	r0, r3, r0
 8005c18:	e7d5      	b.n	8005bc6 <HAL_RCC_GetPCLK2Freq+0x16>
 8005c1a:	f7ff f9cf 	bl	8004fbc <HAL_RCC_GetSysClockFreq.part.0>
 8005c1e:	e7d2      	b.n	8005bc6 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c20:	4806      	ldr	r0, [pc, #24]	; (8005c3c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8005c22:	e7d0      	b.n	8005bc6 <HAL_RCC_GetPCLK2Freq+0x16>
 8005c24:	58024400 	.word	0x58024400
 8005c28:	003d0900 	.word	0x003d0900
 8005c2c:	080090f8 	.word	0x080090f8
 8005c30:	24000060 	.word	0x24000060
 8005c34:	24000064 	.word	0x24000064
 8005c38:	017d7840 	.word	0x017d7840
 8005c3c:	03d09000 	.word	0x03d09000

08005c40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c42:	4c3a      	ldr	r4, [pc, #232]	; (8005d2c <RCCEx_PLL2_Config+0xec>)
 8005c44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d067      	beq.n	8005d1e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5a:	f7fc fdc7 	bl	80027ec <HAL_GetTick>
 8005c5e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c60:	e004      	b.n	8005c6c <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c62:	f7fc fdc3 	bl	80027ec <HAL_GetTick>
 8005c66:	1b43      	subs	r3, r0, r5
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d856      	bhi.n	8005d1a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	011a      	lsls	r2, r3, #4
 8005c70:	d4f7      	bmi.n	8005c62 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c74:	6832      	ldr	r2, [r6, #0]
 8005c76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c7a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c80:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	3a01      	subs	r2, #1
 8005c88:	025b      	lsls	r3, r3, #9
 8005c8a:	0412      	lsls	r2, r2, #16
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005c92:	4313      	orrs	r3, r2
 8005c94:	6872      	ldr	r2, [r6, #4]
 8005c96:	3a01      	subs	r2, #1
 8005c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	6932      	ldr	r2, [r6, #16]
 8005ca0:	3a01      	subs	r2, #1
 8005ca2:	0612      	lsls	r2, r2, #24
 8005ca4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cae:	6972      	ldr	r2, [r6, #20]
 8005cb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005cb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005cba:	69b3      	ldr	r3, [r6, #24]
 8005cbc:	f022 0220 	bic.w	r2, r2, #32
 8005cc0:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cc2:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005cc4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005cc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005cc8:	f022 0210 	bic.w	r2, r2, #16
 8005ccc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005cd0:	69f2      	ldr	r2, [r6, #28]
 8005cd2:	400b      	ands	r3, r1
 8005cd4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005cd8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005cda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cdc:	f043 0310 	orr.w	r3, r3, #16
 8005ce0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ce2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005ce4:	b1ef      	cbz	r7, 8005d22 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ce6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ce8:	bf0c      	ite	eq
 8005cea:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005cee:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005cf2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005cf4:	4c0d      	ldr	r4, [pc, #52]	; (8005d2c <RCCEx_PLL2_Config+0xec>)
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cfc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cfe:	f7fc fd75 	bl	80027ec <HAL_GetTick>
 8005d02:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d04:	e004      	b.n	8005d10 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d06:	f7fc fd71 	bl	80027ec <HAL_GetTick>
 8005d0a:	1b40      	subs	r0, r0, r5
 8005d0c:	2802      	cmp	r0, #2
 8005d0e:	d804      	bhi.n	8005d1a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	d5f7      	bpl.n	8005d06 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8005d16:	2000      	movs	r0, #0
}
 8005d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005d1a:	2003      	movs	r0, #3
}
 8005d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005d1e:	2001      	movs	r0, #1
}
 8005d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d28:	e7e4      	b.n	8005cf4 <RCCEx_PLL2_Config+0xb4>
 8005d2a:	bf00      	nop
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	ffff0007 	.word	0xffff0007

08005d34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d36:	4c3a      	ldr	r4, [pc, #232]	; (8005e20 <RCCEx_PLL3_Config+0xec>)
 8005d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d067      	beq.n	8005e12 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	4606      	mov	r6, r0
 8005d46:	460f      	mov	r7, r1
 8005d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4e:	f7fc fd4d 	bl	80027ec <HAL_GetTick>
 8005d52:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d54:	e004      	b.n	8005d60 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d56:	f7fc fd49 	bl	80027ec <HAL_GetTick>
 8005d5a:	1b43      	subs	r3, r0, r5
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d856      	bhi.n	8005e0e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	009a      	lsls	r2, r3, #2
 8005d64:	d4f7      	bmi.n	8005d56 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d68:	6832      	ldr	r2, [r6, #0]
 8005d6a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005d6e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005d72:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d74:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	3a01      	subs	r2, #1
 8005d7c:	025b      	lsls	r3, r3, #9
 8005d7e:	0412      	lsls	r2, r2, #16
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005d86:	4313      	orrs	r3, r2
 8005d88:	6872      	ldr	r2, [r6, #4]
 8005d8a:	3a01      	subs	r2, #1
 8005d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d90:	4313      	orrs	r3, r2
 8005d92:	6932      	ldr	r2, [r6, #16]
 8005d94:	3a01      	subs	r2, #1
 8005d96:	0612      	lsls	r2, r2, #24
 8005d98:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005da2:	6972      	ldr	r2, [r6, #20]
 8005da4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005da8:	4313      	orrs	r3, r2
 8005daa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005dac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005dae:	69b3      	ldr	r3, [r6, #24]
 8005db0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005db4:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005db6:	4b1b      	ldr	r3, [pc, #108]	; (8005e24 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005db8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005dba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dc0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005dc2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005dc4:	69f2      	ldr	r2, [r6, #28]
 8005dc6:	400b      	ands	r3, r1
 8005dc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005dcc:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005dd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005dd8:	b1ef      	cbz	r7, 8005e16 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005dda:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ddc:	bf0c      	ite	eq
 8005dde:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005de2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005de6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005de8:	4c0d      	ldr	r4, [pc, #52]	; (8005e20 <RCCEx_PLL3_Config+0xec>)
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df2:	f7fc fcfb 	bl	80027ec <HAL_GetTick>
 8005df6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005df8:	e004      	b.n	8005e04 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dfa:	f7fc fcf7 	bl	80027ec <HAL_GetTick>
 8005dfe:	1b40      	subs	r0, r0, r5
 8005e00:	2802      	cmp	r0, #2
 8005e02:	d804      	bhi.n	8005e0e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	d5f7      	bpl.n	8005dfa <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8005e0a:	2000      	movs	r0, #0
}
 8005e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005e0e:	2003      	movs	r0, #3
}
 8005e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005e12:	2001      	movs	r0, #1
}
 8005e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e1c:	e7e4      	b.n	8005de8 <RCCEx_PLL3_Config+0xb4>
 8005e1e:	bf00      	nop
 8005e20:	58024400 	.word	0x58024400
 8005e24:	ffff0007 	.word	0xffff0007

08005e28 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e2c:	6803      	ldr	r3, [r0, #0]
{
 8005e2e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e30:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8005e34:	d022      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005e36:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005e38:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005e3c:	f000 8499 	beq.w	8006772 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005e40:	d811      	bhi.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	f000 8503 	beq.w	800684e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8005e48:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005e4c:	f040 84fc 	bne.w	8006848 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e50:	2102      	movs	r1, #2
 8005e52:	3004      	adds	r0, #4
 8005e54:	f7ff fef4 	bl	8005c40 <RCCEx_PLL2_Config>
 8005e58:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005e5a:	2e00      	cmp	r6, #0
 8005e5c:	f040 8491 	bne.w	8006782 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e60:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	e003      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005e66:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8005e6a:	f040 84ed 	bne.w	8006848 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e6e:	48a8      	ldr	r0, [pc, #672]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e70:	2600      	movs	r6, #0
 8005e72:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005e74:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e7c:	05dd      	lsls	r5, r3, #23
 8005e7e:	d50a      	bpl.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005e80:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e82:	2a04      	cmp	r2, #4
 8005e84:	d806      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005e86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005e8a:	04ad      	.short	0x04ad
 8005e8c:	0493048c 	.word	0x0493048c
 8005e90:	02e902e9 	.word	0x02e902e9
 8005e94:	2601      	movs	r6, #1
 8005e96:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e98:	0598      	lsls	r0, r3, #22
 8005e9a:	d51b      	bpl.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 8005e9c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005e9e:	2a80      	cmp	r2, #128	; 0x80
 8005ea0:	f000 8497 	beq.w	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8005ea4:	f200 80ec 	bhi.w	8006080 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	f000 8394 	beq.w	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005eae:	2a40      	cmp	r2, #64	; 0x40
 8005eb0:	f040 80ed 	bne.w	800608e <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	1d20      	adds	r0, r4, #4
 8005eb8:	f7ff fec2 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ebc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ebe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	f040 836e 	bne.w	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ec6:	4992      	ldr	r1, [pc, #584]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eca:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005ecc:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8005ed0:	4302      	orrs	r2, r0
 8005ed2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ed4:	0559      	lsls	r1, r3, #21
 8005ed6:	d51f      	bpl.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8005ed8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8005edc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005ee0:	f000 8456 	beq.w	8006790 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005ee4:	f200 80d6 	bhi.w	8006094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	f000 837a 	beq.w	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 8005eee:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005ef2:	f040 80d7 	bne.w	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	1d20      	adds	r0, r4, #4
 8005efa:	f7ff fea1 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005efe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f00:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005f02:	2d00      	cmp	r5, #0
 8005f04:	f040 8351 	bne.w	80065aa <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f08:	4981      	ldr	r1, [pc, #516]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f0a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8005f0e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005f10:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8005f14:	4302      	orrs	r2, r0
 8005f16:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f18:	051a      	lsls	r2, r3, #20
 8005f1a:	d51f      	bpl.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 8005f1c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8005f20:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8005f24:	f000 8465 	beq.w	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8005f28:	f200 80bf 	bhi.w	80060aa <HAL_RCCEx_PeriphCLKConfig+0x282>
 8005f2c:	2a00      	cmp	r2, #0
 8005f2e:	f000 835e 	beq.w	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8005f32:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8005f36:	f040 80c0 	bne.w	80060ba <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	1d20      	adds	r0, r4, #4
 8005f3e:	f7ff fe7f 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f42:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f44:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	f040 8333 	bne.w	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f4c:	4970      	ldr	r1, [pc, #448]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f4e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8005f52:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005f54:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8005f58:	4302      	orrs	r2, r0
 8005f5a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f5c:	019f      	lsls	r7, r3, #6
 8005f5e:	d518      	bpl.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 8005f60:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f62:	2a20      	cmp	r2, #32
 8005f64:	f000 83ce 	beq.w	8006704 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005f68:	f200 80aa 	bhi.w	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005f6c:	b13a      	cbz	r2, 8005f7e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005f6e:	2a10      	cmp	r2, #16
 8005f70:	f040 80a9 	bne.w	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f74:	4966      	ldr	r1, [pc, #408]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005f78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f7c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	f040 8360 	bne.w	8006644 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f84:	4962      	ldr	r1, [pc, #392]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005f88:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005f8a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005f8e:	4302      	orrs	r2, r0
 8005f90:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f92:	04d8      	lsls	r0, r3, #19
 8005f94:	d51d      	bpl.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 8005f96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005f98:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005f9c:	f000 8410 	beq.w	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005fa0:	f200 8094 	bhi.w	80060cc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	f000 8328 	beq.w	80065fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005faa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005fae:	f040 8095 	bne.w	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	1d20      	adds	r0, r4, #4
 8005fb6:	f7ff fe43 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fba:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fbc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	f040 82f1 	bne.w	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fc4:	4952      	ldr	r1, [pc, #328]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005fc6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005fc8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005fca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005fce:	4302      	orrs	r2, r0
 8005fd0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fd2:	0499      	lsls	r1, r3, #18
 8005fd4:	d51a      	bpl.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 8005fd6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005fd8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8005fdc:	f000 8376 	beq.w	80066cc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8005fe0:	d87f      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005fe2:	b14a      	cbz	r2, 8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8005fe4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005fe8:	f040 8083 	bne.w	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fec:	2101      	movs	r1, #1
 8005fee:	1d20      	adds	r0, r4, #4
 8005ff0:	f7ff fe26 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ff4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ff6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	f040 8325 	bne.w	8006648 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ffe:	4944      	ldr	r1, [pc, #272]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006000:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006002:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006004:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006008:	4302      	orrs	r2, r0
 800600a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800600c:	045a      	lsls	r2, r3, #17
 800600e:	d51b      	bpl.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006010:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8006014:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006018:	f000 8362 	beq.w	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800601c:	d86c      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800601e:	b142      	cbz	r2, 8006032 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006020:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006024:	d170      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006026:	2101      	movs	r1, #1
 8006028:	1d20      	adds	r0, r4, #4
 800602a:	f7ff fe09 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800602e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006030:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006032:	2d00      	cmp	r5, #0
 8006034:	f040 830a 	bne.w	800664c <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006038:	4935      	ldr	r1, [pc, #212]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800603a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800603e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006040:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8006044:	4302      	orrs	r2, r0
 8006046:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006048:	041f      	lsls	r7, r3, #16
 800604a:	d50d      	bpl.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 800604c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800604e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006052:	f000 834f 	beq.w	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8006056:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800605a:	f000 820b 	beq.w	8006474 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800605e:	2a00      	cmp	r2, #0
 8006060:	f000 820e 	beq.w	8006480 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006064:	2601      	movs	r6, #1
 8006066:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006068:	01d8      	lsls	r0, r3, #7
 800606a:	d55d      	bpl.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 800606c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800606e:	2a03      	cmp	r2, #3
 8006070:	f200 8418 	bhi.w	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 8006074:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006078:	035a0054 	.word	0x035a0054
 800607c:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 8006080:	2ac0      	cmp	r2, #192	; 0xc0
 8006082:	f43f af1d 	beq.w	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006086:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800608a:	f43f af19 	beq.w	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800608e:	2601      	movs	r6, #1
 8006090:	4635      	mov	r5, r6
 8006092:	e71f      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006094:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8006098:	f43f af33 	beq.w	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800609c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80060a0:	f43f af2f 	beq.w	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80060a4:	2601      	movs	r6, #1
 80060a6:	4635      	mov	r5, r6
 80060a8:	e736      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80060aa:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80060ae:	f43f af4a 	beq.w	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80060b2:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80060b6:	f43f af46 	beq.w	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80060ba:	2601      	movs	r6, #1
 80060bc:	4635      	mov	r5, r6
 80060be:	e74d      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 80060c0:	2a30      	cmp	r2, #48	; 0x30
 80060c2:	f43f af5c 	beq.w	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x156>
 80060c6:	2601      	movs	r6, #1
 80060c8:	4635      	mov	r5, r6
 80060ca:	e762      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 80060cc:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80060d0:	f43f af75 	beq.w	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80060d4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80060d8:	f43f af71 	beq.w	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80060dc:	2601      	movs	r6, #1
 80060de:	4635      	mov	r5, r6
 80060e0:	e777      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 80060e2:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80060e6:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80060ea:	d085      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80060ec:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80060f0:	d082      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80060f2:	2601      	movs	r6, #1
 80060f4:	4635      	mov	r5, r6
 80060f6:	e789      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 80060f8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80060fc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8006100:	d097      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006102:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8006106:	d094      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006108:	2601      	movs	r6, #1
 800610a:	4635      	mov	r5, r6
 800610c:	e79c      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800610e:	bf00      	nop
 8006110:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006114:	2102      	movs	r1, #2
 8006116:	1d20      	adds	r0, r4, #4
 8006118:	f7ff fd92 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800611c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800611e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006120:	2d00      	cmp	r5, #0
 8006122:	f000 8272 	beq.w	800660a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8006126:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006128:	0259      	lsls	r1, r3, #9
 800612a:	f100 81ee 	bmi.w	800650a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800612e:	07df      	lsls	r7, r3, #31
 8006130:	d52f      	bpl.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006132:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006134:	2a28      	cmp	r2, #40	; 0x28
 8006136:	d82a      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x366>
 8006138:	e8df f012 	tbh	[pc, r2, lsl #1]
 800613c:	002901dc 	.word	0x002901dc
 8006140:	00290029 	.word	0x00290029
 8006144:	00290029 	.word	0x00290029
 8006148:	00290029 	.word	0x00290029
 800614c:	00290378 	.word	0x00290378
 8006150:	00290029 	.word	0x00290029
 8006154:	00290029 	.word	0x00290029
 8006158:	00290029 	.word	0x00290029
 800615c:	002901d5 	.word	0x002901d5
 8006160:	00290029 	.word	0x00290029
 8006164:	00290029 	.word	0x00290029
 8006168:	00290029 	.word	0x00290029
 800616c:	002901dc 	.word	0x002901dc
 8006170:	00290029 	.word	0x00290029
 8006174:	00290029 	.word	0x00290029
 8006178:	00290029 	.word	0x00290029
 800617c:	002901dc 	.word	0x002901dc
 8006180:	00290029 	.word	0x00290029
 8006184:	00290029 	.word	0x00290029
 8006188:	00290029 	.word	0x00290029
 800618c:	01dc      	.short	0x01dc
 800618e:	2601      	movs	r6, #1
 8006190:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006192:	0798      	lsls	r0, r3, #30
 8006194:	d516      	bpl.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006196:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006198:	2a05      	cmp	r2, #5
 800619a:	f200 8380 	bhi.w	800689e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800619e:	e8df f012 	tbh	[pc, r2, lsl #1]
 80061a2:	000d      	.short	0x000d
 80061a4:	00060331 	.word	0x00060331
 80061a8:	000d000d 	.word	0x000d000d
 80061ac:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061ae:	2101      	movs	r1, #1
 80061b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80061b4:	f7ff fdbe 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061b8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061ba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80061bc:	2d00      	cmp	r5, #0
 80061be:	f000 822e 	beq.w	800661e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80061c2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061c4:	0759      	lsls	r1, r3, #29
 80061c6:	d517      	bpl.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80061c8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80061cc:	2a05      	cmp	r2, #5
 80061ce:	f200 836c 	bhi.w	80068aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80061d2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80061d6:	000d      	.short	0x000d
 80061d8:	00060321 	.word	0x00060321
 80061dc:	000d000d 	.word	0x000d000d
 80061e0:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061e2:	2101      	movs	r1, #1
 80061e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80061e8:	f7ff fda4 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061ec:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	f000 821c 	beq.w	800662e <HAL_RCCEx_PeriphCLKConfig+0x806>
 80061f6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061f8:	069a      	lsls	r2, r3, #26
 80061fa:	d51d      	bpl.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80061fc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006200:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006204:	f000 8287 	beq.w	8006716 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006208:	f200 80e6 	bhi.w	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 800620c:	b14a      	cbz	r2, 8006222 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800620e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006212:	f040 80eb 	bne.w	80063ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006216:	2100      	movs	r1, #0
 8006218:	1d20      	adds	r0, r4, #4
 800621a:	f7ff fd11 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800621e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006220:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006222:	2d00      	cmp	r5, #0
 8006224:	f040 81ef 	bne.w	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006228:	49a4      	ldr	r1, [pc, #656]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800622a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800622e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006230:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8006234:	4302      	orrs	r2, r0
 8006236:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006238:	065f      	lsls	r7, r3, #25
 800623a:	d51d      	bpl.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800623c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8006240:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006244:	f000 822e 	beq.w	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8006248:	f200 80d3 	bhi.w	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800624c:	b14a      	cbz	r2, 8006262 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800624e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006252:	f040 80d8 	bne.w	8006406 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006256:	2100      	movs	r1, #0
 8006258:	1d20      	adds	r0, r4, #4
 800625a:	f7ff fcf1 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800625e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006260:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006262:	2d00      	cmp	r5, #0
 8006264:	f040 81f4 	bne.w	8006650 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006268:	4994      	ldr	r1, [pc, #592]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800626a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800626e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006270:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006274:	4302      	orrs	r2, r0
 8006276:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006278:	0618      	lsls	r0, r3, #24
 800627a:	d51d      	bpl.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800627c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8006280:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006284:	f000 8218 	beq.w	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8006288:	f200 80c0 	bhi.w	800640c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800628c:	b14a      	cbz	r2, 80062a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800628e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006292:	f040 80c5 	bne.w	8006420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006296:	2100      	movs	r1, #0
 8006298:	1d20      	adds	r0, r4, #4
 800629a:	f7ff fcd1 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800629e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062a0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80062a2:	2d00      	cmp	r5, #0
 80062a4:	f040 81b9 	bne.w	800661a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062a8:	4984      	ldr	r1, [pc, #528]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80062aa:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80062ae:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80062b0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80062b4:	4302      	orrs	r2, r0
 80062b6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062b8:	0719      	lsls	r1, r3, #28
 80062ba:	d50b      	bpl.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80062bc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80062c0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80062c4:	f000 823b 	beq.w	800673e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062c8:	487c      	ldr	r0, [pc, #496]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80062ca:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80062cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80062d0:	430a      	orrs	r2, r1
 80062d2:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062d4:	06da      	lsls	r2, r3, #27
 80062d6:	d50b      	bpl.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80062d8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80062dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80062e0:	f000 823a 	beq.w	8006758 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062e4:	4875      	ldr	r0, [pc, #468]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80062e6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80062e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80062ec:	430a      	orrs	r2, r1
 80062ee:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062f0:	031f      	lsls	r7, r3, #12
 80062f2:	d50e      	bpl.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 80062f4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80062f8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80062fc:	f000 80e0 	beq.w	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
 8006300:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006304:	f000 80e3 	beq.w	80064ce <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8006308:	2900      	cmp	r1, #0
 800630a:	f000 81c3 	beq.w	8006694 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800630e:	2601      	movs	r6, #1
 8006310:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006312:	0358      	lsls	r0, r3, #13
 8006314:	d50f      	bpl.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 8006316:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800631a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800631e:	f000 80ba 	beq.w	8006496 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006322:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8006326:	f000 80bd 	beq.w	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800632a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800632e:	f000 81a9 	beq.w	8006684 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8006332:	2601      	movs	r6, #1
 8006334:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006336:	03d9      	lsls	r1, r3, #15
 8006338:	d509      	bpl.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 800633a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800633c:	2a00      	cmp	r2, #0
 800633e:	f000 818f 	beq.w	8006660 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8006342:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006346:	f000 8136 	beq.w	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 800634a:	2601      	movs	r6, #1
 800634c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800634e:	009a      	lsls	r2, r3, #2
 8006350:	f100 811c 	bmi.w	800658c <HAL_RCCEx_PeriphCLKConfig+0x764>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006354:	039f      	lsls	r7, r3, #14
 8006356:	d466      	bmi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 8006358:	1e30      	subs	r0, r6, #0
 800635a:	bf18      	it	ne
 800635c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800635e:	02de      	lsls	r6, r3, #11
 8006360:	d506      	bpl.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006362:	4956      	ldr	r1, [pc, #344]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006364:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006366:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006368:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800636c:	432a      	orrs	r2, r5
 800636e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006370:	00dd      	lsls	r5, r3, #3
 8006372:	d507      	bpl.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006374:	4951      	ldr	r1, [pc, #324]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006376:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800637a:	690a      	ldr	r2, [r1, #16]
 800637c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006380:	432a      	orrs	r2, r5
 8006382:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006384:	0299      	lsls	r1, r3, #10
 8006386:	d506      	bpl.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006388:	494c      	ldr	r1, [pc, #304]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800638a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800638c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800638e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006392:	432a      	orrs	r2, r5
 8006394:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006396:	005a      	lsls	r2, r3, #1
 8006398:	d509      	bpl.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800639a:	4a48      	ldr	r2, [pc, #288]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800639c:	6911      	ldr	r1, [r2, #16]
 800639e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80063a2:	6111      	str	r1, [r2, #16]
 80063a4:	6911      	ldr	r1, [r2, #16]
 80063a6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80063aa:	4329      	orrs	r1, r5
 80063ac:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da06      	bge.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80063b2:	4942      	ldr	r1, [pc, #264]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80063b4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80063b6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80063b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063bc:	432a      	orrs	r2, r5
 80063be:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	d507      	bpl.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063c4:	4a3d      	ldr	r2, [pc, #244]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80063c6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80063ca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80063cc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6553      	str	r3, [r2, #84]	; 0x54
}
 80063d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 80063d8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80063dc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80063e0:	f43f af1f 	beq.w	8006222 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80063e4:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80063e8:	f43f af1b 	beq.w	8006222 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80063ec:	2601      	movs	r6, #1
 80063ee:	4635      	mov	r5, r6
 80063f0:	e722      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80063f2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80063f6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80063fa:	f43f af32 	beq.w	8006262 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80063fe:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8006402:	f43f af2e 	beq.w	8006262 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006406:	2601      	movs	r6, #1
 8006408:	4635      	mov	r5, r6
 800640a:	e735      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800640c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8006410:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006414:	f43f af45 	beq.w	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006418:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800641c:	f43f af41 	beq.w	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006420:	2601      	movs	r6, #1
 8006422:	4635      	mov	r5, r6
 8006424:	e748      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 8006426:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006428:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800642c:	f000 8121 	beq.w	8006672 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8006430:	d906      	bls.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006432:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8006436:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800643a:	d003      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800643c:	2001      	movs	r0, #1
 800643e:	e78e      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x536>
 8006440:	2a00      	cmp	r2, #0
 8006442:	d1fb      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 8006444:	2d00      	cmp	r5, #0
 8006446:	d1f9      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006448:	4d1c      	ldr	r5, [pc, #112]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 800644a:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800644c:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800644e:	bf18      	it	ne
 8006450:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006452:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006456:	430a      	orrs	r2, r1
 8006458:	656a      	str	r2, [r5, #84]	; 0x54
 800645a:	e780      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 800645c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800645e:	2d00      	cmp	r5, #0
 8006460:	f040 80a5 	bne.w	80065ae <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006464:	4915      	ldr	r1, [pc, #84]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006468:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800646a:	f022 0207 	bic.w	r2, r2, #7
 800646e:	4302      	orrs	r2, r0
 8006470:	650a      	str	r2, [r1, #80]	; 0x50
 8006472:	e511      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006474:	2101      	movs	r1, #1
 8006476:	1d20      	adds	r0, r4, #4
 8006478:	f7ff fbe2 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800647c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800647e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006480:	2d00      	cmp	r5, #0
 8006482:	f040 80dd 	bne.w	8006640 <HAL_RCCEx_PeriphCLKConfig+0x818>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006486:	490d      	ldr	r1, [pc, #52]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006488:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800648a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800648c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006490:	4302      	orrs	r2, r0
 8006492:	650a      	str	r2, [r1, #80]	; 0x50
 8006494:	e5e8      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006496:	2101      	movs	r1, #1
 8006498:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800649c:	f7ff fc4a 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064a0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	f040 80d9 	bne.w	800665c <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064aa:	4904      	ldr	r1, [pc, #16]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80064ac:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80064b0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80064b2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80064b6:	4302      	orrs	r2, r0
 80064b8:	654a      	str	r2, [r1, #84]	; 0x54
 80064ba:	e73c      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80064bc:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064c0:	2102      	movs	r1, #2
 80064c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80064c6:	f7ff fc35 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064ca:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	f040 80c2 	bne.w	8006658 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064d4:	49ac      	ldr	r1, [pc, #688]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80064d6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80064da:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80064dc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80064e0:	4302      	orrs	r2, r0
 80064e2:	658a      	str	r2, [r1, #88]	; 0x58
 80064e4:	e715      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064e6:	2101      	movs	r1, #1
 80064e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80064ec:	f7ff fc22 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064f0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80064f4:	2d00      	cmp	r5, #0
 80064f6:	f040 80ad 	bne.w	8006654 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064fa:	49a3      	ldr	r1, [pc, #652]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80064fc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80064fe:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006500:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006504:	4302      	orrs	r2, r0
 8006506:	654a      	str	r2, [r1, #84]	; 0x54
 8006508:	e643      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800650a:	4fa0      	ldr	r7, [pc, #640]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006512:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8006514:	f7fc f96a 	bl	80027ec <HAL_GetTick>
 8006518:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800651a:	e006      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x702>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651c:	f7fc f966 	bl	80027ec <HAL_GetTick>
 8006520:	eba0 0008 	sub.w	r0, r0, r8
 8006524:	2864      	cmp	r0, #100	; 0x64
 8006526:	f200 818b 	bhi.w	8006840 <HAL_RCCEx_PeriphCLKConfig+0xa18>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	05da      	lsls	r2, r3, #23
 800652e:	d5f5      	bpl.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if(ret == HAL_OK)
 8006530:	2d00      	cmp	r5, #0
 8006532:	f040 81b1 	bne.w	8006898 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006536:	4a94      	ldr	r2, [pc, #592]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006538:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800653c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800653e:	4059      	eors	r1, r3
 8006540:	f411 7f40 	tst.w	r1, #768	; 0x300
 8006544:	d00b      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x736>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006546:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8006548:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800654a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800654e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8006552:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006554:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8006556:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800655a:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800655c:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800655e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006562:	f000 817b 	beq.w	800685c <HAL_RCCEx_PeriphCLKConfig+0xa34>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006566:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800656a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800656e:	f000 8189 	beq.w	8006884 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 8006572:	4985      	ldr	r1, [pc, #532]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006574:	690a      	ldr	r2, [r1, #16]
 8006576:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800657a:	610a      	str	r2, [r1, #16]
 800657c:	4a82      	ldr	r2, [pc, #520]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800657e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006582:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006584:	430b      	orrs	r3, r1
 8006586:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	e5d0      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800658c:	2102      	movs	r1, #2
 800658e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006592:	f7ff fbcf 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006596:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006598:	2800      	cmp	r0, #0
 800659a:	f43f aedb 	beq.w	8006354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 800659e:	2601      	movs	r6, #1
 80065a0:	e6d8      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80065a2:	462e      	mov	r6, r5
 80065a4:	e496      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80065a6:	462e      	mov	r6, r5
 80065a8:	e513      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80065aa:	462e      	mov	r6, r5
 80065ac:	e4b4      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 80065ae:	462e      	mov	r6, r5
 80065b0:	e472      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80065b2:	462e      	mov	r6, r5
 80065b4:	e4d2      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065b6:	2102      	movs	r1, #2
 80065b8:	1d20      	adds	r0, r4, #4
 80065ba:	f7ff fb41 	bl	8005c40 <RCCEx_PLL2_Config>
 80065be:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065c0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80065c2:	2d00      	cmp	r5, #0
 80065c4:	d153      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065c6:	4970      	ldr	r1, [pc, #448]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80065c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80065ca:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80065cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065d0:	4302      	orrs	r2, r0
 80065d2:	64ca      	str	r2, [r1, #76]	; 0x4c
 80065d4:	e6bb      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d6:	496c      	ldr	r1, [pc, #432]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80065d8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80065da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80065de:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80065e0:	e46e      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e2:	4969      	ldr	r1, [pc, #420]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80065e4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80065e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80065ea:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80065ec:	e489      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ee:	4966      	ldr	r1, [pc, #408]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80065f0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80065f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80065f6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80065f8:	e4a5      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065fa:	4963      	ldr	r1, [pc, #396]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80065fc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80065fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006602:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8006604:	e4db      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006606:	462e      	mov	r6, r5
 8006608:	e616      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800660a:	495f      	ldr	r1, [pc, #380]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800660c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800660e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006610:	f022 0203 	bic.w	r2, r2, #3
 8006614:	4302      	orrs	r2, r0
 8006616:	64ca      	str	r2, [r1, #76]	; 0x4c
 8006618:	e586      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800661a:	462e      	mov	r6, r5
 800661c:	e64c      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800661e:	495a      	ldr	r1, [pc, #360]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006620:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006622:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006624:	f022 0207 	bic.w	r2, r2, #7
 8006628:	4302      	orrs	r2, r0
 800662a:	654a      	str	r2, [r1, #84]	; 0x54
 800662c:	e5ca      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800662e:	4956      	ldr	r1, [pc, #344]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006630:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006634:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006636:	f022 0207 	bic.w	r2, r2, #7
 800663a:	4302      	orrs	r2, r0
 800663c:	658a      	str	r2, [r1, #88]	; 0x58
 800663e:	e5db      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006640:	462e      	mov	r6, r5
 8006642:	e511      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006644:	462e      	mov	r6, r5
 8006646:	e4a4      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8006648:	462e      	mov	r6, r5
 800664a:	e4df      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800664c:	462e      	mov	r6, r5
 800664e:	e4fb      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8006650:	462e      	mov	r6, r5
 8006652:	e611      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8006654:	462e      	mov	r6, r5
 8006656:	e59c      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006658:	462e      	mov	r6, r5
 800665a:	e65a      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800665c:	462e      	mov	r6, r5
 800665e:	e66a      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006660:	4949      	ldr	r1, [pc, #292]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006662:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006664:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006668:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800666a:	2d00      	cmp	r5, #0
 800666c:	d0ab      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800666e:	462e      	mov	r6, r5
 8006670:	e66d      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006672:	4845      	ldr	r0, [pc, #276]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006674:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006676:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800667a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800667c:	2d00      	cmp	r5, #0
 800667e:	f47f aedd 	bne.w	800643c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006682:	e6e1      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006684:	4940      	ldr	r1, [pc, #256]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006686:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006688:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800668c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800668e:	2d00      	cmp	r5, #0
 8006690:	d1e4      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x834>
 8006692:	e70a      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006694:	1d20      	adds	r0, r4, #4
 8006696:	f7ff fad3 	bl	8005c40 <RCCEx_PLL2_Config>
 800669a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800669c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800669e:	2d00      	cmp	r5, #0
 80066a0:	d1da      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x830>
 80066a2:	e717      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066a4:	2102      	movs	r1, #2
 80066a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066aa:	f7ff fb43 	bl	8005d34 <RCCEx_PLL3_Config>
 80066ae:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066b0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80066b2:	2d00      	cmp	r5, #0
 80066b4:	d1cc      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x828>
 80066b6:	e5d7      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066b8:	2102      	movs	r1, #2
 80066ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066be:	f7ff fb39 	bl	8005d34 <RCCEx_PLL3_Config>
 80066c2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066c4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	d1a7      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80066ca:	e5ed      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066cc:	2101      	movs	r1, #1
 80066ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066d2:	f7ff fb2f 	bl	8005d34 <RCCEx_PLL3_Config>
 80066d6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066d8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80066da:	2d00      	cmp	r5, #0
 80066dc:	d1b4      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x820>
 80066de:	e48e      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066e0:	2101      	movs	r1, #1
 80066e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066e6:	f7ff fb25 	bl	8005d34 <RCCEx_PLL3_Config>
 80066ea:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066ec:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	d1ac      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x824>
 80066f2:	e4a1      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f4:	4924      	ldr	r1, [pc, #144]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80066f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80066fc:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80066fe:	2d00      	cmp	r5, #0
 8006700:	d19e      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x818>
 8006702:	e6c0      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006704:	2102      	movs	r1, #2
 8006706:	1d20      	adds	r0, r4, #4
 8006708:	f7ff fa9a 	bl	8005c40 <RCCEx_PLL2_Config>
 800670c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800670e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006710:	2d00      	cmp	r5, #0
 8006712:	d197      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8006714:	e436      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006716:	2102      	movs	r1, #2
 8006718:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800671c:	f7ff fb0a 	bl	8005d34 <RCCEx_PLL3_Config>
 8006720:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006722:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006724:	2d00      	cmp	r5, #0
 8006726:	f47f af6e 	bne.w	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800672a:	e57d      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800672c:	4916      	ldr	r1, [pc, #88]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800672e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006730:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006734:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8006736:	2d00      	cmp	r5, #0
 8006738:	f47f acf5 	bne.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800673c:	e765      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800673e:	2102      	movs	r1, #2
 8006740:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006744:	f7ff faf6 	bl	8005d34 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006748:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800674c:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800674e:	2800      	cmp	r0, #0
 8006750:	f43f adba 	beq.w	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 8006754:	2601      	movs	r6, #1
 8006756:	e5b7      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006758:	2102      	movs	r1, #2
 800675a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800675e:	f7ff fae9 	bl	8005d34 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006762:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006766:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006768:	2800      	cmp	r0, #0
 800676a:	f43f adbb 	beq.w	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 800676e:	2601      	movs	r6, #1
 8006770:	e5b8      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006772:	2102      	movs	r1, #2
 8006774:	3024      	adds	r0, #36	; 0x24
 8006776:	f7ff fadd 	bl	8005d34 <RCCEx_PLL3_Config>
 800677a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800677c:	2e00      	cmp	r6, #0
 800677e:	f43f ab6f 	beq.w	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f7ff bb7a 	b.w	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006788:	58024400 	.word	0x58024400
 800678c:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006790:	2100      	movs	r1, #0
 8006792:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006796:	f7ff facd 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800679a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800679c:	4605      	mov	r5, r0
      break;
 800679e:	f7ff bbb0 	b.w	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067a2:	2100      	movs	r1, #0
 80067a4:	1d20      	adds	r0, r4, #4
 80067a6:	f7ff fa4b 	bl	8005c40 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80067aa:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067ac:	4605      	mov	r5, r0
      break;
 80067ae:	e656      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067b0:	2100      	movs	r1, #0
 80067b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067b6:	f7ff fabd 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80067ba:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067bc:	4605      	mov	r5, r0
      break;
 80067be:	e64e      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067c0:	2100      	movs	r1, #0
 80067c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067c6:	f7ff fab5 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80067ca:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067cc:	4605      	mov	r5, r0
      break;
 80067ce:	f7ff bbf6 	b.w	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067d2:	2100      	movs	r1, #0
 80067d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067d8:	f7ff faac 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80067dc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067de:	4605      	mov	r5, r0
      break;
 80067e0:	f7ff bb6e 	b.w	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e4:	4932      	ldr	r1, [pc, #200]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
      break;
 80067e6:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80067ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80067ee:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80067f0:	e635      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067f2:	2100      	movs	r1, #0
 80067f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067f8:	f7ff fa9c 	bl	8005d34 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067fc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067fe:	4605      	mov	r5, r0
      break;
 8006800:	f7ff bba1 	b.w	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006804:	2101      	movs	r1, #1
 8006806:	1d20      	adds	r0, r4, #4
 8006808:	f7ff fa1a 	bl	8005c40 <RCCEx_PLL2_Config>
 800680c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800680e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006810:	2d00      	cmp	r5, #0
 8006812:	f47f acd6 	bne.w	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006816:	e702      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006818:	2101      	movs	r1, #1
 800681a:	1d20      	adds	r0, r4, #4
 800681c:	f7ff fa10 	bl	8005c40 <RCCEx_PLL2_Config>
 8006820:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006822:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006824:	2d00      	cmp	r5, #0
 8006826:	f47f ace6 	bne.w	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800682a:	e700      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800682c:	2101      	movs	r1, #1
 800682e:	1d20      	adds	r0, r4, #4
 8006830:	f7ff fa06 	bl	8005c40 <RCCEx_PLL2_Config>
 8006834:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006836:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006838:	2d00      	cmp	r5, #0
 800683a:	f47f af0b 	bne.w	8006654 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800683e:	e65c      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x6d2>
            ret = HAL_TIMEOUT;
 8006840:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006842:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8006844:	4635      	mov	r5, r6
 8006846:	e472      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006848:	2601      	movs	r6, #1
 800684a:	f7ff bb17 	b.w	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800684e:	4818      	ldr	r0, [pc, #96]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006850:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006852:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006856:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8006858:	f7ff bb09 	b.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800685c:	f7fb ffc6 	bl	80027ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006860:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        tickstart = HAL_GetTick();
 8006864:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800686a:	e004      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686c:	f7fb ffbe 	bl	80027ec <HAL_GetTick>
 8006870:	1bc0      	subs	r0, r0, r7
 8006872:	4548      	cmp	r0, r9
 8006874:	d8e4      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xa18>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006876:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800687a:	079b      	lsls	r3, r3, #30
 800687c:	d5f6      	bpl.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xa44>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800687e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006882:	e670      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006884:	480a      	ldr	r0, [pc, #40]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006886:	4a0b      	ldr	r2, [pc, #44]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8006888:	6901      	ldr	r1, [r0, #16]
 800688a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800688e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8006892:	430a      	orrs	r2, r1
 8006894:	6102      	str	r2, [r0, #16]
 8006896:	e671      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x754>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	462e      	mov	r6, r5
 800689c:	e447      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800689e:	2601      	movs	r6, #1
 80068a0:	4635      	mov	r5, r6
 80068a2:	e48f      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 80068a4:	2601      	movs	r6, #1
 80068a6:	4635      	mov	r5, r6
 80068a8:	e43e      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80068aa:	2601      	movs	r6, #1
 80068ac:	4635      	mov	r5, r6
 80068ae:	e4a3      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80068b0:	58024400 	.word	0x58024400
 80068b4:	00ffffcf 	.word	0x00ffffcf

080068b8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80068b8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068ba:	f7ff f8f1 	bl	8005aa0 <HAL_RCC_GetHCLKFreq>
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80068c0:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80068c8:	5cd3      	ldrb	r3, [r2, r3]
 80068ca:	f003 031f 	and.w	r3, r3, #31
}
 80068ce:	40d8      	lsrs	r0, r3
 80068d0:	bd08      	pop	{r3, pc}
 80068d2:	bf00      	nop
 80068d4:	58024400 	.word	0x58024400
 80068d8:	080090f8 	.word	0x080090f8

080068dc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068dc:	4b4f      	ldr	r3, [pc, #316]	; (8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 80068de:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80068e2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068e4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 80068e6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80068ea:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80068ee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 80068f0:	d05c      	beq.n	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80068f2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068f6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068fa:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80068fe:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006902:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006904:	ee07 4a90 	vmov	s15, r4
 8006908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800690c:	d003      	beq.n	8006916 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800690e:	2902      	cmp	r1, #2
 8006910:	d075      	beq.n	80069fe <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8006912:	2900      	cmp	r1, #0
 8006914:	d04f      	beq.n	80069b6 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006916:	ee07 2a90 	vmov	s15, r2
 800691a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800691e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006928:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006a24 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800692c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006930:	ee06 3a90 	vmov	s13, r3
 8006934:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006938:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800693c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006940:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006944:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006948:	4a34      	ldr	r2, [pc, #208]	; (8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800694a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800694e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006950:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006954:	ee07 3a10 	vmov	s14, r3
 8006958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800695c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800695e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800696a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800696e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006970:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006974:	ee07 3a10 	vmov	s14, r3
 8006978:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800697c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006988:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800698c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800698e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800699a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800699e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80069a6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80069aa:	4770      	bx	lr
 80069ac:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069ae:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069b2:	6082      	str	r2, [r0, #8]
}
 80069b4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069b6:	6819      	ldr	r1, [r3, #0]
 80069b8:	0689      	lsls	r1, r1, #26
 80069ba:	d527      	bpl.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069bc:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069be:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069c2:	4919      	ldr	r1, [pc, #100]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069ca:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069d2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006a24 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80069d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069da:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069dc:	ee06 3a90 	vmov	s13, r3
 80069e0:	ee05 1a90 	vmov	s11, r1
 80069e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80069e8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80069ec:	ee76 6a86 	vadd.f32	s13, s13, s12
 80069f0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80069f4:	eee7 6a05 	vfma.f32	s13, s14, s10
 80069f8:	ee66 6a26 	vmul.f32	s13, s12, s13
 80069fc:	e7a4      	b.n	8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069fe:	ee07 2a90 	vmov	s15, r2
 8006a02:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006a2c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8006a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a0a:	e78a      	b.n	8006922 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a0c:	ee07 2a90 	vmov	s15, r2
 8006a10:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8006a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a18:	e783      	b.n	8006922 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8006a1a:	bf00      	nop
 8006a1c:	58024400 	.word	0x58024400
 8006a20:	4a742400 	.word	0x4a742400
 8006a24:	39000000 	.word	0x39000000
 8006a28:	03d09000 	.word	0x03d09000
 8006a2c:	4bbebc20 	.word	0x4bbebc20
 8006a30:	4c742400 	.word	0x4c742400

08006a34 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a34:	4b4f      	ldr	r3, [pc, #316]	; (8006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8006a36:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a38:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a3a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a3c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8006a3e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a42:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a46:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8006a48:	d05c      	beq.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a4a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a4e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a52:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a56:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006a5a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a5c:	ee07 4a90 	vmov	s15, r4
 8006a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8006a64:	d003      	beq.n	8006a6e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8006a66:	2902      	cmp	r1, #2
 8006a68:	d075      	beq.n	8006b56 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8006a6a:	2900      	cmp	r1, #0
 8006a6c:	d04f      	beq.n	8006b0e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a6e:	ee07 2a90 	vmov	s15, r2
 8006a72:	eddf 6a41 	vldr	s13, [pc, #260]	; 8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8006a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006a80:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8006a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a88:	ee06 3a90 	vmov	s13, r3
 8006a8c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006a90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006a94:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006a98:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006a9c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006aa0:	4a34      	ldr	r2, [pc, #208]	; (8006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8006aa2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006aa6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006aa8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006aac:	ee07 3a10 	vmov	s14, r3
 8006ab0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8006ab4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006ab6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ac2:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ac6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006ac8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006acc:	ee07 3a10 	vmov	s14, r3
 8006ad0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ad4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006ae4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006ae6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006af2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006afe:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8006b02:	4770      	bx	lr
 8006b04:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b06:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b0a:	6082      	str	r2, [r0, #8]
}
 8006b0c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b0e:	6819      	ldr	r1, [r3, #0]
 8006b10:	0689      	lsls	r1, r1, #26
 8006b12:	d527      	bpl.n	8006b64 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b14:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b16:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b1a:	4919      	ldr	r1, [pc, #100]	; (8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b22:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b2a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8006b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b32:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b34:	ee06 3a90 	vmov	s13, r3
 8006b38:	ee05 1a90 	vmov	s11, r1
 8006b3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006b40:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006b44:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006b48:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8006b4c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006b50:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006b54:	e7a4      	b.n	8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b56:	ee07 2a90 	vmov	s15, r2
 8006b5a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8006b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b62:	e78a      	b.n	8006a7a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b64:	ee07 2a90 	vmov	s15, r2
 8006b68:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8006b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b70:	e783      	b.n	8006a7a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8006b72:	bf00      	nop
 8006b74:	58024400 	.word	0x58024400
 8006b78:	4a742400 	.word	0x4a742400
 8006b7c:	39000000 	.word	0x39000000
 8006b80:	03d09000 	.word	0x03d09000
 8006b84:	4bbebc20 	.word	0x4bbebc20
 8006b88:	4c742400 	.word	0x4c742400

08006b8c <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006b8c:	b378      	cbz	r0, 8006bee <HAL_SRAM_Init+0x62>
{
 8006b8e:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006b90:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006b94:	4615      	mov	r5, r2
 8006b96:	460e      	mov	r6, r1
 8006b98:	4604      	mov	r4, r0
 8006b9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b9e:	b30b      	cbz	r3, 8006be4 <HAL_SRAM_Init+0x58>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	f851 0b08 	ldr.w	r0, [r1], #8
 8006ba6:	f000 fd6b 	bl	8007680 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006baa:	68a2      	ldr	r2, [r4, #8]
 8006bac:	4631      	mov	r1, r6
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	f000 fdbe 	bl	8007730 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006bb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006bb6:	68a2      	ldr	r2, [r4, #8]
 8006bb8:	4629      	mov	r1, r5
 8006bba:	6860      	ldr	r0, [r4, #4]
 8006bbc:	f000 fde8 	bl	8007790 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006bc0:	6821      	ldr	r1, [r4, #0]
 8006bc2:	68a0      	ldr	r0, [r4, #8]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006bc4:	4a0b      	ldr	r2, [pc, #44]	; (8006bf4 <HAL_SRAM_Init+0x68>)
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006bc6:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006bd2:	2101      	movs	r1, #1
  __FMC_ENABLE();
 8006bd4:	6813      	ldr	r3, [r2, #0]

  return HAL_OK;
 8006bd6:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8006bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bdc:	6013      	str	r3, [r2, #0]
  hsram->State = HAL_SRAM_STATE_READY;
 8006bde:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
}
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8006be4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    HAL_SRAM_MspInit(hsram);
 8006be8:	f7fb fc44 	bl	8002474 <HAL_SRAM_MspInit>
 8006bec:	e7d8      	b.n	8006ba0 <HAL_SRAM_Init+0x14>
    return HAL_ERROR;
 8006bee:	2001      	movs	r0, #1
}
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	52004000 	.word	0x52004000

08006bf8 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf8:	6901      	ldr	r1, [r0, #16]
 8006bfa:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bfc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bfe:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c00:	49c0      	ldr	r1, [pc, #768]	; (8006f04 <UART_SetConfig+0x30c>)
{
 8006c02:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c04:	6945      	ldr	r5, [r0, #20]
{
 8006c06:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c08:	69c0      	ldr	r0, [r0, #28]
{
 8006c0a:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c0c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c0e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c10:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c12:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c14:	4dbc      	ldr	r5, [pc, #752]	; (8006f08 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c16:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c18:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c1a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c1c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006c24:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c28:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c2a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c2c:	f000 80e0 	beq.w	8006df0 <UART_SetConfig+0x1f8>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c30:	6a22      	ldr	r2, [r4, #32]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c32:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006c34:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c36:	4ab5      	ldr	r2, [pc, #724]	; (8006f0c <UART_SetConfig+0x314>)
 8006c38:	402a      	ands	r2, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c3c:	4311      	orrs	r1, r2
 8006c3e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c42:	f022 020f 	bic.w	r2, r2, #15
 8006c46:	432a      	orrs	r2, r5
 8006c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c4a:	4ab1      	ldr	r2, [pc, #708]	; (8006f10 <UART_SetConfig+0x318>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d023      	beq.n	8006c98 <UART_SetConfig+0xa0>
 8006c50:	4ab0      	ldr	r2, [pc, #704]	; (8006f14 <UART_SetConfig+0x31c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d076      	beq.n	8006d44 <UART_SetConfig+0x14c>
 8006c56:	4ab0      	ldr	r2, [pc, #704]	; (8006f18 <UART_SetConfig+0x320>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	f000 818f 	beq.w	8006f7c <UART_SetConfig+0x384>
 8006c5e:	4aaf      	ldr	r2, [pc, #700]	; (8006f1c <UART_SetConfig+0x324>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	f000 81e1 	beq.w	8007028 <UART_SetConfig+0x430>
 8006c66:	4aae      	ldr	r2, [pc, #696]	; (8006f20 <UART_SetConfig+0x328>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	f000 8121 	beq.w	8006eb0 <UART_SetConfig+0x2b8>
 8006c6e:	4aad      	ldr	r2, [pc, #692]	; (8006f24 <UART_SetConfig+0x32c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	f000 81e3 	beq.w	800703c <UART_SetConfig+0x444>
 8006c76:	4aac      	ldr	r2, [pc, #688]	; (8006f28 <UART_SetConfig+0x330>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	f000 8234 	beq.w	80070e6 <UART_SetConfig+0x4ee>
 8006c7e:	4aab      	ldr	r2, [pc, #684]	; (8006f2c <UART_SetConfig+0x334>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	f000 81e7 	beq.w	8007054 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8006c86:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c88:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006c8a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8006c8e:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006c90:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006c92:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8006c94:	b007      	add	sp, #28
 8006c96:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c98:	4ba5      	ldr	r3, [pc, #660]	; (8006f30 <UART_SetConfig+0x338>)
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca0:	2b28      	cmp	r3, #40	; 0x28
 8006ca2:	d8f0      	bhi.n	8006c86 <UART_SetConfig+0x8e>
 8006ca4:	4aa3      	ldr	r2, [pc, #652]	; (8006f34 <UART_SetConfig+0x33c>)
 8006ca6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006cac:	d055      	beq.n	8006d5a <UART_SetConfig+0x162>
    switch (clocksource)
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	f200 814a 	bhi.w	8006f48 <UART_SetConfig+0x350>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d8e6      	bhi.n	8006c86 <UART_SetConfig+0x8e>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0xc8>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006eff 	.word	0x08006eff
 8006cc4:	08006ef9 	.word	0x08006ef9
 8006cc8:	08006c87 	.word	0x08006c87
 8006ccc:	08006c87 	.word	0x08006c87
 8006cd0:	08006ee9 	.word	0x08006ee9
 8006cd4:	08006c87 	.word	0x08006c87
 8006cd8:	08006c87 	.word	0x08006c87
 8006cdc:	08006c87 	.word	0x08006c87
 8006ce0:	08006edb 	.word	0x08006edb
 8006ce4:	08006c87 	.word	0x08006c87
 8006ce8:	08006c87 	.word	0x08006c87
 8006cec:	08006c87 	.word	0x08006c87
 8006cf0:	08006c87 	.word	0x08006c87
 8006cf4:	08006c87 	.word	0x08006c87
 8006cf8:	08006c87 	.word	0x08006c87
 8006cfc:	08006c87 	.word	0x08006c87
 8006d00:	08006ec5 	.word	0x08006ec5
 8006d04:	08006c87 	.word	0x08006c87
 8006d08:	08006c87 	.word	0x08006c87
 8006d0c:	08006c87 	.word	0x08006c87
 8006d10:	08006c87 	.word	0x08006c87
 8006d14:	08006c87 	.word	0x08006c87
 8006d18:	08006c87 	.word	0x08006c87
 8006d1c:	08006c87 	.word	0x08006c87
 8006d20:	08006c87 	.word	0x08006c87
 8006d24:	08006c87 	.word	0x08006c87
 8006d28:	08006c87 	.word	0x08006c87
 8006d2c:	08006c87 	.word	0x08006c87
 8006d30:	08006c87 	.word	0x08006c87
 8006d34:	08006c87 	.word	0x08006c87
 8006d38:	08006c87 	.word	0x08006c87
 8006d3c:	08006c87 	.word	0x08006c87
 8006d40:	08007069 	.word	0x08007069
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d44:	4b7a      	ldr	r3, [pc, #488]	; (8006f30 <UART_SetConfig+0x338>)
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	2b05      	cmp	r3, #5
 8006d4e:	d89a      	bhi.n	8006c86 <UART_SetConfig+0x8e>
 8006d50:	4a79      	ldr	r2, [pc, #484]	; (8006f38 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d52:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006d56:	5cd3      	ldrb	r3, [r2, r3]
 8006d58:	d1a9      	bne.n	8006cae <UART_SetConfig+0xb6>
    switch (clocksource)
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	f200 8145 	bhi.w	8006fea <UART_SetConfig+0x3f2>
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d890      	bhi.n	8006c86 <UART_SetConfig+0x8e>
 8006d64:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <UART_SetConfig+0x174>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	080070d3 	.word	0x080070d3
 8006d70:	080070cd 	.word	0x080070cd
 8006d74:	08006c87 	.word	0x08006c87
 8006d78:	08006c87 	.word	0x08006c87
 8006d7c:	080070d9 	.word	0x080070d9
 8006d80:	08006c87 	.word	0x08006c87
 8006d84:	08006c87 	.word	0x08006c87
 8006d88:	08006c87 	.word	0x08006c87
 8006d8c:	080070bb 	.word	0x080070bb
 8006d90:	08006c87 	.word	0x08006c87
 8006d94:	08006c87 	.word	0x08006c87
 8006d98:	08006c87 	.word	0x08006c87
 8006d9c:	08006c87 	.word	0x08006c87
 8006da0:	08006c87 	.word	0x08006c87
 8006da4:	08006c87 	.word	0x08006c87
 8006da8:	08006c87 	.word	0x08006c87
 8006dac:	080070a7 	.word	0x080070a7
 8006db0:	08006c87 	.word	0x08006c87
 8006db4:	08006c87 	.word	0x08006c87
 8006db8:	08006c87 	.word	0x08006c87
 8006dbc:	08006c87 	.word	0x08006c87
 8006dc0:	08006c87 	.word	0x08006c87
 8006dc4:	08006c87 	.word	0x08006c87
 8006dc8:	08006c87 	.word	0x08006c87
 8006dcc:	08006c87 	.word	0x08006c87
 8006dd0:	08006c87 	.word	0x08006c87
 8006dd4:	08006c87 	.word	0x08006c87
 8006dd8:	08006c87 	.word	0x08006c87
 8006ddc:	08006c87 	.word	0x08006c87
 8006de0:	08006c87 	.word	0x08006c87
 8006de4:	08006c87 	.word	0x08006c87
 8006de8:	08006c87 	.word	0x08006c87
 8006dec:	080070e3 	.word	0x080070e3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df0:	6898      	ldr	r0, [r3, #8]
 8006df2:	4a46      	ldr	r2, [pc, #280]	; (8006f0c <UART_SetConfig+0x314>)
 8006df4:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006df6:	484e      	ldr	r0, [pc, #312]	; (8006f30 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e00:	f022 020f 	bic.w	r2, r2, #15
 8006e04:	430a      	orrs	r2, r1
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e08:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	f63f af39 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 8006e14:	4a49      	ldr	r2, [pc, #292]	; (8006f3c <UART_SetConfig+0x344>)
 8006e16:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	f200 80b9 	bhi.w	8006f90 <UART_SetConfig+0x398>
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	f67f af31 	bls.w	8006c86 <UART_SetConfig+0x8e>
 8006e24:	3b02      	subs	r3, #2
 8006e26:	2b1e      	cmp	r3, #30
 8006e28:	f63f af2d 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x23c>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	0800709d 	.word	0x0800709d
 8006e38:	08006c87 	.word	0x08006c87
 8006e3c:	08007093 	.word	0x08007093
 8006e40:	08006c87 	.word	0x08006c87
 8006e44:	08006c87 	.word	0x08006c87
 8006e48:	08006c87 	.word	0x08006c87
 8006e4c:	08007081 	.word	0x08007081
 8006e50:	08006c87 	.word	0x08006c87
 8006e54:	08006c87 	.word	0x08006c87
 8006e58:	08006c87 	.word	0x08006c87
 8006e5c:	08006c87 	.word	0x08006c87
 8006e60:	08006c87 	.word	0x08006c87
 8006e64:	08006c87 	.word	0x08006c87
 8006e68:	08006c87 	.word	0x08006c87
 8006e6c:	0800706d 	.word	0x0800706d
 8006e70:	08006c87 	.word	0x08006c87
 8006e74:	08006c87 	.word	0x08006c87
 8006e78:	08006c87 	.word	0x08006c87
 8006e7c:	08006c87 	.word	0x08006c87
 8006e80:	08006c87 	.word	0x08006c87
 8006e84:	08006c87 	.word	0x08006c87
 8006e88:	08006c87 	.word	0x08006c87
 8006e8c:	08006c87 	.word	0x08006c87
 8006e90:	08006c87 	.word	0x08006c87
 8006e94:	08006c87 	.word	0x08006c87
 8006e98:	08006c87 	.word	0x08006c87
 8006e9c:	08006c87 	.word	0x08006c87
 8006ea0:	08006c87 	.word	0x08006c87
 8006ea4:	08006c87 	.word	0x08006c87
 8006ea8:	08006c87 	.word	0x08006c87
 8006eac:	080070a3 	.word	0x080070a3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eb0:	4b1f      	ldr	r3, [pc, #124]	; (8006f30 <UART_SetConfig+0x338>)
 8006eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	f63f aee4 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 8006ebe:	4a20      	ldr	r2, [pc, #128]	; (8006f40 <UART_SetConfig+0x348>)
 8006ec0:	5cd3      	ldrb	r3, [r2, r3]
 8006ec2:	e6f1      	b.n	8006ca8 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec4:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <UART_SetConfig+0x338>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	0692      	lsls	r2, r2, #26
 8006eca:	f140 80c1 	bpl.w	8007050 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	481c      	ldr	r0, [pc, #112]	; (8006f44 <UART_SetConfig+0x34c>)
 8006ed2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006ed6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8006ed8:	e03b      	b.n	8006f52 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eda:	a803      	add	r0, sp, #12
 8006edc:	f7ff fdaa 	bl	8006a34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ee0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8006ee2:	b938      	cbnz	r0, 8006ef4 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e6cf      	b.n	8006c88 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee8:	4668      	mov	r0, sp
 8006eea:	f7ff fcf7 	bl	80068dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006eee:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d0f7      	beq.n	8006ee4 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006ef6:	e02c      	b.n	8006f52 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef8:	f7fe fe5a 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
        break;
 8006efc:	e7f1      	b.n	8006ee2 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006efe:	f7fe fe0f 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
        break;
 8006f02:	e7ee      	b.n	8006ee2 <UART_SetConfig+0x2ea>
 8006f04:	cfff69f3 	.word	0xcfff69f3
 8006f08:	58000c00 	.word	0x58000c00
 8006f0c:	11fff4ff 	.word	0x11fff4ff
 8006f10:	40011000 	.word	0x40011000
 8006f14:	40004400 	.word	0x40004400
 8006f18:	40004800 	.word	0x40004800
 8006f1c:	40004c00 	.word	0x40004c00
 8006f20:	40005000 	.word	0x40005000
 8006f24:	40011400 	.word	0x40011400
 8006f28:	40007800 	.word	0x40007800
 8006f2c:	40007c00 	.word	0x40007c00
 8006f30:	58024400 	.word	0x58024400
 8006f34:	08009110 	.word	0x08009110
 8006f38:	0800913c 	.word	0x0800913c
 8006f3c:	08009144 	.word	0x08009144
 8006f40:	0800913c 	.word	0x0800913c
 8006f44:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	f47f ae9c 	bne.w	8006c86 <UART_SetConfig+0x8e>
 8006f4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f52:	4b6c      	ldr	r3, [pc, #432]	; (8007104 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f54:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f58:	6862      	ldr	r2, [r4, #4]
 8006f5a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8006f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f62:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006f66:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f6a:	f1a3 0210 	sub.w	r2, r3, #16
 8006f6e:	428a      	cmp	r2, r1
 8006f70:	f63f ae89 	bhi.w	8006c86 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	2000      	movs	r0, #0
 8006f78:	60d3      	str	r3, [r2, #12]
 8006f7a:	e685      	b.n	8006c88 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f7c:	4b62      	ldr	r3, [pc, #392]	; (8007108 <UART_SetConfig+0x510>)
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	f63f ae7e 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 8006f8a:	4a60      	ldr	r2, [pc, #384]	; (800710c <UART_SetConfig+0x514>)
 8006f8c:	5cd3      	ldrb	r3, [r2, r3]
 8006f8e:	e68b      	b.n	8006ca8 <UART_SetConfig+0xb0>
    switch (clocksource)
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	f47f ae78 	bne.w	8006c86 <UART_SetConfig+0x8e>
 8006f96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f9a:	4b5a      	ldr	r3, [pc, #360]	; (8007104 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f9c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f9e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fa2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fa6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006faa:	4299      	cmp	r1, r3
 8006fac:	f63f ae6b 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 8006fb0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006fb4:	f63f ae67 	bhi.w	8006c86 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f7f9 f9e0 	bl	8000380 <__aeabi_uldivmod>
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	0209      	lsls	r1, r1, #8
 8006fc4:	0203      	lsls	r3, r0, #8
 8006fc6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006fca:	0868      	lsrs	r0, r5, #1
 8006fcc:	1818      	adds	r0, r3, r0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	f141 0100 	adc.w	r1, r1, #0
 8006fd6:	f7f9 f9d3 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fda:	4a4d      	ldr	r2, [pc, #308]	; (8007110 <UART_SetConfig+0x518>)
 8006fdc:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fe0:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	f63f ae4f 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 8006fe8:	e7c4      	b.n	8006f74 <UART_SetConfig+0x37c>
    switch (clocksource)
 8006fea:	2b40      	cmp	r3, #64	; 0x40
 8006fec:	f47f ae4b 	bne.w	8006c86 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ff0:	4b44      	ldr	r3, [pc, #272]	; (8007104 <UART_SetConfig+0x50c>)
 8006ff2:	6862      	ldr	r2, [r4, #4]
 8006ff4:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8006ff8:	0853      	lsrs	r3, r2, #1
 8006ffa:	fbb0 f0f1 	udiv	r0, r0, r1
 8006ffe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007002:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007006:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800700a:	f1a0 0210 	sub.w	r2, r0, #16
 800700e:	429a      	cmp	r2, r3
 8007010:	f63f ae39 	bhi.w	8006c86 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007014:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007018:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800701c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800701e:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8007020:	4303      	orrs	r3, r0
 8007022:	2000      	movs	r0, #0
 8007024:	60d3      	str	r3, [r2, #12]
 8007026:	e62f      	b.n	8006c88 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007028:	4b37      	ldr	r3, [pc, #220]	; (8007108 <UART_SetConfig+0x510>)
 800702a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	2b05      	cmp	r3, #5
 8007032:	f63f ae28 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 8007036:	4a37      	ldr	r2, [pc, #220]	; (8007114 <UART_SetConfig+0x51c>)
 8007038:	5cd3      	ldrb	r3, [r2, r3]
 800703a:	e635      	b.n	8006ca8 <UART_SetConfig+0xb0>
 800703c:	4b32      	ldr	r3, [pc, #200]	; (8007108 <UART_SetConfig+0x510>)
 800703e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007044:	2b28      	cmp	r3, #40	; 0x28
 8007046:	f63f ae1e 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 800704a:	4a33      	ldr	r2, [pc, #204]	; (8007118 <UART_SetConfig+0x520>)
 800704c:	5cd3      	ldrb	r3, [r2, r3]
 800704e:	e62b      	b.n	8006ca8 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 8007050:	4832      	ldr	r0, [pc, #200]	; (800711c <UART_SetConfig+0x524>)
 8007052:	e77e      	b.n	8006f52 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007054:	4b2c      	ldr	r3, [pc, #176]	; (8007108 <UART_SetConfig+0x510>)
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	2b05      	cmp	r3, #5
 800705e:	f63f ae12 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 8007062:	4a2f      	ldr	r2, [pc, #188]	; (8007120 <UART_SetConfig+0x528>)
 8007064:	5cd3      	ldrb	r3, [r2, r3]
 8007066:	e61f      	b.n	8006ca8 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 8007068:	482e      	ldr	r0, [pc, #184]	; (8007124 <UART_SetConfig+0x52c>)
 800706a:	e772      	b.n	8006f52 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800706c:	4b26      	ldr	r3, [pc, #152]	; (8007108 <UART_SetConfig+0x510>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	0690      	lsls	r0, r2, #26
 8007072:	d542      	bpl.n	80070fa <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4829      	ldr	r0, [pc, #164]	; (800711c <UART_SetConfig+0x524>)
 8007078:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800707c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800707e:	e78c      	b.n	8006f9a <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007080:	a803      	add	r0, sp, #12
 8007082:	f7ff fcd7 	bl	8006a34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007086:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8007088:	2800      	cmp	r0, #0
 800708a:	f43f af2b 	beq.w	8006ee4 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800708e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007090:	e783      	b.n	8006f9a <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007092:	4668      	mov	r0, sp
 8007094:	f7ff fc22 	bl	80068dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007098:	9801      	ldr	r0, [sp, #4]
        break;
 800709a:	e7f5      	b.n	8007088 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800709c:	f7ff fc0c 	bl	80068b8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80070a0:	e7f2      	b.n	8007088 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 80070a2:	4820      	ldr	r0, [pc, #128]	; (8007124 <UART_SetConfig+0x52c>)
 80070a4:	e779      	b.n	8006f9a <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <UART_SetConfig+0x510>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	0691      	lsls	r1, r2, #26
 80070ac:	d527      	bpl.n	80070fe <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	481a      	ldr	r0, [pc, #104]	; (800711c <UART_SetConfig+0x524>)
 80070b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80070b6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80070b8:	e79a      	b.n	8006ff0 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ba:	a803      	add	r0, sp, #12
 80070bc:	f7ff fcba 	bl	8006a34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070c0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f43f af0e 	beq.w	8006ee4 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070ca:	e791      	b.n	8006ff0 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80070cc:	f7fe fd70 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
        break;
 80070d0:	e7f7      	b.n	80070c2 <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d2:	f7fe fd25 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
        break;
 80070d6:	e7f4      	b.n	80070c2 <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070d8:	4668      	mov	r0, sp
 80070da:	f7ff fbff 	bl	80068dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070de:	9801      	ldr	r0, [sp, #4]
        break;
 80070e0:	e7ef      	b.n	80070c2 <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 80070e2:	4810      	ldr	r0, [pc, #64]	; (8007124 <UART_SetConfig+0x52c>)
 80070e4:	e784      	b.n	8006ff0 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070e6:	4b08      	ldr	r3, [pc, #32]	; (8007108 <UART_SetConfig+0x510>)
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	f63f adc9 	bhi.w	8006c86 <UART_SetConfig+0x8e>
 80070f4:	4a0c      	ldr	r2, [pc, #48]	; (8007128 <UART_SetConfig+0x530>)
 80070f6:	5cd3      	ldrb	r3, [r2, r3]
 80070f8:	e5d6      	b.n	8006ca8 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 80070fa:	4808      	ldr	r0, [pc, #32]	; (800711c <UART_SetConfig+0x524>)
 80070fc:	e74d      	b.n	8006f9a <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 80070fe:	4807      	ldr	r0, [pc, #28]	; (800711c <UART_SetConfig+0x524>)
 8007100:	e776      	b.n	8006ff0 <UART_SetConfig+0x3f8>
 8007102:	bf00      	nop
 8007104:	0800914c 	.word	0x0800914c
 8007108:	58024400 	.word	0x58024400
 800710c:	0800913c 	.word	0x0800913c
 8007110:	000ffcff 	.word	0x000ffcff
 8007114:	0800913c 	.word	0x0800913c
 8007118:	08009110 	.word	0x08009110
 800711c:	03d09000 	.word	0x03d09000
 8007120:	0800913c 	.word	0x0800913c
 8007124:	003d0900 	.word	0x003d0900
 8007128:	0800913c 	.word	0x0800913c

0800712c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800712c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800712e:	07da      	lsls	r2, r3, #31
{
 8007130:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007132:	d506      	bpl.n	8007142 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007134:	6801      	ldr	r1, [r0, #0]
 8007136:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007138:	684a      	ldr	r2, [r1, #4]
 800713a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800713e:	4322      	orrs	r2, r4
 8007140:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007142:	079c      	lsls	r4, r3, #30
 8007144:	d506      	bpl.n	8007154 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007146:	6801      	ldr	r1, [r0, #0]
 8007148:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800714a:	684a      	ldr	r2, [r1, #4]
 800714c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007150:	4322      	orrs	r2, r4
 8007152:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007154:	0759      	lsls	r1, r3, #29
 8007156:	d506      	bpl.n	8007166 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007158:	6801      	ldr	r1, [r0, #0]
 800715a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800715c:	684a      	ldr	r2, [r1, #4]
 800715e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007162:	4322      	orrs	r2, r4
 8007164:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007166:	071a      	lsls	r2, r3, #28
 8007168:	d506      	bpl.n	8007178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800716a:	6801      	ldr	r1, [r0, #0]
 800716c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800716e:	684a      	ldr	r2, [r1, #4]
 8007170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007174:	4322      	orrs	r2, r4
 8007176:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007178:	06dc      	lsls	r4, r3, #27
 800717a:	d506      	bpl.n	800718a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800717c:	6801      	ldr	r1, [r0, #0]
 800717e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007180:	688a      	ldr	r2, [r1, #8]
 8007182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007186:	4322      	orrs	r2, r4
 8007188:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718a:	0699      	lsls	r1, r3, #26
 800718c:	d506      	bpl.n	800719c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800718e:	6801      	ldr	r1, [r0, #0]
 8007190:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007192:	688a      	ldr	r2, [r1, #8]
 8007194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007198:	4322      	orrs	r2, r4
 800719a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800719c:	065a      	lsls	r2, r3, #25
 800719e:	d50a      	bpl.n	80071b6 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071a0:	6801      	ldr	r1, [r0, #0]
 80071a2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80071a4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071a6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80071ae:	ea42 0204 	orr.w	r2, r2, r4
 80071b2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071b4:	d00b      	beq.n	80071ce <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071b6:	061b      	lsls	r3, r3, #24
 80071b8:	d506      	bpl.n	80071c8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ba:	6802      	ldr	r2, [r0, #0]
 80071bc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80071be:	6853      	ldr	r3, [r2, #4]
 80071c0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80071c4:	430b      	orrs	r3, r1
 80071c6:	6053      	str	r3, [r2, #4]
  }
}
 80071c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071cc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071ce:	684a      	ldr	r2, [r1, #4]
 80071d0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80071d2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80071d6:	4322      	orrs	r2, r4
 80071d8:	604a      	str	r2, [r1, #4]
 80071da:	e7ec      	b.n	80071b6 <UART_AdvFeatureConfig+0x8a>

080071dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071e4:	4607      	mov	r7, r0
 80071e6:	460e      	mov	r6, r1
 80071e8:	4615      	mov	r5, r2
 80071ea:	4699      	mov	r9, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ec:	6804      	ldr	r4, [r0, #0]
 80071ee:	f1b8 3fff 	cmp.w	r8, #4294967295
 80071f2:	d10a      	bne.n	800720a <UART_WaitOnFlagUntilTimeout+0x2e>
 80071f4:	69e3      	ldr	r3, [r4, #28]
 80071f6:	ea36 0303 	bics.w	r3, r6, r3
 80071fa:	bf0c      	ite	eq
 80071fc:	2301      	moveq	r3, #1
 80071fe:	2300      	movne	r3, #0
 8007200:	429d      	cmp	r5, r3
 8007202:	d0f7      	beq.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8007204:	2000      	movs	r0, #0
}
 8007206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720a:	69e3      	ldr	r3, [r4, #28]
 800720c:	ea36 0303 	bics.w	r3, r6, r3
 8007210:	bf0c      	ite	eq
 8007212:	2301      	moveq	r3, #1
 8007214:	2300      	movne	r3, #0
 8007216:	42ab      	cmp	r3, r5
 8007218:	d1f4      	bne.n	8007204 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721a:	f7fb fae7 	bl	80027ec <HAL_GetTick>
 800721e:	eba0 0009 	sub.w	r0, r0, r9
 8007222:	4540      	cmp	r0, r8
 8007224:	d833      	bhi.n	800728e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007226:	f1b8 0f00 	cmp.w	r8, #0
 800722a:	d030      	beq.n	800728e <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800722c:	683c      	ldr	r4, [r7, #0]
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	4622      	mov	r2, r4
 8007232:	0759      	lsls	r1, r3, #29
 8007234:	d5db      	bpl.n	80071ee <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007236:	69e3      	ldr	r3, [r4, #28]
 8007238:	051b      	lsls	r3, r3, #20
 800723a:	d5d8      	bpl.n	80071ee <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800723c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007240:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	e844 3100 	strex	r1, r3, [r4]
 800724e:	b139      	cbz	r1, 8007260 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	e852 3f00 	ldrex	r3, [r2]
 8007254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	e842 3100 	strex	r1, r3, [r2]
 800725c:	2900      	cmp	r1, #0
 800725e:	d1f7      	bne.n	8007250 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	f102 0308 	add.w	r3, r2, #8
 8007264:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007268:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	f102 0008 	add.w	r0, r2, #8
 8007270:	e840 3100 	strex	r1, r3, [r0]
 8007274:	2900      	cmp	r1, #0
 8007276:	d1f3      	bne.n	8007260 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8007278:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800727a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800727c:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8007280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007288:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800728c:	e7bb      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0x2a>
 800728e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	e842 3100 	strex	r1, r3, [r2]
 800729c:	2900      	cmp	r1, #0
 800729e:	d1f7      	bne.n	8007290 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	f102 0308 	add.w	r3, r2, #8
 80072a4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	f102 0008 	add.w	r0, r2, #8
 80072b0:	e840 3100 	strex	r1, r3, [r0]
 80072b4:	2900      	cmp	r1, #0
 80072b6:	d1f3      	bne.n	80072a0 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 80072b8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80072ba:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 80072bc:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80072c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80072c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80072c8:	e79d      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0x2a>
 80072ca:	bf00      	nop

080072cc <HAL_UART_Transmit>:
{
 80072cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072d0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80072d2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80072d6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80072d8:	2b20      	cmp	r3, #32
 80072da:	f040 8095 	bne.w	8007408 <HAL_UART_Transmit+0x13c>
    if ((pData == NULL) || (Size == 0U))
 80072de:	4689      	mov	r9, r1
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d04c      	beq.n	800737e <HAL_UART_Transmit+0xb2>
 80072e4:	fab2 f782 	clz	r7, r2
 80072e8:	4614      	mov	r4, r2
 80072ea:	097f      	lsrs	r7, r7, #5
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	d046      	beq.n	800737e <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80072f0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80072f4:	4605      	mov	r5, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	f000 8086 	beq.w	8007408 <HAL_UART_Transmit+0x13c>
 80072fc:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fe:	f8c0 708c 	str.w	r7, [r0, #140]	; 0x8c
    __HAL_LOCK(huart);
 8007302:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007306:	2321      	movs	r3, #33	; 0x21
 8007308:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 800730c:	f7fb fa6e 	bl	80027ec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007310:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8007312:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8007314:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800731c:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007320:	f000 8096 	beq.w	8007450 <HAL_UART_Transmit+0x184>
    while (huart->TxXferCount > 0U)
 8007324:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8007328:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800732a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800732c:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8007330:	b1b3      	cbz	r3, 8007360 <HAL_UART_Transmit+0x94>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007332:	682c      	ldr	r4, [r5, #0]
 8007334:	1c71      	adds	r1, r6, #1
 8007336:	d126      	bne.n	8007386 <HAL_UART_Transmit+0xba>
 8007338:	69e2      	ldr	r2, [r4, #28]
 800733a:	0612      	lsls	r2, r2, #24
 800733c:	d5fc      	bpl.n	8007338 <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 800733e:	f1b9 0f00 	cmp.w	r9, #0
 8007342:	d05c      	beq.n	80073fe <HAL_UART_Transmit+0x132>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007344:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007348:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 800734a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800734e:	3b01      	subs	r3, #1
 8007350:	b29b      	uxth	r3, r3
 8007352:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007356:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e9      	bne.n	8007334 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007360:	4643      	mov	r3, r8
 8007362:	2200      	movs	r2, #0
 8007364:	2140      	movs	r1, #64	; 0x40
 8007366:	4628      	mov	r0, r5
 8007368:	9600      	str	r6, [sp, #0]
 800736a:	f7ff ff37 	bl	80071dc <UART_WaitOnFlagUntilTimeout>
 800736e:	2800      	cmp	r0, #0
 8007370:	d175      	bne.n	800745e <HAL_UART_Transmit+0x192>
    huart->gState = HAL_UART_STATE_READY;
 8007372:	2320      	movs	r3, #32
 8007374:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8007378:	b003      	add	sp, #12
 800737a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800737e:	2001      	movs	r0, #1
}
 8007380:	b003      	add	sp, #12
 8007382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007386:	69e3      	ldr	r3, [r4, #28]
 8007388:	061b      	lsls	r3, r3, #24
 800738a:	d4d8      	bmi.n	800733e <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738c:	f7fb fa2e 	bl	80027ec <HAL_GetTick>
 8007390:	eba0 0008 	sub.w	r0, r0, r8
 8007394:	4286      	cmp	r6, r0
 8007396:	d33b      	bcc.n	8007410 <HAL_UART_Transmit+0x144>
 8007398:	2e00      	cmp	r6, #0
 800739a:	d039      	beq.n	8007410 <HAL_UART_Transmit+0x144>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800739c:	682c      	ldr	r4, [r5, #0]
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	4623      	mov	r3, r4
 80073a2:	0752      	lsls	r2, r2, #29
 80073a4:	d5c6      	bpl.n	8007334 <HAL_UART_Transmit+0x68>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073a6:	69e2      	ldr	r2, [r4, #28]
 80073a8:	0510      	lsls	r0, r2, #20
 80073aa:	d5c3      	bpl.n	8007334 <HAL_UART_Transmit+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073b0:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	e844 2100 	strex	r1, r2, [r4]
 80073be:	b139      	cbz	r1, 80073d0 <HAL_UART_Transmit+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	e853 2f00 	ldrex	r2, [r3]
 80073c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	e843 2100 	strex	r1, r2, [r3]
 80073cc:	2900      	cmp	r1, #0
 80073ce:	d1f7      	bne.n	80073c0 <HAL_UART_Transmit+0xf4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	f103 0208 	add.w	r2, r3, #8
 80073d4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	f103 0008 	add.w	r0, r3, #8
 80073e0:	e840 2100 	strex	r1, r2, [r0]
 80073e4:	2900      	cmp	r1, #0
 80073e6:	d1f3      	bne.n	80073d0 <HAL_UART_Transmit+0x104>
          huart->gState = HAL_UART_STATE_READY;
 80073e8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80073ea:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80073ec:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80073f0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80073f4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073f8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 80073fc:	e7c0      	b.n	8007380 <HAL_UART_Transmit+0xb4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073fe:	f837 3b02 	ldrh.w	r3, [r7], #2
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	e79f      	b.n	8007348 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8007408:	2002      	movs	r0, #2
}
 800740a:	b003      	add	sp, #12
 800740c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007410:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007416:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	e843 2100 	strex	r1, r2, [r3]
 800741e:	2900      	cmp	r1, #0
 8007420:	d1f7      	bne.n	8007412 <HAL_UART_Transmit+0x146>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	f103 0208 	add.w	r2, r3, #8
 8007426:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	f103 0008 	add.w	r0, r3, #8
 8007432:	e840 2100 	strex	r1, r2, [r0]
 8007436:	2900      	cmp	r1, #0
 8007438:	d1f3      	bne.n	8007422 <HAL_UART_Transmit+0x156>
        huart->gState = HAL_UART_STATE_READY;
 800743a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800743c:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800743e:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8007442:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007446:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800744a:	b003      	add	sp, #12
 800744c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007450:	692b      	ldr	r3, [r5, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f47f af66 	bne.w	8007324 <HAL_UART_Transmit+0x58>
 8007458:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800745a:	4699      	mov	r9, r3
 800745c:	e762      	b.n	8007324 <HAL_UART_Transmit+0x58>
      return HAL_TIMEOUT;
 800745e:	2003      	movs	r0, #3
 8007460:	e78e      	b.n	8007380 <HAL_UART_Transmit+0xb4>
 8007462:	bf00      	nop

08007464 <HAL_UART_Init>:
  if (huart == NULL)
 8007464:	2800      	cmp	r0, #0
 8007466:	d066      	beq.n	8007536 <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007468:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	4604      	mov	r4, r0
 8007470:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 8007472:	2b00      	cmp	r3, #0
 8007474:	d04c      	beq.n	8007510 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8007476:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800747a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007480:	6813      	ldr	r3, [r2, #0]
 8007482:	f023 0301 	bic.w	r3, r3, #1
 8007486:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007488:	f7ff fbb6 	bl	8006bf8 <UART_SetConfig>
 800748c:	2801      	cmp	r0, #1
 800748e:	d03c      	beq.n	800750a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007492:	2b00      	cmp	r3, #0
 8007494:	d135      	bne.n	8007502 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007496:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007498:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800749a:	6859      	ldr	r1, [r3, #4]
 800749c:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80074a0:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074a2:	6899      	ldr	r1, [r3, #8]
 80074a4:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80074a8:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80074aa:	6819      	ldr	r1, [r3, #0]
 80074ac:	f041 0101 	orr.w	r1, r1, #1
 80074b0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80074b6:	f7fb f999 	bl	80027ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ba:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80074bc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	0712      	lsls	r2, r2, #28
 80074c2:	d40e      	bmi.n	80074e2 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	075b      	lsls	r3, r3, #29
 80074c8:	d427      	bmi.n	800751a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80074cc:	2220      	movs	r2, #32
  return HAL_OK;
 80074ce:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80074d0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80074d4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80074d8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074dc:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80074de:	b002      	add	sp, #8
 80074e0:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e2:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 80074e6:	4603      	mov	r3, r0
 80074e8:	462a      	mov	r2, r5
 80074ea:	4620      	mov	r0, r4
 80074ec:	9100      	str	r1, [sp, #0]
 80074ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074f2:	f7ff fe73 	bl	80071dc <UART_WaitOnFlagUntilTimeout>
 80074f6:	b9e0      	cbnz	r0, 8007532 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	075b      	lsls	r3, r3, #29
 80074fe:	d40c      	bmi.n	800751a <HAL_UART_Init+0xb6>
 8007500:	e7e3      	b.n	80074ca <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8007502:	4620      	mov	r0, r4
 8007504:	f7ff fe12 	bl	800712c <UART_AdvFeatureConfig>
 8007508:	e7c5      	b.n	8007496 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800750a:	2001      	movs	r0, #1
}
 800750c:	b002      	add	sp, #8
 800750e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007510:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007514:	f7fa ff58 	bl	80023c8 <HAL_UART_MspInit>
 8007518:	e7ad      	b.n	8007476 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800751a:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800751e:	4633      	mov	r3, r6
 8007520:	2200      	movs	r2, #0
 8007522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007526:	9000      	str	r0, [sp, #0]
 8007528:	4620      	mov	r0, r4
 800752a:	f7ff fe57 	bl	80071dc <UART_WaitOnFlagUntilTimeout>
 800752e:	2800      	cmp	r0, #0
 8007530:	d0cb      	beq.n	80074ca <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8007532:	2003      	movs	r0, #3
 8007534:	e7d3      	b.n	80074de <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8007536:	2001      	movs	r0, #1
}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop

0800753c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800753c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007540:	2a01      	cmp	r2, #1
 8007542:	d017      	beq.n	8007574 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007544:	6802      	ldr	r2, [r0, #0]
 8007546:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007548:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800754a:	2100      	movs	r1, #0
{
 800754c:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800754e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8007552:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007554:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007556:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007558:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800755c:	f024 0401 	bic.w	r4, r4, #1
 8007560:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007562:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007564:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8007566:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007568:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800756c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8007570:	bc30      	pop	{r4, r5}
 8007572:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007574:	2002      	movs	r0, #2
}
 8007576:	4770      	bx	lr

08007578 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007578:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800757c:	2a01      	cmp	r2, #1
 800757e:	d037      	beq.n	80075f0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007580:	6802      	ldr	r2, [r0, #0]
 8007582:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007584:	2024      	movs	r0, #36	; 0x24
{
 8007586:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007588:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800758c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800758e:	6810      	ldr	r0, [r2, #0]
 8007590:	f020 0001 	bic.w	r0, r0, #1
 8007594:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007596:	6890      	ldr	r0, [r2, #8]
 8007598:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800759c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800759e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075a0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075a2:	b310      	cbz	r0, 80075ea <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075a4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075a6:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075a8:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ac:	4911      	ldr	r1, [pc, #68]	; (80075f4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075ae:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 80075b2:	4d11      	ldr	r5, [pc, #68]	; (80075f8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075b4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80075bc:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075c0:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 80075c2:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075c6:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075c8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075cc:	fbb1 f1f5 	udiv	r1, r1, r5
 80075d0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 80075d4:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 80075d6:	2100      	movs	r1, #0
 80075d8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075dc:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 80075de:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80075e0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80075e4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 80075e8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80075ea:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80075ec:	4608      	mov	r0, r1
 80075ee:	e7ef      	b.n	80075d0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80075f0:	2002      	movs	r0, #2
}
 80075f2:	4770      	bx	lr
 80075f4:	0800916c 	.word	0x0800916c
 80075f8:	08009164 	.word	0x08009164

080075fc <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80075fc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007600:	2a01      	cmp	r2, #1
 8007602:	d037      	beq.n	8007674 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007604:	6802      	ldr	r2, [r0, #0]
 8007606:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007608:	2024      	movs	r0, #36	; 0x24
{
 800760a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800760c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007610:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007612:	6810      	ldr	r0, [r2, #0]
 8007614:	f020 0001 	bic.w	r0, r0, #1
 8007618:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800761a:	6890      	ldr	r0, [r2, #8]
 800761c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8007620:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007622:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007624:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007626:	b310      	cbz	r0, 800766e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007628:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800762a:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800762c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007630:	4911      	ldr	r1, [pc, #68]	; (8007678 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007632:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8007636:	4d11      	ldr	r5, [pc, #68]	; (800767c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007638:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800763c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007640:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007644:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8007646:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800764a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800764c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007650:	fbb1 f1f5 	udiv	r1, r1, r5
 8007654:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8007658:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800765a:	2100      	movs	r1, #0
 800765c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007660:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8007662:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007664:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007668:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800766c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800766e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007670:	4608      	mov	r0, r1
 8007672:	e7ef      	b.n	8007654 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007674:	2002      	movs	r0, #2
}
 8007676:	4770      	bx	lr
 8007678:	0800916c 	.word	0x0800916c
 800767c:	08009164 	.word	0x08009164

08007680 <FMC_NORSRAM_Init>:
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007680:	680a      	ldr	r2, [r1, #0]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007682:	688b      	ldr	r3, [r1, #8]
{
 8007684:	b470      	push	{r4, r5, r6}
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007686:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800768a:	2b08      	cmp	r3, #8
              Init->WaitSignal              | \
              Init->ExtendedMode            | \
              Init->AsynchronousWait        | \
              Init->WriteBurst);

  btcr_reg |= Init->ContinuousClock;
 800768c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800768e:	f024 0401 	bic.w	r4, r4, #1
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007692:	bf0c      	ite	eq
 8007694:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8007698:	f04f 0c00 	movne.w	ip, #0
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800769c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80076a0:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80076a4:	684c      	ldr	r4, [r1, #4]
 80076a6:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 80076aa:	ea43 0304 	orr.w	r3, r3, r4
 80076ae:	68cc      	ldr	r4, [r1, #12]
 80076b0:	ea43 0304 	orr.w	r3, r3, r4
 80076b4:	690c      	ldr	r4, [r1, #16]
 80076b6:	ea43 0304 	orr.w	r3, r3, r4
 80076ba:	694c      	ldr	r4, [r1, #20]
 80076bc:	ea43 0304 	orr.w	r3, r3, r4
 80076c0:	698c      	ldr	r4, [r1, #24]
 80076c2:	ea43 0304 	orr.w	r3, r3, r4
 80076c6:	69cc      	ldr	r4, [r1, #28]
 80076c8:	ea43 0304 	orr.w	r3, r3, r4
 80076cc:	6a0c      	ldr	r4, [r1, #32]
 80076ce:	ea43 0304 	orr.w	r3, r3, r4
 80076d2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80076d4:	ea43 0304 	orr.w	r3, r3, r4
 80076d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80076da:	ea43 0304 	orr.w	r3, r3, r4
 80076de:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80076e0:	ea43 0304 	orr.w	r3, r3, r4
 80076e4:	e9d1 410d 	ldrd	r4, r1, [r1, #52]	; 0x34
 80076e8:	ea43 0305 	orr.w	r3, r3, r5
 80076ec:	ea43 0304 	orr.w	r3, r3, r4
 80076f0:	ea43 0301 	orr.w	r3, r3, r1
 80076f4:	490d      	ldr	r1, [pc, #52]	; (800772c <FMC_NORSRAM_Init+0xac>)
 80076f6:	ea01 0106 	and.w	r1, r1, r6
 80076fa:	ea43 0301 	orr.w	r3, r3, r1
 80076fe:	ea43 030c 	orr.w	r3, r3, ip
 8007702:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007706:	d006      	beq.n	8007716 <FMC_NORSRAM_Init+0x96>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007708:	b112      	cbz	r2, 8007710 <FMC_NORSRAM_Init+0x90>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800770a:	6803      	ldr	r3, [r0, #0]
 800770c:	431c      	orrs	r4, r3
 800770e:	6004      	str	r4, [r0, #0]
  }

  return HAL_OK;
}
 8007710:	2000      	movs	r0, #0
 8007712:	bc70      	pop	{r4, r5, r6}
 8007714:	4770      	bx	lr
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007716:	2a00      	cmp	r2, #0
 8007718:	d0fa      	beq.n	8007710 <FMC_NORSRAM_Init+0x90>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800771a:	6803      	ldr	r3, [r0, #0]
 800771c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007720:	6003      	str	r3, [r0, #0]
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007722:	6803      	ldr	r3, [r0, #0]
 8007724:	431c      	orrs	r4, r3
 8007726:	6004      	str	r4, [r0, #0]
 8007728:	e7f2      	b.n	8007710 <FMC_NORSRAM_Init+0x90>
 800772a:	bf00      	nop
 800772c:	ffc00480 	.word	0xffc00480

08007730 <FMC_NORSRAM_Timing_Init>:
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007730:	690b      	ldr	r3, [r1, #16]
 8007732:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007736:	f103 3cff 	add.w	ip, r3, #4294967295
 800773a:	6853      	ldr	r3, [r2, #4]
{
 800773c:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800773e:	698c      	ldr	r4, [r1, #24]
 8007740:	f003 4e40 	and.w	lr, r3, #3221225472	; 0xc0000000
 8007744:	680b      	ldr	r3, [r1, #0]
 8007746:	4323      	orrs	r3, r4
 8007748:	684c      	ldr	r4, [r1, #4]
 800774a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800774e:	688c      	ldr	r4, [r1, #8]
 8007750:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8007754:	68cc      	ldr	r4, [r1, #12]
 8007756:	6949      	ldr	r1, [r1, #20]
 8007758:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800775c:	3902      	subs	r1, #2
 800775e:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8007762:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007766:	ea43 030e 	orr.w	r3, r3, lr
 800776a:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800776c:	6803      	ldr	r3, [r0, #0]
 800776e:	02db      	lsls	r3, r3, #11
 8007770:	d50c      	bpl.n	800778c <FMC_NORSRAM_Timing_Init+0x5c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007772:	6842      	ldr	r2, [r0, #4]
 8007774:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007778:	6843      	ldr	r3, [r0, #4]
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800777a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800777e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007782:	ea4c 0c02 	orr.w	ip, ip, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007786:	ea43 030c 	orr.w	r3, r3, ip
 800778a:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 800778c:	2000      	movs	r0, #0
 800778e:	bd10      	pop	{r4, pc}

08007790 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007794:	d005      	beq.n	80077a2 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007796:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800779a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800779e:	2000      	movs	r0, #0
 80077a0:	4770      	bx	lr
{
 80077a2:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80077a4:	680b      	ldr	r3, [r1, #0]
 80077a6:	698d      	ldr	r5, [r1, #24]
 80077a8:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80077ac:	432b      	orrs	r3, r5
 80077ae:	684d      	ldr	r5, [r1, #4]
 80077b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80077b4:	688d      	ldr	r5, [r1, #8]
 80077b6:	68c9      	ldr	r1, [r1, #12]
 80077b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80077bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80077c0:	4903      	ldr	r1, [pc, #12]	; (80077d0 <FMC_NORSRAM_Extended_Timing_Init+0x40>)
 80077c2:	4021      	ands	r1, r4
 80077c4:	430b      	orrs	r3, r1
}
 80077c6:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80077c8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80077cc:	2000      	movs	r0, #0
 80077ce:	4770      	bx	lr
 80077d0:	cff00000 	.word	0xcff00000

080077d4 <__errno>:
 80077d4:	4b01      	ldr	r3, [pc, #4]	; (80077dc <__errno+0x8>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	24000070 	.word	0x24000070

080077e0 <__libc_init_array>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4d0d      	ldr	r5, [pc, #52]	; (8007818 <__libc_init_array+0x38>)
 80077e4:	4c0d      	ldr	r4, [pc, #52]	; (800781c <__libc_init_array+0x3c>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	2600      	movs	r6, #0
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	d109      	bne.n	8007804 <__libc_init_array+0x24>
 80077f0:	4d0b      	ldr	r5, [pc, #44]	; (8007820 <__libc_init_array+0x40>)
 80077f2:	4c0c      	ldr	r4, [pc, #48]	; (8007824 <__libc_init_array+0x44>)
 80077f4:	f001 f832 	bl	800885c <_init>
 80077f8:	1b64      	subs	r4, r4, r5
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	2600      	movs	r6, #0
 80077fe:	42a6      	cmp	r6, r4
 8007800:	d105      	bne.n	800780e <__libc_init_array+0x2e>
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	f855 3b04 	ldr.w	r3, [r5], #4
 8007808:	4798      	blx	r3
 800780a:	3601      	adds	r6, #1
 800780c:	e7ee      	b.n	80077ec <__libc_init_array+0xc>
 800780e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007812:	4798      	blx	r3
 8007814:	3601      	adds	r6, #1
 8007816:	e7f2      	b.n	80077fe <__libc_init_array+0x1e>
 8007818:	08009214 	.word	0x08009214
 800781c:	08009214 	.word	0x08009214
 8007820:	08009214 	.word	0x08009214
 8007824:	08009218 	.word	0x08009218

08007828 <memcpy>:
 8007828:	440a      	add	r2, r1
 800782a:	4291      	cmp	r1, r2
 800782c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007830:	d100      	bne.n	8007834 <memcpy+0xc>
 8007832:	4770      	bx	lr
 8007834:	b510      	push	{r4, lr}
 8007836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800783a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800783e:	4291      	cmp	r1, r2
 8007840:	d1f9      	bne.n	8007836 <memcpy+0xe>
 8007842:	bd10      	pop	{r4, pc}

08007844 <memset>:
 8007844:	4402      	add	r2, r0
 8007846:	4603      	mov	r3, r0
 8007848:	4293      	cmp	r3, r2
 800784a:	d100      	bne.n	800784e <memset+0xa>
 800784c:	4770      	bx	lr
 800784e:	f803 1b01 	strb.w	r1, [r3], #1
 8007852:	e7f9      	b.n	8007848 <memset+0x4>

08007854 <iprintf>:
 8007854:	b40f      	push	{r0, r1, r2, r3}
 8007856:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <iprintf+0x2c>)
 8007858:	b513      	push	{r0, r1, r4, lr}
 800785a:	681c      	ldr	r4, [r3, #0]
 800785c:	b124      	cbz	r4, 8007868 <iprintf+0x14>
 800785e:	69a3      	ldr	r3, [r4, #24]
 8007860:	b913      	cbnz	r3, 8007868 <iprintf+0x14>
 8007862:	4620      	mov	r0, r4
 8007864:	f000 fa5e 	bl	8007d24 <__sinit>
 8007868:	ab05      	add	r3, sp, #20
 800786a:	9a04      	ldr	r2, [sp, #16]
 800786c:	68a1      	ldr	r1, [r4, #8]
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fc67 	bl	8008144 <_vfiprintf_r>
 8007876:	b002      	add	sp, #8
 8007878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787c:	b004      	add	sp, #16
 800787e:	4770      	bx	lr
 8007880:	24000070 	.word	0x24000070

08007884 <_puts_r>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	460e      	mov	r6, r1
 8007888:	4605      	mov	r5, r0
 800788a:	b118      	cbz	r0, 8007894 <_puts_r+0x10>
 800788c:	6983      	ldr	r3, [r0, #24]
 800788e:	b90b      	cbnz	r3, 8007894 <_puts_r+0x10>
 8007890:	f000 fa48 	bl	8007d24 <__sinit>
 8007894:	69ab      	ldr	r3, [r5, #24]
 8007896:	68ac      	ldr	r4, [r5, #8]
 8007898:	b913      	cbnz	r3, 80078a0 <_puts_r+0x1c>
 800789a:	4628      	mov	r0, r5
 800789c:	f000 fa42 	bl	8007d24 <__sinit>
 80078a0:	4b2c      	ldr	r3, [pc, #176]	; (8007954 <_puts_r+0xd0>)
 80078a2:	429c      	cmp	r4, r3
 80078a4:	d120      	bne.n	80078e8 <_puts_r+0x64>
 80078a6:	686c      	ldr	r4, [r5, #4]
 80078a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078aa:	07db      	lsls	r3, r3, #31
 80078ac:	d405      	bmi.n	80078ba <_puts_r+0x36>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	0598      	lsls	r0, r3, #22
 80078b2:	d402      	bmi.n	80078ba <_puts_r+0x36>
 80078b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078b6:	f000 fad3 	bl	8007e60 <__retarget_lock_acquire_recursive>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	0719      	lsls	r1, r3, #28
 80078be:	d51d      	bpl.n	80078fc <_puts_r+0x78>
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	b1db      	cbz	r3, 80078fc <_puts_r+0x78>
 80078c4:	3e01      	subs	r6, #1
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078cc:	3b01      	subs	r3, #1
 80078ce:	60a3      	str	r3, [r4, #8]
 80078d0:	bb39      	cbnz	r1, 8007922 <_puts_r+0x9e>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da38      	bge.n	8007948 <_puts_r+0xc4>
 80078d6:	4622      	mov	r2, r4
 80078d8:	210a      	movs	r1, #10
 80078da:	4628      	mov	r0, r5
 80078dc:	f000 f848 	bl	8007970 <__swbuf_r>
 80078e0:	3001      	adds	r0, #1
 80078e2:	d011      	beq.n	8007908 <_puts_r+0x84>
 80078e4:	250a      	movs	r5, #10
 80078e6:	e011      	b.n	800790c <_puts_r+0x88>
 80078e8:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <_puts_r+0xd4>)
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d101      	bne.n	80078f2 <_puts_r+0x6e>
 80078ee:	68ac      	ldr	r4, [r5, #8]
 80078f0:	e7da      	b.n	80078a8 <_puts_r+0x24>
 80078f2:	4b1a      	ldr	r3, [pc, #104]	; (800795c <_puts_r+0xd8>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	bf08      	it	eq
 80078f8:	68ec      	ldreq	r4, [r5, #12]
 80078fa:	e7d5      	b.n	80078a8 <_puts_r+0x24>
 80078fc:	4621      	mov	r1, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f888 	bl	8007a14 <__swsetup_r>
 8007904:	2800      	cmp	r0, #0
 8007906:	d0dd      	beq.n	80078c4 <_puts_r+0x40>
 8007908:	f04f 35ff 	mov.w	r5, #4294967295
 800790c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800790e:	07da      	lsls	r2, r3, #31
 8007910:	d405      	bmi.n	800791e <_puts_r+0x9a>
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	059b      	lsls	r3, r3, #22
 8007916:	d402      	bmi.n	800791e <_puts_r+0x9a>
 8007918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800791a:	f000 faa2 	bl	8007e62 <__retarget_lock_release_recursive>
 800791e:	4628      	mov	r0, r5
 8007920:	bd70      	pop	{r4, r5, r6, pc}
 8007922:	2b00      	cmp	r3, #0
 8007924:	da04      	bge.n	8007930 <_puts_r+0xac>
 8007926:	69a2      	ldr	r2, [r4, #24]
 8007928:	429a      	cmp	r2, r3
 800792a:	dc06      	bgt.n	800793a <_puts_r+0xb6>
 800792c:	290a      	cmp	r1, #10
 800792e:	d004      	beq.n	800793a <_puts_r+0xb6>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	7019      	strb	r1, [r3, #0]
 8007938:	e7c5      	b.n	80078c6 <_puts_r+0x42>
 800793a:	4622      	mov	r2, r4
 800793c:	4628      	mov	r0, r5
 800793e:	f000 f817 	bl	8007970 <__swbuf_r>
 8007942:	3001      	adds	r0, #1
 8007944:	d1bf      	bne.n	80078c6 <_puts_r+0x42>
 8007946:	e7df      	b.n	8007908 <_puts_r+0x84>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	250a      	movs	r5, #10
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	6022      	str	r2, [r4, #0]
 8007950:	701d      	strb	r5, [r3, #0]
 8007952:	e7db      	b.n	800790c <_puts_r+0x88>
 8007954:	08009198 	.word	0x08009198
 8007958:	080091b8 	.word	0x080091b8
 800795c:	08009178 	.word	0x08009178

08007960 <puts>:
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <puts+0xc>)
 8007962:	4601      	mov	r1, r0
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	f7ff bf8d 	b.w	8007884 <_puts_r>
 800796a:	bf00      	nop
 800796c:	24000070 	.word	0x24000070

08007970 <__swbuf_r>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	460e      	mov	r6, r1
 8007974:	4614      	mov	r4, r2
 8007976:	4605      	mov	r5, r0
 8007978:	b118      	cbz	r0, 8007982 <__swbuf_r+0x12>
 800797a:	6983      	ldr	r3, [r0, #24]
 800797c:	b90b      	cbnz	r3, 8007982 <__swbuf_r+0x12>
 800797e:	f000 f9d1 	bl	8007d24 <__sinit>
 8007982:	4b21      	ldr	r3, [pc, #132]	; (8007a08 <__swbuf_r+0x98>)
 8007984:	429c      	cmp	r4, r3
 8007986:	d12b      	bne.n	80079e0 <__swbuf_r+0x70>
 8007988:	686c      	ldr	r4, [r5, #4]
 800798a:	69a3      	ldr	r3, [r4, #24]
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	071a      	lsls	r2, r3, #28
 8007992:	d52f      	bpl.n	80079f4 <__swbuf_r+0x84>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	b36b      	cbz	r3, 80079f4 <__swbuf_r+0x84>
 8007998:	6923      	ldr	r3, [r4, #16]
 800799a:	6820      	ldr	r0, [r4, #0]
 800799c:	1ac0      	subs	r0, r0, r3
 800799e:	6963      	ldr	r3, [r4, #20]
 80079a0:	b2f6      	uxtb	r6, r6
 80079a2:	4283      	cmp	r3, r0
 80079a4:	4637      	mov	r7, r6
 80079a6:	dc04      	bgt.n	80079b2 <__swbuf_r+0x42>
 80079a8:	4621      	mov	r1, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 f926 	bl	8007bfc <_fflush_r>
 80079b0:	bb30      	cbnz	r0, 8007a00 <__swbuf_r+0x90>
 80079b2:	68a3      	ldr	r3, [r4, #8]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	60a3      	str	r3, [r4, #8]
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	6022      	str	r2, [r4, #0]
 80079be:	701e      	strb	r6, [r3, #0]
 80079c0:	6963      	ldr	r3, [r4, #20]
 80079c2:	3001      	adds	r0, #1
 80079c4:	4283      	cmp	r3, r0
 80079c6:	d004      	beq.n	80079d2 <__swbuf_r+0x62>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	07db      	lsls	r3, r3, #31
 80079cc:	d506      	bpl.n	80079dc <__swbuf_r+0x6c>
 80079ce:	2e0a      	cmp	r6, #10
 80079d0:	d104      	bne.n	80079dc <__swbuf_r+0x6c>
 80079d2:	4621      	mov	r1, r4
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 f911 	bl	8007bfc <_fflush_r>
 80079da:	b988      	cbnz	r0, 8007a00 <__swbuf_r+0x90>
 80079dc:	4638      	mov	r0, r7
 80079de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e0:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <__swbuf_r+0x9c>)
 80079e2:	429c      	cmp	r4, r3
 80079e4:	d101      	bne.n	80079ea <__swbuf_r+0x7a>
 80079e6:	68ac      	ldr	r4, [r5, #8]
 80079e8:	e7cf      	b.n	800798a <__swbuf_r+0x1a>
 80079ea:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <__swbuf_r+0xa0>)
 80079ec:	429c      	cmp	r4, r3
 80079ee:	bf08      	it	eq
 80079f0:	68ec      	ldreq	r4, [r5, #12]
 80079f2:	e7ca      	b.n	800798a <__swbuf_r+0x1a>
 80079f4:	4621      	mov	r1, r4
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 f80c 	bl	8007a14 <__swsetup_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d0cb      	beq.n	8007998 <__swbuf_r+0x28>
 8007a00:	f04f 37ff 	mov.w	r7, #4294967295
 8007a04:	e7ea      	b.n	80079dc <__swbuf_r+0x6c>
 8007a06:	bf00      	nop
 8007a08:	08009198 	.word	0x08009198
 8007a0c:	080091b8 	.word	0x080091b8
 8007a10:	08009178 	.word	0x08009178

08007a14 <__swsetup_r>:
 8007a14:	4b32      	ldr	r3, [pc, #200]	; (8007ae0 <__swsetup_r+0xcc>)
 8007a16:	b570      	push	{r4, r5, r6, lr}
 8007a18:	681d      	ldr	r5, [r3, #0]
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	b125      	cbz	r5, 8007a2a <__swsetup_r+0x16>
 8007a20:	69ab      	ldr	r3, [r5, #24]
 8007a22:	b913      	cbnz	r3, 8007a2a <__swsetup_r+0x16>
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 f97d 	bl	8007d24 <__sinit>
 8007a2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ae4 <__swsetup_r+0xd0>)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	d10f      	bne.n	8007a50 <__swsetup_r+0x3c>
 8007a30:	686c      	ldr	r4, [r5, #4]
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a38:	0719      	lsls	r1, r3, #28
 8007a3a:	d42c      	bmi.n	8007a96 <__swsetup_r+0x82>
 8007a3c:	06dd      	lsls	r5, r3, #27
 8007a3e:	d411      	bmi.n	8007a64 <__swsetup_r+0x50>
 8007a40:	2309      	movs	r3, #9
 8007a42:	6033      	str	r3, [r6, #0]
 8007a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a48:	81a3      	strh	r3, [r4, #12]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4e:	e03e      	b.n	8007ace <__swsetup_r+0xba>
 8007a50:	4b25      	ldr	r3, [pc, #148]	; (8007ae8 <__swsetup_r+0xd4>)
 8007a52:	429c      	cmp	r4, r3
 8007a54:	d101      	bne.n	8007a5a <__swsetup_r+0x46>
 8007a56:	68ac      	ldr	r4, [r5, #8]
 8007a58:	e7eb      	b.n	8007a32 <__swsetup_r+0x1e>
 8007a5a:	4b24      	ldr	r3, [pc, #144]	; (8007aec <__swsetup_r+0xd8>)
 8007a5c:	429c      	cmp	r4, r3
 8007a5e:	bf08      	it	eq
 8007a60:	68ec      	ldreq	r4, [r5, #12]
 8007a62:	e7e6      	b.n	8007a32 <__swsetup_r+0x1e>
 8007a64:	0758      	lsls	r0, r3, #29
 8007a66:	d512      	bpl.n	8007a8e <__swsetup_r+0x7a>
 8007a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a6a:	b141      	cbz	r1, 8007a7e <__swsetup_r+0x6a>
 8007a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a70:	4299      	cmp	r1, r3
 8007a72:	d002      	beq.n	8007a7a <__swsetup_r+0x66>
 8007a74:	4630      	mov	r0, r6
 8007a76:	f000 fa5b 	bl	8007f30 <_free_r>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	2300      	movs	r3, #0
 8007a88:	6063      	str	r3, [r4, #4]
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f043 0308 	orr.w	r3, r3, #8
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	b94b      	cbnz	r3, 8007aae <__swsetup_r+0x9a>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa4:	d003      	beq.n	8007aae <__swsetup_r+0x9a>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f000 fa01 	bl	8007eb0 <__smakebuf_r>
 8007aae:	89a0      	ldrh	r0, [r4, #12]
 8007ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ab4:	f010 0301 	ands.w	r3, r0, #1
 8007ab8:	d00a      	beq.n	8007ad0 <__swsetup_r+0xbc>
 8007aba:	2300      	movs	r3, #0
 8007abc:	60a3      	str	r3, [r4, #8]
 8007abe:	6963      	ldr	r3, [r4, #20]
 8007ac0:	425b      	negs	r3, r3
 8007ac2:	61a3      	str	r3, [r4, #24]
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	b943      	cbnz	r3, 8007ada <__swsetup_r+0xc6>
 8007ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007acc:	d1ba      	bne.n	8007a44 <__swsetup_r+0x30>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	0781      	lsls	r1, r0, #30
 8007ad2:	bf58      	it	pl
 8007ad4:	6963      	ldrpl	r3, [r4, #20]
 8007ad6:	60a3      	str	r3, [r4, #8]
 8007ad8:	e7f4      	b.n	8007ac4 <__swsetup_r+0xb0>
 8007ada:	2000      	movs	r0, #0
 8007adc:	e7f7      	b.n	8007ace <__swsetup_r+0xba>
 8007ade:	bf00      	nop
 8007ae0:	24000070 	.word	0x24000070
 8007ae4:	08009198 	.word	0x08009198
 8007ae8:	080091b8 	.word	0x080091b8
 8007aec:	08009178 	.word	0x08009178

08007af0 <__sflush_r>:
 8007af0:	898a      	ldrh	r2, [r1, #12]
 8007af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af6:	4605      	mov	r5, r0
 8007af8:	0710      	lsls	r0, r2, #28
 8007afa:	460c      	mov	r4, r1
 8007afc:	d458      	bmi.n	8007bb0 <__sflush_r+0xc0>
 8007afe:	684b      	ldr	r3, [r1, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dc05      	bgt.n	8007b10 <__sflush_r+0x20>
 8007b04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dc02      	bgt.n	8007b10 <__sflush_r+0x20>
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b12:	2e00      	cmp	r6, #0
 8007b14:	d0f9      	beq.n	8007b0a <__sflush_r+0x1a>
 8007b16:	2300      	movs	r3, #0
 8007b18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b1c:	682f      	ldr	r7, [r5, #0]
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	d032      	beq.n	8007b88 <__sflush_r+0x98>
 8007b22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	075a      	lsls	r2, r3, #29
 8007b28:	d505      	bpl.n	8007b36 <__sflush_r+0x46>
 8007b2a:	6863      	ldr	r3, [r4, #4]
 8007b2c:	1ac0      	subs	r0, r0, r3
 8007b2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b30:	b10b      	cbz	r3, 8007b36 <__sflush_r+0x46>
 8007b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b34:	1ac0      	subs	r0, r0, r3
 8007b36:	2300      	movs	r3, #0
 8007b38:	4602      	mov	r2, r0
 8007b3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b3c:	6a21      	ldr	r1, [r4, #32]
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b0      	blx	r6
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	d106      	bne.n	8007b56 <__sflush_r+0x66>
 8007b48:	6829      	ldr	r1, [r5, #0]
 8007b4a:	291d      	cmp	r1, #29
 8007b4c:	d82c      	bhi.n	8007ba8 <__sflush_r+0xb8>
 8007b4e:	4a2a      	ldr	r2, [pc, #168]	; (8007bf8 <__sflush_r+0x108>)
 8007b50:	40ca      	lsrs	r2, r1
 8007b52:	07d6      	lsls	r6, r2, #31
 8007b54:	d528      	bpl.n	8007ba8 <__sflush_r+0xb8>
 8007b56:	2200      	movs	r2, #0
 8007b58:	6062      	str	r2, [r4, #4]
 8007b5a:	04d9      	lsls	r1, r3, #19
 8007b5c:	6922      	ldr	r2, [r4, #16]
 8007b5e:	6022      	str	r2, [r4, #0]
 8007b60:	d504      	bpl.n	8007b6c <__sflush_r+0x7c>
 8007b62:	1c42      	adds	r2, r0, #1
 8007b64:	d101      	bne.n	8007b6a <__sflush_r+0x7a>
 8007b66:	682b      	ldr	r3, [r5, #0]
 8007b68:	b903      	cbnz	r3, 8007b6c <__sflush_r+0x7c>
 8007b6a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b6e:	602f      	str	r7, [r5, #0]
 8007b70:	2900      	cmp	r1, #0
 8007b72:	d0ca      	beq.n	8007b0a <__sflush_r+0x1a>
 8007b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b78:	4299      	cmp	r1, r3
 8007b7a:	d002      	beq.n	8007b82 <__sflush_r+0x92>
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 f9d7 	bl	8007f30 <_free_r>
 8007b82:	2000      	movs	r0, #0
 8007b84:	6360      	str	r0, [r4, #52]	; 0x34
 8007b86:	e7c1      	b.n	8007b0c <__sflush_r+0x1c>
 8007b88:	6a21      	ldr	r1, [r4, #32]
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	47b0      	blx	r6
 8007b90:	1c41      	adds	r1, r0, #1
 8007b92:	d1c7      	bne.n	8007b24 <__sflush_r+0x34>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0c4      	beq.n	8007b24 <__sflush_r+0x34>
 8007b9a:	2b1d      	cmp	r3, #29
 8007b9c:	d001      	beq.n	8007ba2 <__sflush_r+0xb2>
 8007b9e:	2b16      	cmp	r3, #22
 8007ba0:	d101      	bne.n	8007ba6 <__sflush_r+0xb6>
 8007ba2:	602f      	str	r7, [r5, #0]
 8007ba4:	e7b1      	b.n	8007b0a <__sflush_r+0x1a>
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bac:	81a3      	strh	r3, [r4, #12]
 8007bae:	e7ad      	b.n	8007b0c <__sflush_r+0x1c>
 8007bb0:	690f      	ldr	r7, [r1, #16]
 8007bb2:	2f00      	cmp	r7, #0
 8007bb4:	d0a9      	beq.n	8007b0a <__sflush_r+0x1a>
 8007bb6:	0793      	lsls	r3, r2, #30
 8007bb8:	680e      	ldr	r6, [r1, #0]
 8007bba:	bf08      	it	eq
 8007bbc:	694b      	ldreq	r3, [r1, #20]
 8007bbe:	600f      	str	r7, [r1, #0]
 8007bc0:	bf18      	it	ne
 8007bc2:	2300      	movne	r3, #0
 8007bc4:	eba6 0807 	sub.w	r8, r6, r7
 8007bc8:	608b      	str	r3, [r1, #8]
 8007bca:	f1b8 0f00 	cmp.w	r8, #0
 8007bce:	dd9c      	ble.n	8007b0a <__sflush_r+0x1a>
 8007bd0:	6a21      	ldr	r1, [r4, #32]
 8007bd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bd4:	4643      	mov	r3, r8
 8007bd6:	463a      	mov	r2, r7
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b0      	blx	r6
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	dc06      	bgt.n	8007bee <__sflush_r+0xfe>
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	e78e      	b.n	8007b0c <__sflush_r+0x1c>
 8007bee:	4407      	add	r7, r0
 8007bf0:	eba8 0800 	sub.w	r8, r8, r0
 8007bf4:	e7e9      	b.n	8007bca <__sflush_r+0xda>
 8007bf6:	bf00      	nop
 8007bf8:	20400001 	.word	0x20400001

08007bfc <_fflush_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	690b      	ldr	r3, [r1, #16]
 8007c00:	4605      	mov	r5, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	b913      	cbnz	r3, 8007c0c <_fflush_r+0x10>
 8007c06:	2500      	movs	r5, #0
 8007c08:	4628      	mov	r0, r5
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	b118      	cbz	r0, 8007c16 <_fflush_r+0x1a>
 8007c0e:	6983      	ldr	r3, [r0, #24]
 8007c10:	b90b      	cbnz	r3, 8007c16 <_fflush_r+0x1a>
 8007c12:	f000 f887 	bl	8007d24 <__sinit>
 8007c16:	4b14      	ldr	r3, [pc, #80]	; (8007c68 <_fflush_r+0x6c>)
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	d11b      	bne.n	8007c54 <_fflush_r+0x58>
 8007c1c:	686c      	ldr	r4, [r5, #4]
 8007c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0ef      	beq.n	8007c06 <_fflush_r+0xa>
 8007c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c28:	07d0      	lsls	r0, r2, #31
 8007c2a:	d404      	bmi.n	8007c36 <_fflush_r+0x3a>
 8007c2c:	0599      	lsls	r1, r3, #22
 8007c2e:	d402      	bmi.n	8007c36 <_fflush_r+0x3a>
 8007c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c32:	f000 f915 	bl	8007e60 <__retarget_lock_acquire_recursive>
 8007c36:	4628      	mov	r0, r5
 8007c38:	4621      	mov	r1, r4
 8007c3a:	f7ff ff59 	bl	8007af0 <__sflush_r>
 8007c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c40:	07da      	lsls	r2, r3, #31
 8007c42:	4605      	mov	r5, r0
 8007c44:	d4e0      	bmi.n	8007c08 <_fflush_r+0xc>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	059b      	lsls	r3, r3, #22
 8007c4a:	d4dd      	bmi.n	8007c08 <_fflush_r+0xc>
 8007c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c4e:	f000 f908 	bl	8007e62 <__retarget_lock_release_recursive>
 8007c52:	e7d9      	b.n	8007c08 <_fflush_r+0xc>
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <_fflush_r+0x70>)
 8007c56:	429c      	cmp	r4, r3
 8007c58:	d101      	bne.n	8007c5e <_fflush_r+0x62>
 8007c5a:	68ac      	ldr	r4, [r5, #8]
 8007c5c:	e7df      	b.n	8007c1e <_fflush_r+0x22>
 8007c5e:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <_fflush_r+0x74>)
 8007c60:	429c      	cmp	r4, r3
 8007c62:	bf08      	it	eq
 8007c64:	68ec      	ldreq	r4, [r5, #12]
 8007c66:	e7da      	b.n	8007c1e <_fflush_r+0x22>
 8007c68:	08009198 	.word	0x08009198
 8007c6c:	080091b8 	.word	0x080091b8
 8007c70:	08009178 	.word	0x08009178

08007c74 <std>:
 8007c74:	2300      	movs	r3, #0
 8007c76:	b510      	push	{r4, lr}
 8007c78:	4604      	mov	r4, r0
 8007c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c82:	6083      	str	r3, [r0, #8]
 8007c84:	8181      	strh	r1, [r0, #12]
 8007c86:	6643      	str	r3, [r0, #100]	; 0x64
 8007c88:	81c2      	strh	r2, [r0, #14]
 8007c8a:	6183      	str	r3, [r0, #24]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	2208      	movs	r2, #8
 8007c90:	305c      	adds	r0, #92	; 0x5c
 8007c92:	f7ff fdd7 	bl	8007844 <memset>
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <std+0x38>)
 8007c98:	6263      	str	r3, [r4, #36]	; 0x24
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <std+0x3c>)
 8007c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <std+0x40>)
 8007ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <std+0x44>)
 8007ca4:	6224      	str	r4, [r4, #32]
 8007ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ca8:	bd10      	pop	{r4, pc}
 8007caa:	bf00      	nop
 8007cac:	080086ed 	.word	0x080086ed
 8007cb0:	0800870f 	.word	0x0800870f
 8007cb4:	08008747 	.word	0x08008747
 8007cb8:	0800876b 	.word	0x0800876b

08007cbc <_cleanup_r>:
 8007cbc:	4901      	ldr	r1, [pc, #4]	; (8007cc4 <_cleanup_r+0x8>)
 8007cbe:	f000 b8af 	b.w	8007e20 <_fwalk_reent>
 8007cc2:	bf00      	nop
 8007cc4:	08007bfd 	.word	0x08007bfd

08007cc8 <__sfmoreglue>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	2268      	movs	r2, #104	; 0x68
 8007ccc:	1e4d      	subs	r5, r1, #1
 8007cce:	4355      	muls	r5, r2
 8007cd0:	460e      	mov	r6, r1
 8007cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cd6:	f000 f997 	bl	8008008 <_malloc_r>
 8007cda:	4604      	mov	r4, r0
 8007cdc:	b140      	cbz	r0, 8007cf0 <__sfmoreglue+0x28>
 8007cde:	2100      	movs	r1, #0
 8007ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ce4:	300c      	adds	r0, #12
 8007ce6:	60a0      	str	r0, [r4, #8]
 8007ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cec:	f7ff fdaa 	bl	8007844 <memset>
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}

08007cf4 <__sfp_lock_acquire>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	; (8007cfc <__sfp_lock_acquire+0x8>)
 8007cf6:	f000 b8b3 	b.w	8007e60 <__retarget_lock_acquire_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	24001031 	.word	0x24001031

08007d00 <__sfp_lock_release>:
 8007d00:	4801      	ldr	r0, [pc, #4]	; (8007d08 <__sfp_lock_release+0x8>)
 8007d02:	f000 b8ae 	b.w	8007e62 <__retarget_lock_release_recursive>
 8007d06:	bf00      	nop
 8007d08:	24001031 	.word	0x24001031

08007d0c <__sinit_lock_acquire>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	; (8007d14 <__sinit_lock_acquire+0x8>)
 8007d0e:	f000 b8a7 	b.w	8007e60 <__retarget_lock_acquire_recursive>
 8007d12:	bf00      	nop
 8007d14:	24001032 	.word	0x24001032

08007d18 <__sinit_lock_release>:
 8007d18:	4801      	ldr	r0, [pc, #4]	; (8007d20 <__sinit_lock_release+0x8>)
 8007d1a:	f000 b8a2 	b.w	8007e62 <__retarget_lock_release_recursive>
 8007d1e:	bf00      	nop
 8007d20:	24001032 	.word	0x24001032

08007d24 <__sinit>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	4604      	mov	r4, r0
 8007d28:	f7ff fff0 	bl	8007d0c <__sinit_lock_acquire>
 8007d2c:	69a3      	ldr	r3, [r4, #24]
 8007d2e:	b11b      	cbz	r3, 8007d38 <__sinit+0x14>
 8007d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d34:	f7ff bff0 	b.w	8007d18 <__sinit_lock_release>
 8007d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <__sinit+0x68>)
 8007d40:	4a13      	ldr	r2, [pc, #76]	; (8007d90 <__sinit+0x6c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	bf04      	itt	eq
 8007d4a:	2301      	moveq	r3, #1
 8007d4c:	61a3      	streq	r3, [r4, #24]
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 f820 	bl	8007d94 <__sfp>
 8007d54:	6060      	str	r0, [r4, #4]
 8007d56:	4620      	mov	r0, r4
 8007d58:	f000 f81c 	bl	8007d94 <__sfp>
 8007d5c:	60a0      	str	r0, [r4, #8]
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 f818 	bl	8007d94 <__sfp>
 8007d64:	2200      	movs	r2, #0
 8007d66:	60e0      	str	r0, [r4, #12]
 8007d68:	2104      	movs	r1, #4
 8007d6a:	6860      	ldr	r0, [r4, #4]
 8007d6c:	f7ff ff82 	bl	8007c74 <std>
 8007d70:	68a0      	ldr	r0, [r4, #8]
 8007d72:	2201      	movs	r2, #1
 8007d74:	2109      	movs	r1, #9
 8007d76:	f7ff ff7d 	bl	8007c74 <std>
 8007d7a:	68e0      	ldr	r0, [r4, #12]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	2112      	movs	r1, #18
 8007d80:	f7ff ff78 	bl	8007c74 <std>
 8007d84:	2301      	movs	r3, #1
 8007d86:	61a3      	str	r3, [r4, #24]
 8007d88:	e7d2      	b.n	8007d30 <__sinit+0xc>
 8007d8a:	bf00      	nop
 8007d8c:	08009174 	.word	0x08009174
 8007d90:	08007cbd 	.word	0x08007cbd

08007d94 <__sfp>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	4607      	mov	r7, r0
 8007d98:	f7ff ffac 	bl	8007cf4 <__sfp_lock_acquire>
 8007d9c:	4b1e      	ldr	r3, [pc, #120]	; (8007e18 <__sfp+0x84>)
 8007d9e:	681e      	ldr	r6, [r3, #0]
 8007da0:	69b3      	ldr	r3, [r6, #24]
 8007da2:	b913      	cbnz	r3, 8007daa <__sfp+0x16>
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff ffbd 	bl	8007d24 <__sinit>
 8007daa:	3648      	adds	r6, #72	; 0x48
 8007dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	d503      	bpl.n	8007dbc <__sfp+0x28>
 8007db4:	6833      	ldr	r3, [r6, #0]
 8007db6:	b30b      	cbz	r3, 8007dfc <__sfp+0x68>
 8007db8:	6836      	ldr	r6, [r6, #0]
 8007dba:	e7f7      	b.n	8007dac <__sfp+0x18>
 8007dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dc0:	b9d5      	cbnz	r5, 8007df8 <__sfp+0x64>
 8007dc2:	4b16      	ldr	r3, [pc, #88]	; (8007e1c <__sfp+0x88>)
 8007dc4:	60e3      	str	r3, [r4, #12]
 8007dc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dca:	6665      	str	r5, [r4, #100]	; 0x64
 8007dcc:	f000 f847 	bl	8007e5e <__retarget_lock_init_recursive>
 8007dd0:	f7ff ff96 	bl	8007d00 <__sfp_lock_release>
 8007dd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ddc:	6025      	str	r5, [r4, #0]
 8007dde:	61a5      	str	r5, [r4, #24]
 8007de0:	2208      	movs	r2, #8
 8007de2:	4629      	mov	r1, r5
 8007de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007de8:	f7ff fd2c 	bl	8007844 <memset>
 8007dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007df4:	4620      	mov	r0, r4
 8007df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df8:	3468      	adds	r4, #104	; 0x68
 8007dfa:	e7d9      	b.n	8007db0 <__sfp+0x1c>
 8007dfc:	2104      	movs	r1, #4
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f7ff ff62 	bl	8007cc8 <__sfmoreglue>
 8007e04:	4604      	mov	r4, r0
 8007e06:	6030      	str	r0, [r6, #0]
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d1d5      	bne.n	8007db8 <__sfp+0x24>
 8007e0c:	f7ff ff78 	bl	8007d00 <__sfp_lock_release>
 8007e10:	230c      	movs	r3, #12
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	e7ee      	b.n	8007df4 <__sfp+0x60>
 8007e16:	bf00      	nop
 8007e18:	08009174 	.word	0x08009174
 8007e1c:	ffff0001 	.word	0xffff0001

08007e20 <_fwalk_reent>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	4606      	mov	r6, r0
 8007e26:	4688      	mov	r8, r1
 8007e28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e2c:	2700      	movs	r7, #0
 8007e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e32:	f1b9 0901 	subs.w	r9, r9, #1
 8007e36:	d505      	bpl.n	8007e44 <_fwalk_reent+0x24>
 8007e38:	6824      	ldr	r4, [r4, #0]
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d1f7      	bne.n	8007e2e <_fwalk_reent+0xe>
 8007e3e:	4638      	mov	r0, r7
 8007e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e44:	89ab      	ldrh	r3, [r5, #12]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d907      	bls.n	8007e5a <_fwalk_reent+0x3a>
 8007e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	d003      	beq.n	8007e5a <_fwalk_reent+0x3a>
 8007e52:	4629      	mov	r1, r5
 8007e54:	4630      	mov	r0, r6
 8007e56:	47c0      	blx	r8
 8007e58:	4307      	orrs	r7, r0
 8007e5a:	3568      	adds	r5, #104	; 0x68
 8007e5c:	e7e9      	b.n	8007e32 <_fwalk_reent+0x12>

08007e5e <__retarget_lock_init_recursive>:
 8007e5e:	4770      	bx	lr

08007e60 <__retarget_lock_acquire_recursive>:
 8007e60:	4770      	bx	lr

08007e62 <__retarget_lock_release_recursive>:
 8007e62:	4770      	bx	lr

08007e64 <__swhatbuf_r>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	460e      	mov	r6, r1
 8007e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	b096      	sub	sp, #88	; 0x58
 8007e70:	4614      	mov	r4, r2
 8007e72:	461d      	mov	r5, r3
 8007e74:	da08      	bge.n	8007e88 <__swhatbuf_r+0x24>
 8007e76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	602a      	str	r2, [r5, #0]
 8007e7e:	061a      	lsls	r2, r3, #24
 8007e80:	d410      	bmi.n	8007ea4 <__swhatbuf_r+0x40>
 8007e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e86:	e00e      	b.n	8007ea6 <__swhatbuf_r+0x42>
 8007e88:	466a      	mov	r2, sp
 8007e8a:	f000 fc95 	bl	80087b8 <_fstat_r>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	dbf1      	blt.n	8007e76 <__swhatbuf_r+0x12>
 8007e92:	9a01      	ldr	r2, [sp, #4]
 8007e94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e9c:	425a      	negs	r2, r3
 8007e9e:	415a      	adcs	r2, r3
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	e7ee      	b.n	8007e82 <__swhatbuf_r+0x1e>
 8007ea4:	2340      	movs	r3, #64	; 0x40
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	b016      	add	sp, #88	; 0x58
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
	...

08007eb0 <__smakebuf_r>:
 8007eb0:	898b      	ldrh	r3, [r1, #12]
 8007eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eb4:	079d      	lsls	r5, r3, #30
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460c      	mov	r4, r1
 8007eba:	d507      	bpl.n	8007ecc <__smakebuf_r+0x1c>
 8007ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	6163      	str	r3, [r4, #20]
 8007ec8:	b002      	add	sp, #8
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	ab01      	add	r3, sp, #4
 8007ece:	466a      	mov	r2, sp
 8007ed0:	f7ff ffc8 	bl	8007e64 <__swhatbuf_r>
 8007ed4:	9900      	ldr	r1, [sp, #0]
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 f895 	bl	8008008 <_malloc_r>
 8007ede:	b948      	cbnz	r0, 8007ef4 <__smakebuf_r+0x44>
 8007ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee4:	059a      	lsls	r2, r3, #22
 8007ee6:	d4ef      	bmi.n	8007ec8 <__smakebuf_r+0x18>
 8007ee8:	f023 0303 	bic.w	r3, r3, #3
 8007eec:	f043 0302 	orr.w	r3, r3, #2
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	e7e3      	b.n	8007ebc <__smakebuf_r+0xc>
 8007ef4:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <__smakebuf_r+0x7c>)
 8007ef6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	6020      	str	r0, [r4, #0]
 8007efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	9b00      	ldr	r3, [sp, #0]
 8007f04:	6163      	str	r3, [r4, #20]
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	6120      	str	r0, [r4, #16]
 8007f0a:	b15b      	cbz	r3, 8007f24 <__smakebuf_r+0x74>
 8007f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f10:	4630      	mov	r0, r6
 8007f12:	f000 fc63 	bl	80087dc <_isatty_r>
 8007f16:	b128      	cbz	r0, 8007f24 <__smakebuf_r+0x74>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f023 0303 	bic.w	r3, r3, #3
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	89a0      	ldrh	r0, [r4, #12]
 8007f26:	4305      	orrs	r5, r0
 8007f28:	81a5      	strh	r5, [r4, #12]
 8007f2a:	e7cd      	b.n	8007ec8 <__smakebuf_r+0x18>
 8007f2c:	08007cbd 	.word	0x08007cbd

08007f30 <_free_r>:
 8007f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f32:	2900      	cmp	r1, #0
 8007f34:	d044      	beq.n	8007fc0 <_free_r+0x90>
 8007f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f3a:	9001      	str	r0, [sp, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f42:	bfb8      	it	lt
 8007f44:	18e4      	addlt	r4, r4, r3
 8007f46:	f000 fc6b 	bl	8008820 <__malloc_lock>
 8007f4a:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <_free_r+0x94>)
 8007f4c:	9801      	ldr	r0, [sp, #4]
 8007f4e:	6813      	ldr	r3, [r2, #0]
 8007f50:	b933      	cbnz	r3, 8007f60 <_free_r+0x30>
 8007f52:	6063      	str	r3, [r4, #4]
 8007f54:	6014      	str	r4, [r2, #0]
 8007f56:	b003      	add	sp, #12
 8007f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f5c:	f000 bc66 	b.w	800882c <__malloc_unlock>
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d908      	bls.n	8007f76 <_free_r+0x46>
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	1961      	adds	r1, r4, r5
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	bf01      	itttt	eq
 8007f6c:	6819      	ldreq	r1, [r3, #0]
 8007f6e:	685b      	ldreq	r3, [r3, #4]
 8007f70:	1949      	addeq	r1, r1, r5
 8007f72:	6021      	streq	r1, [r4, #0]
 8007f74:	e7ed      	b.n	8007f52 <_free_r+0x22>
 8007f76:	461a      	mov	r2, r3
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	b10b      	cbz	r3, 8007f80 <_free_r+0x50>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d9fa      	bls.n	8007f76 <_free_r+0x46>
 8007f80:	6811      	ldr	r1, [r2, #0]
 8007f82:	1855      	adds	r5, r2, r1
 8007f84:	42a5      	cmp	r5, r4
 8007f86:	d10b      	bne.n	8007fa0 <_free_r+0x70>
 8007f88:	6824      	ldr	r4, [r4, #0]
 8007f8a:	4421      	add	r1, r4
 8007f8c:	1854      	adds	r4, r2, r1
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	6011      	str	r1, [r2, #0]
 8007f92:	d1e0      	bne.n	8007f56 <_free_r+0x26>
 8007f94:	681c      	ldr	r4, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	6053      	str	r3, [r2, #4]
 8007f9a:	4421      	add	r1, r4
 8007f9c:	6011      	str	r1, [r2, #0]
 8007f9e:	e7da      	b.n	8007f56 <_free_r+0x26>
 8007fa0:	d902      	bls.n	8007fa8 <_free_r+0x78>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	6003      	str	r3, [r0, #0]
 8007fa6:	e7d6      	b.n	8007f56 <_free_r+0x26>
 8007fa8:	6825      	ldr	r5, [r4, #0]
 8007faa:	1961      	adds	r1, r4, r5
 8007fac:	428b      	cmp	r3, r1
 8007fae:	bf04      	itt	eq
 8007fb0:	6819      	ldreq	r1, [r3, #0]
 8007fb2:	685b      	ldreq	r3, [r3, #4]
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	bf04      	itt	eq
 8007fb8:	1949      	addeq	r1, r1, r5
 8007fba:	6021      	streq	r1, [r4, #0]
 8007fbc:	6054      	str	r4, [r2, #4]
 8007fbe:	e7ca      	b.n	8007f56 <_free_r+0x26>
 8007fc0:	b003      	add	sp, #12
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	24001034 	.word	0x24001034

08007fc8 <sbrk_aligned>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	4e0e      	ldr	r6, [pc, #56]	; (8008004 <sbrk_aligned+0x3c>)
 8007fcc:	460c      	mov	r4, r1
 8007fce:	6831      	ldr	r1, [r6, #0]
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	b911      	cbnz	r1, 8007fda <sbrk_aligned+0x12>
 8007fd4:	f000 fb7a 	bl	80086cc <_sbrk_r>
 8007fd8:	6030      	str	r0, [r6, #0]
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 fb75 	bl	80086cc <_sbrk_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d00a      	beq.n	8007ffc <sbrk_aligned+0x34>
 8007fe6:	1cc4      	adds	r4, r0, #3
 8007fe8:	f024 0403 	bic.w	r4, r4, #3
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d007      	beq.n	8008000 <sbrk_aligned+0x38>
 8007ff0:	1a21      	subs	r1, r4, r0
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 fb6a 	bl	80086cc <_sbrk_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d101      	bne.n	8008000 <sbrk_aligned+0x38>
 8007ffc:	f04f 34ff 	mov.w	r4, #4294967295
 8008000:	4620      	mov	r0, r4
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	24001038 	.word	0x24001038

08008008 <_malloc_r>:
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	1ccd      	adds	r5, r1, #3
 800800e:	f025 0503 	bic.w	r5, r5, #3
 8008012:	3508      	adds	r5, #8
 8008014:	2d0c      	cmp	r5, #12
 8008016:	bf38      	it	cc
 8008018:	250c      	movcc	r5, #12
 800801a:	2d00      	cmp	r5, #0
 800801c:	4607      	mov	r7, r0
 800801e:	db01      	blt.n	8008024 <_malloc_r+0x1c>
 8008020:	42a9      	cmp	r1, r5
 8008022:	d905      	bls.n	8008030 <_malloc_r+0x28>
 8008024:	230c      	movs	r3, #12
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	2600      	movs	r6, #0
 800802a:	4630      	mov	r0, r6
 800802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008030:	4e2e      	ldr	r6, [pc, #184]	; (80080ec <_malloc_r+0xe4>)
 8008032:	f000 fbf5 	bl	8008820 <__malloc_lock>
 8008036:	6833      	ldr	r3, [r6, #0]
 8008038:	461c      	mov	r4, r3
 800803a:	bb34      	cbnz	r4, 800808a <_malloc_r+0x82>
 800803c:	4629      	mov	r1, r5
 800803e:	4638      	mov	r0, r7
 8008040:	f7ff ffc2 	bl	8007fc8 <sbrk_aligned>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	4604      	mov	r4, r0
 8008048:	d14d      	bne.n	80080e6 <_malloc_r+0xde>
 800804a:	6834      	ldr	r4, [r6, #0]
 800804c:	4626      	mov	r6, r4
 800804e:	2e00      	cmp	r6, #0
 8008050:	d140      	bne.n	80080d4 <_malloc_r+0xcc>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	4631      	mov	r1, r6
 8008056:	4638      	mov	r0, r7
 8008058:	eb04 0803 	add.w	r8, r4, r3
 800805c:	f000 fb36 	bl	80086cc <_sbrk_r>
 8008060:	4580      	cmp	r8, r0
 8008062:	d13a      	bne.n	80080da <_malloc_r+0xd2>
 8008064:	6821      	ldr	r1, [r4, #0]
 8008066:	3503      	adds	r5, #3
 8008068:	1a6d      	subs	r5, r5, r1
 800806a:	f025 0503 	bic.w	r5, r5, #3
 800806e:	3508      	adds	r5, #8
 8008070:	2d0c      	cmp	r5, #12
 8008072:	bf38      	it	cc
 8008074:	250c      	movcc	r5, #12
 8008076:	4629      	mov	r1, r5
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff ffa5 	bl	8007fc8 <sbrk_aligned>
 800807e:	3001      	adds	r0, #1
 8008080:	d02b      	beq.n	80080da <_malloc_r+0xd2>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	442b      	add	r3, r5
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	e00e      	b.n	80080a8 <_malloc_r+0xa0>
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	1b52      	subs	r2, r2, r5
 800808e:	d41e      	bmi.n	80080ce <_malloc_r+0xc6>
 8008090:	2a0b      	cmp	r2, #11
 8008092:	d916      	bls.n	80080c2 <_malloc_r+0xba>
 8008094:	1961      	adds	r1, r4, r5
 8008096:	42a3      	cmp	r3, r4
 8008098:	6025      	str	r5, [r4, #0]
 800809a:	bf18      	it	ne
 800809c:	6059      	strne	r1, [r3, #4]
 800809e:	6863      	ldr	r3, [r4, #4]
 80080a0:	bf08      	it	eq
 80080a2:	6031      	streq	r1, [r6, #0]
 80080a4:	5162      	str	r2, [r4, r5]
 80080a6:	604b      	str	r3, [r1, #4]
 80080a8:	4638      	mov	r0, r7
 80080aa:	f104 060b 	add.w	r6, r4, #11
 80080ae:	f000 fbbd 	bl	800882c <__malloc_unlock>
 80080b2:	f026 0607 	bic.w	r6, r6, #7
 80080b6:	1d23      	adds	r3, r4, #4
 80080b8:	1af2      	subs	r2, r6, r3
 80080ba:	d0b6      	beq.n	800802a <_malloc_r+0x22>
 80080bc:	1b9b      	subs	r3, r3, r6
 80080be:	50a3      	str	r3, [r4, r2]
 80080c0:	e7b3      	b.n	800802a <_malloc_r+0x22>
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	bf0c      	ite	eq
 80080c8:	6032      	streq	r2, [r6, #0]
 80080ca:	605a      	strne	r2, [r3, #4]
 80080cc:	e7ec      	b.n	80080a8 <_malloc_r+0xa0>
 80080ce:	4623      	mov	r3, r4
 80080d0:	6864      	ldr	r4, [r4, #4]
 80080d2:	e7b2      	b.n	800803a <_malloc_r+0x32>
 80080d4:	4634      	mov	r4, r6
 80080d6:	6876      	ldr	r6, [r6, #4]
 80080d8:	e7b9      	b.n	800804e <_malloc_r+0x46>
 80080da:	230c      	movs	r3, #12
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4638      	mov	r0, r7
 80080e0:	f000 fba4 	bl	800882c <__malloc_unlock>
 80080e4:	e7a1      	b.n	800802a <_malloc_r+0x22>
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	e7de      	b.n	80080a8 <_malloc_r+0xa0>
 80080ea:	bf00      	nop
 80080ec:	24001034 	.word	0x24001034

080080f0 <__sfputc_r>:
 80080f0:	6893      	ldr	r3, [r2, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	b410      	push	{r4}
 80080f8:	6093      	str	r3, [r2, #8]
 80080fa:	da08      	bge.n	800810e <__sfputc_r+0x1e>
 80080fc:	6994      	ldr	r4, [r2, #24]
 80080fe:	42a3      	cmp	r3, r4
 8008100:	db01      	blt.n	8008106 <__sfputc_r+0x16>
 8008102:	290a      	cmp	r1, #10
 8008104:	d103      	bne.n	800810e <__sfputc_r+0x1e>
 8008106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800810a:	f7ff bc31 	b.w	8007970 <__swbuf_r>
 800810e:	6813      	ldr	r3, [r2, #0]
 8008110:	1c58      	adds	r0, r3, #1
 8008112:	6010      	str	r0, [r2, #0]
 8008114:	7019      	strb	r1, [r3, #0]
 8008116:	4608      	mov	r0, r1
 8008118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811c:	4770      	bx	lr

0800811e <__sfputs_r>:
 800811e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008120:	4606      	mov	r6, r0
 8008122:	460f      	mov	r7, r1
 8008124:	4614      	mov	r4, r2
 8008126:	18d5      	adds	r5, r2, r3
 8008128:	42ac      	cmp	r4, r5
 800812a:	d101      	bne.n	8008130 <__sfputs_r+0x12>
 800812c:	2000      	movs	r0, #0
 800812e:	e007      	b.n	8008140 <__sfputs_r+0x22>
 8008130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008134:	463a      	mov	r2, r7
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ffda 	bl	80080f0 <__sfputc_r>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d1f3      	bne.n	8008128 <__sfputs_r+0xa>
 8008140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008144 <_vfiprintf_r>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	460d      	mov	r5, r1
 800814a:	b09d      	sub	sp, #116	; 0x74
 800814c:	4614      	mov	r4, r2
 800814e:	4698      	mov	r8, r3
 8008150:	4606      	mov	r6, r0
 8008152:	b118      	cbz	r0, 800815c <_vfiprintf_r+0x18>
 8008154:	6983      	ldr	r3, [r0, #24]
 8008156:	b90b      	cbnz	r3, 800815c <_vfiprintf_r+0x18>
 8008158:	f7ff fde4 	bl	8007d24 <__sinit>
 800815c:	4b89      	ldr	r3, [pc, #548]	; (8008384 <_vfiprintf_r+0x240>)
 800815e:	429d      	cmp	r5, r3
 8008160:	d11b      	bne.n	800819a <_vfiprintf_r+0x56>
 8008162:	6875      	ldr	r5, [r6, #4]
 8008164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008166:	07d9      	lsls	r1, r3, #31
 8008168:	d405      	bmi.n	8008176 <_vfiprintf_r+0x32>
 800816a:	89ab      	ldrh	r3, [r5, #12]
 800816c:	059a      	lsls	r2, r3, #22
 800816e:	d402      	bmi.n	8008176 <_vfiprintf_r+0x32>
 8008170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008172:	f7ff fe75 	bl	8007e60 <__retarget_lock_acquire_recursive>
 8008176:	89ab      	ldrh	r3, [r5, #12]
 8008178:	071b      	lsls	r3, r3, #28
 800817a:	d501      	bpl.n	8008180 <_vfiprintf_r+0x3c>
 800817c:	692b      	ldr	r3, [r5, #16]
 800817e:	b9eb      	cbnz	r3, 80081bc <_vfiprintf_r+0x78>
 8008180:	4629      	mov	r1, r5
 8008182:	4630      	mov	r0, r6
 8008184:	f7ff fc46 	bl	8007a14 <__swsetup_r>
 8008188:	b1c0      	cbz	r0, 80081bc <_vfiprintf_r+0x78>
 800818a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800818c:	07dc      	lsls	r4, r3, #31
 800818e:	d50e      	bpl.n	80081ae <_vfiprintf_r+0x6a>
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	b01d      	add	sp, #116	; 0x74
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	4b7b      	ldr	r3, [pc, #492]	; (8008388 <_vfiprintf_r+0x244>)
 800819c:	429d      	cmp	r5, r3
 800819e:	d101      	bne.n	80081a4 <_vfiprintf_r+0x60>
 80081a0:	68b5      	ldr	r5, [r6, #8]
 80081a2:	e7df      	b.n	8008164 <_vfiprintf_r+0x20>
 80081a4:	4b79      	ldr	r3, [pc, #484]	; (800838c <_vfiprintf_r+0x248>)
 80081a6:	429d      	cmp	r5, r3
 80081a8:	bf08      	it	eq
 80081aa:	68f5      	ldreq	r5, [r6, #12]
 80081ac:	e7da      	b.n	8008164 <_vfiprintf_r+0x20>
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	0598      	lsls	r0, r3, #22
 80081b2:	d4ed      	bmi.n	8008190 <_vfiprintf_r+0x4c>
 80081b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b6:	f7ff fe54 	bl	8007e62 <__retarget_lock_release_recursive>
 80081ba:	e7e9      	b.n	8008190 <_vfiprintf_r+0x4c>
 80081bc:	2300      	movs	r3, #0
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	2320      	movs	r3, #32
 80081c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ca:	2330      	movs	r3, #48	; 0x30
 80081cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008390 <_vfiprintf_r+0x24c>
 80081d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d4:	f04f 0901 	mov.w	r9, #1
 80081d8:	4623      	mov	r3, r4
 80081da:	469a      	mov	sl, r3
 80081dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e0:	b10a      	cbz	r2, 80081e6 <_vfiprintf_r+0xa2>
 80081e2:	2a25      	cmp	r2, #37	; 0x25
 80081e4:	d1f9      	bne.n	80081da <_vfiprintf_r+0x96>
 80081e6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ea:	d00b      	beq.n	8008204 <_vfiprintf_r+0xc0>
 80081ec:	465b      	mov	r3, fp
 80081ee:	4622      	mov	r2, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ff93 	bl	800811e <__sfputs_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	f000 80aa 	beq.w	8008352 <_vfiprintf_r+0x20e>
 80081fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008200:	445a      	add	r2, fp
 8008202:	9209      	str	r2, [sp, #36]	; 0x24
 8008204:	f89a 3000 	ldrb.w	r3, [sl]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80a2 	beq.w	8008352 <_vfiprintf_r+0x20e>
 800820e:	2300      	movs	r3, #0
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008218:	f10a 0a01 	add.w	sl, sl, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008224:	931a      	str	r3, [sp, #104]	; 0x68
 8008226:	4654      	mov	r4, sl
 8008228:	2205      	movs	r2, #5
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4858      	ldr	r0, [pc, #352]	; (8008390 <_vfiprintf_r+0x24c>)
 8008230:	f7f8 f856 	bl	80002e0 <memchr>
 8008234:	9a04      	ldr	r2, [sp, #16]
 8008236:	b9d8      	cbnz	r0, 8008270 <_vfiprintf_r+0x12c>
 8008238:	06d1      	lsls	r1, r2, #27
 800823a:	bf44      	itt	mi
 800823c:	2320      	movmi	r3, #32
 800823e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008242:	0713      	lsls	r3, r2, #28
 8008244:	bf44      	itt	mi
 8008246:	232b      	movmi	r3, #43	; 0x2b
 8008248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b2a      	cmp	r3, #42	; 0x2a
 8008252:	d015      	beq.n	8008280 <_vfiprintf_r+0x13c>
 8008254:	9a07      	ldr	r2, [sp, #28]
 8008256:	4654      	mov	r4, sl
 8008258:	2000      	movs	r0, #0
 800825a:	f04f 0c0a 	mov.w	ip, #10
 800825e:	4621      	mov	r1, r4
 8008260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008264:	3b30      	subs	r3, #48	; 0x30
 8008266:	2b09      	cmp	r3, #9
 8008268:	d94e      	bls.n	8008308 <_vfiprintf_r+0x1c4>
 800826a:	b1b0      	cbz	r0, 800829a <_vfiprintf_r+0x156>
 800826c:	9207      	str	r2, [sp, #28]
 800826e:	e014      	b.n	800829a <_vfiprintf_r+0x156>
 8008270:	eba0 0308 	sub.w	r3, r0, r8
 8008274:	fa09 f303 	lsl.w	r3, r9, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	46a2      	mov	sl, r4
 800827e:	e7d2      	b.n	8008226 <_vfiprintf_r+0xe2>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	1d19      	adds	r1, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9103      	str	r1, [sp, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfbb      	ittet	lt
 800828c:	425b      	neglt	r3, r3
 800828e:	f042 0202 	orrlt.w	r2, r2, #2
 8008292:	9307      	strge	r3, [sp, #28]
 8008294:	9307      	strlt	r3, [sp, #28]
 8008296:	bfb8      	it	lt
 8008298:	9204      	strlt	r2, [sp, #16]
 800829a:	7823      	ldrb	r3, [r4, #0]
 800829c:	2b2e      	cmp	r3, #46	; 0x2e
 800829e:	d10c      	bne.n	80082ba <_vfiprintf_r+0x176>
 80082a0:	7863      	ldrb	r3, [r4, #1]
 80082a2:	2b2a      	cmp	r3, #42	; 0x2a
 80082a4:	d135      	bne.n	8008312 <_vfiprintf_r+0x1ce>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	9203      	str	r2, [sp, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfb8      	it	lt
 80082b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b6:	3402      	adds	r4, #2
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083a0 <_vfiprintf_r+0x25c>
 80082be:	7821      	ldrb	r1, [r4, #0]
 80082c0:	2203      	movs	r2, #3
 80082c2:	4650      	mov	r0, sl
 80082c4:	f7f8 f80c 	bl	80002e0 <memchr>
 80082c8:	b140      	cbz	r0, 80082dc <_vfiprintf_r+0x198>
 80082ca:	2340      	movs	r3, #64	; 0x40
 80082cc:	eba0 000a 	sub.w	r0, r0, sl
 80082d0:	fa03 f000 	lsl.w	r0, r3, r0
 80082d4:	9b04      	ldr	r3, [sp, #16]
 80082d6:	4303      	orrs	r3, r0
 80082d8:	3401      	adds	r4, #1
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e0:	482c      	ldr	r0, [pc, #176]	; (8008394 <_vfiprintf_r+0x250>)
 80082e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e6:	2206      	movs	r2, #6
 80082e8:	f7f7 fffa 	bl	80002e0 <memchr>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d03f      	beq.n	8008370 <_vfiprintf_r+0x22c>
 80082f0:	4b29      	ldr	r3, [pc, #164]	; (8008398 <_vfiprintf_r+0x254>)
 80082f2:	bb1b      	cbnz	r3, 800833c <_vfiprintf_r+0x1f8>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	3307      	adds	r3, #7
 80082f8:	f023 0307 	bic.w	r3, r3, #7
 80082fc:	3308      	adds	r3, #8
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008302:	443b      	add	r3, r7
 8008304:	9309      	str	r3, [sp, #36]	; 0x24
 8008306:	e767      	b.n	80081d8 <_vfiprintf_r+0x94>
 8008308:	fb0c 3202 	mla	r2, ip, r2, r3
 800830c:	460c      	mov	r4, r1
 800830e:	2001      	movs	r0, #1
 8008310:	e7a5      	b.n	800825e <_vfiprintf_r+0x11a>
 8008312:	2300      	movs	r3, #0
 8008314:	3401      	adds	r4, #1
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	4619      	mov	r1, r3
 800831a:	f04f 0c0a 	mov.w	ip, #10
 800831e:	4620      	mov	r0, r4
 8008320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008324:	3a30      	subs	r2, #48	; 0x30
 8008326:	2a09      	cmp	r2, #9
 8008328:	d903      	bls.n	8008332 <_vfiprintf_r+0x1ee>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0c5      	beq.n	80082ba <_vfiprintf_r+0x176>
 800832e:	9105      	str	r1, [sp, #20]
 8008330:	e7c3      	b.n	80082ba <_vfiprintf_r+0x176>
 8008332:	fb0c 2101 	mla	r1, ip, r1, r2
 8008336:	4604      	mov	r4, r0
 8008338:	2301      	movs	r3, #1
 800833a:	e7f0      	b.n	800831e <_vfiprintf_r+0x1da>
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	462a      	mov	r2, r5
 8008342:	4b16      	ldr	r3, [pc, #88]	; (800839c <_vfiprintf_r+0x258>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	4630      	mov	r0, r6
 8008348:	f3af 8000 	nop.w
 800834c:	4607      	mov	r7, r0
 800834e:	1c78      	adds	r0, r7, #1
 8008350:	d1d6      	bne.n	8008300 <_vfiprintf_r+0x1bc>
 8008352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008354:	07d9      	lsls	r1, r3, #31
 8008356:	d405      	bmi.n	8008364 <_vfiprintf_r+0x220>
 8008358:	89ab      	ldrh	r3, [r5, #12]
 800835a:	059a      	lsls	r2, r3, #22
 800835c:	d402      	bmi.n	8008364 <_vfiprintf_r+0x220>
 800835e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008360:	f7ff fd7f 	bl	8007e62 <__retarget_lock_release_recursive>
 8008364:	89ab      	ldrh	r3, [r5, #12]
 8008366:	065b      	lsls	r3, r3, #25
 8008368:	f53f af12 	bmi.w	8008190 <_vfiprintf_r+0x4c>
 800836c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800836e:	e711      	b.n	8008194 <_vfiprintf_r+0x50>
 8008370:	ab03      	add	r3, sp, #12
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	462a      	mov	r2, r5
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <_vfiprintf_r+0x258>)
 8008378:	a904      	add	r1, sp, #16
 800837a:	4630      	mov	r0, r6
 800837c:	f000 f880 	bl	8008480 <_printf_i>
 8008380:	e7e4      	b.n	800834c <_vfiprintf_r+0x208>
 8008382:	bf00      	nop
 8008384:	08009198 	.word	0x08009198
 8008388:	080091b8 	.word	0x080091b8
 800838c:	08009178 	.word	0x08009178
 8008390:	080091d8 	.word	0x080091d8
 8008394:	080091e2 	.word	0x080091e2
 8008398:	00000000 	.word	0x00000000
 800839c:	0800811f 	.word	0x0800811f
 80083a0:	080091de 	.word	0x080091de

080083a4 <_printf_common>:
 80083a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	4616      	mov	r6, r2
 80083aa:	4699      	mov	r9, r3
 80083ac:	688a      	ldr	r2, [r1, #8]
 80083ae:	690b      	ldr	r3, [r1, #16]
 80083b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083b4:	4293      	cmp	r3, r2
 80083b6:	bfb8      	it	lt
 80083b8:	4613      	movlt	r3, r2
 80083ba:	6033      	str	r3, [r6, #0]
 80083bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083c0:	4607      	mov	r7, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	b10a      	cbz	r2, 80083ca <_printf_common+0x26>
 80083c6:	3301      	adds	r3, #1
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	0699      	lsls	r1, r3, #26
 80083ce:	bf42      	ittt	mi
 80083d0:	6833      	ldrmi	r3, [r6, #0]
 80083d2:	3302      	addmi	r3, #2
 80083d4:	6033      	strmi	r3, [r6, #0]
 80083d6:	6825      	ldr	r5, [r4, #0]
 80083d8:	f015 0506 	ands.w	r5, r5, #6
 80083dc:	d106      	bne.n	80083ec <_printf_common+0x48>
 80083de:	f104 0a19 	add.w	sl, r4, #25
 80083e2:	68e3      	ldr	r3, [r4, #12]
 80083e4:	6832      	ldr	r2, [r6, #0]
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	dc26      	bgt.n	800843a <_printf_common+0x96>
 80083ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083f0:	1e13      	subs	r3, r2, #0
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	bf18      	it	ne
 80083f6:	2301      	movne	r3, #1
 80083f8:	0692      	lsls	r2, r2, #26
 80083fa:	d42b      	bmi.n	8008454 <_printf_common+0xb0>
 80083fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008400:	4649      	mov	r1, r9
 8008402:	4638      	mov	r0, r7
 8008404:	47c0      	blx	r8
 8008406:	3001      	adds	r0, #1
 8008408:	d01e      	beq.n	8008448 <_printf_common+0xa4>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	68e5      	ldr	r5, [r4, #12]
 800840e:	6832      	ldr	r2, [r6, #0]
 8008410:	f003 0306 	and.w	r3, r3, #6
 8008414:	2b04      	cmp	r3, #4
 8008416:	bf08      	it	eq
 8008418:	1aad      	subeq	r5, r5, r2
 800841a:	68a3      	ldr	r3, [r4, #8]
 800841c:	6922      	ldr	r2, [r4, #16]
 800841e:	bf0c      	ite	eq
 8008420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008424:	2500      	movne	r5, #0
 8008426:	4293      	cmp	r3, r2
 8008428:	bfc4      	itt	gt
 800842a:	1a9b      	subgt	r3, r3, r2
 800842c:	18ed      	addgt	r5, r5, r3
 800842e:	2600      	movs	r6, #0
 8008430:	341a      	adds	r4, #26
 8008432:	42b5      	cmp	r5, r6
 8008434:	d11a      	bne.n	800846c <_printf_common+0xc8>
 8008436:	2000      	movs	r0, #0
 8008438:	e008      	b.n	800844c <_printf_common+0xa8>
 800843a:	2301      	movs	r3, #1
 800843c:	4652      	mov	r2, sl
 800843e:	4649      	mov	r1, r9
 8008440:	4638      	mov	r0, r7
 8008442:	47c0      	blx	r8
 8008444:	3001      	adds	r0, #1
 8008446:	d103      	bne.n	8008450 <_printf_common+0xac>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008450:	3501      	adds	r5, #1
 8008452:	e7c6      	b.n	80083e2 <_printf_common+0x3e>
 8008454:	18e1      	adds	r1, r4, r3
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	2030      	movs	r0, #48	; 0x30
 800845a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800845e:	4422      	add	r2, r4
 8008460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008468:	3302      	adds	r3, #2
 800846a:	e7c7      	b.n	80083fc <_printf_common+0x58>
 800846c:	2301      	movs	r3, #1
 800846e:	4622      	mov	r2, r4
 8008470:	4649      	mov	r1, r9
 8008472:	4638      	mov	r0, r7
 8008474:	47c0      	blx	r8
 8008476:	3001      	adds	r0, #1
 8008478:	d0e6      	beq.n	8008448 <_printf_common+0xa4>
 800847a:	3601      	adds	r6, #1
 800847c:	e7d9      	b.n	8008432 <_printf_common+0x8e>
	...

08008480 <_printf_i>:
 8008480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	7e0f      	ldrb	r7, [r1, #24]
 8008486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008488:	2f78      	cmp	r7, #120	; 0x78
 800848a:	4691      	mov	r9, r2
 800848c:	4680      	mov	r8, r0
 800848e:	460c      	mov	r4, r1
 8008490:	469a      	mov	sl, r3
 8008492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008496:	d807      	bhi.n	80084a8 <_printf_i+0x28>
 8008498:	2f62      	cmp	r7, #98	; 0x62
 800849a:	d80a      	bhi.n	80084b2 <_printf_i+0x32>
 800849c:	2f00      	cmp	r7, #0
 800849e:	f000 80d8 	beq.w	8008652 <_printf_i+0x1d2>
 80084a2:	2f58      	cmp	r7, #88	; 0x58
 80084a4:	f000 80a3 	beq.w	80085ee <_printf_i+0x16e>
 80084a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084b0:	e03a      	b.n	8008528 <_printf_i+0xa8>
 80084b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084b6:	2b15      	cmp	r3, #21
 80084b8:	d8f6      	bhi.n	80084a8 <_printf_i+0x28>
 80084ba:	a101      	add	r1, pc, #4	; (adr r1, 80084c0 <_printf_i+0x40>)
 80084bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084c0:	08008519 	.word	0x08008519
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	080084a9 	.word	0x080084a9
 80084cc:	080084a9 	.word	0x080084a9
 80084d0:	080084a9 	.word	0x080084a9
 80084d4:	080084a9 	.word	0x080084a9
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	080084a9 	.word	0x080084a9
 80084e0:	080084a9 	.word	0x080084a9
 80084e4:	080084a9 	.word	0x080084a9
 80084e8:	080084a9 	.word	0x080084a9
 80084ec:	08008639 	.word	0x08008639
 80084f0:	0800855d 	.word	0x0800855d
 80084f4:	0800861b 	.word	0x0800861b
 80084f8:	080084a9 	.word	0x080084a9
 80084fc:	080084a9 	.word	0x080084a9
 8008500:	0800865b 	.word	0x0800865b
 8008504:	080084a9 	.word	0x080084a9
 8008508:	0800855d 	.word	0x0800855d
 800850c:	080084a9 	.word	0x080084a9
 8008510:	080084a9 	.word	0x080084a9
 8008514:	08008623 	.word	0x08008623
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	1d1a      	adds	r2, r3, #4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	602a      	str	r2, [r5, #0]
 8008520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008528:	2301      	movs	r3, #1
 800852a:	e0a3      	b.n	8008674 <_printf_i+0x1f4>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	6829      	ldr	r1, [r5, #0]
 8008530:	0606      	lsls	r6, r0, #24
 8008532:	f101 0304 	add.w	r3, r1, #4
 8008536:	d50a      	bpl.n	800854e <_printf_i+0xce>
 8008538:	680e      	ldr	r6, [r1, #0]
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	2e00      	cmp	r6, #0
 800853e:	da03      	bge.n	8008548 <_printf_i+0xc8>
 8008540:	232d      	movs	r3, #45	; 0x2d
 8008542:	4276      	negs	r6, r6
 8008544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008548:	485e      	ldr	r0, [pc, #376]	; (80086c4 <_printf_i+0x244>)
 800854a:	230a      	movs	r3, #10
 800854c:	e019      	b.n	8008582 <_printf_i+0x102>
 800854e:	680e      	ldr	r6, [r1, #0]
 8008550:	602b      	str	r3, [r5, #0]
 8008552:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008556:	bf18      	it	ne
 8008558:	b236      	sxthne	r6, r6
 800855a:	e7ef      	b.n	800853c <_printf_i+0xbc>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	1d19      	adds	r1, r3, #4
 8008562:	6029      	str	r1, [r5, #0]
 8008564:	0601      	lsls	r1, r0, #24
 8008566:	d501      	bpl.n	800856c <_printf_i+0xec>
 8008568:	681e      	ldr	r6, [r3, #0]
 800856a:	e002      	b.n	8008572 <_printf_i+0xf2>
 800856c:	0646      	lsls	r6, r0, #25
 800856e:	d5fb      	bpl.n	8008568 <_printf_i+0xe8>
 8008570:	881e      	ldrh	r6, [r3, #0]
 8008572:	4854      	ldr	r0, [pc, #336]	; (80086c4 <_printf_i+0x244>)
 8008574:	2f6f      	cmp	r7, #111	; 0x6f
 8008576:	bf0c      	ite	eq
 8008578:	2308      	moveq	r3, #8
 800857a:	230a      	movne	r3, #10
 800857c:	2100      	movs	r1, #0
 800857e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008582:	6865      	ldr	r5, [r4, #4]
 8008584:	60a5      	str	r5, [r4, #8]
 8008586:	2d00      	cmp	r5, #0
 8008588:	bfa2      	ittt	ge
 800858a:	6821      	ldrge	r1, [r4, #0]
 800858c:	f021 0104 	bicge.w	r1, r1, #4
 8008590:	6021      	strge	r1, [r4, #0]
 8008592:	b90e      	cbnz	r6, 8008598 <_printf_i+0x118>
 8008594:	2d00      	cmp	r5, #0
 8008596:	d04d      	beq.n	8008634 <_printf_i+0x1b4>
 8008598:	4615      	mov	r5, r2
 800859a:	fbb6 f1f3 	udiv	r1, r6, r3
 800859e:	fb03 6711 	mls	r7, r3, r1, r6
 80085a2:	5dc7      	ldrb	r7, [r0, r7]
 80085a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085a8:	4637      	mov	r7, r6
 80085aa:	42bb      	cmp	r3, r7
 80085ac:	460e      	mov	r6, r1
 80085ae:	d9f4      	bls.n	800859a <_printf_i+0x11a>
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d10b      	bne.n	80085cc <_printf_i+0x14c>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	07de      	lsls	r6, r3, #31
 80085b8:	d508      	bpl.n	80085cc <_printf_i+0x14c>
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	6861      	ldr	r1, [r4, #4]
 80085be:	4299      	cmp	r1, r3
 80085c0:	bfde      	ittt	le
 80085c2:	2330      	movle	r3, #48	; 0x30
 80085c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085cc:	1b52      	subs	r2, r2, r5
 80085ce:	6122      	str	r2, [r4, #16]
 80085d0:	f8cd a000 	str.w	sl, [sp]
 80085d4:	464b      	mov	r3, r9
 80085d6:	aa03      	add	r2, sp, #12
 80085d8:	4621      	mov	r1, r4
 80085da:	4640      	mov	r0, r8
 80085dc:	f7ff fee2 	bl	80083a4 <_printf_common>
 80085e0:	3001      	adds	r0, #1
 80085e2:	d14c      	bne.n	800867e <_printf_i+0x1fe>
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	b004      	add	sp, #16
 80085ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ee:	4835      	ldr	r0, [pc, #212]	; (80086c4 <_printf_i+0x244>)
 80085f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085f4:	6829      	ldr	r1, [r5, #0]
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80085fc:	6029      	str	r1, [r5, #0]
 80085fe:	061d      	lsls	r5, r3, #24
 8008600:	d514      	bpl.n	800862c <_printf_i+0x1ac>
 8008602:	07df      	lsls	r7, r3, #31
 8008604:	bf44      	itt	mi
 8008606:	f043 0320 	orrmi.w	r3, r3, #32
 800860a:	6023      	strmi	r3, [r4, #0]
 800860c:	b91e      	cbnz	r6, 8008616 <_printf_i+0x196>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	f023 0320 	bic.w	r3, r3, #32
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	2310      	movs	r3, #16
 8008618:	e7b0      	b.n	800857c <_printf_i+0xfc>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	f043 0320 	orr.w	r3, r3, #32
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	2378      	movs	r3, #120	; 0x78
 8008624:	4828      	ldr	r0, [pc, #160]	; (80086c8 <_printf_i+0x248>)
 8008626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800862a:	e7e3      	b.n	80085f4 <_printf_i+0x174>
 800862c:	0659      	lsls	r1, r3, #25
 800862e:	bf48      	it	mi
 8008630:	b2b6      	uxthmi	r6, r6
 8008632:	e7e6      	b.n	8008602 <_printf_i+0x182>
 8008634:	4615      	mov	r5, r2
 8008636:	e7bb      	b.n	80085b0 <_printf_i+0x130>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	6826      	ldr	r6, [r4, #0]
 800863c:	6961      	ldr	r1, [r4, #20]
 800863e:	1d18      	adds	r0, r3, #4
 8008640:	6028      	str	r0, [r5, #0]
 8008642:	0635      	lsls	r5, r6, #24
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	d501      	bpl.n	800864c <_printf_i+0x1cc>
 8008648:	6019      	str	r1, [r3, #0]
 800864a:	e002      	b.n	8008652 <_printf_i+0x1d2>
 800864c:	0670      	lsls	r0, r6, #25
 800864e:	d5fb      	bpl.n	8008648 <_printf_i+0x1c8>
 8008650:	8019      	strh	r1, [r3, #0]
 8008652:	2300      	movs	r3, #0
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	4615      	mov	r5, r2
 8008658:	e7ba      	b.n	80085d0 <_printf_i+0x150>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	1d1a      	adds	r2, r3, #4
 800865e:	602a      	str	r2, [r5, #0]
 8008660:	681d      	ldr	r5, [r3, #0]
 8008662:	6862      	ldr	r2, [r4, #4]
 8008664:	2100      	movs	r1, #0
 8008666:	4628      	mov	r0, r5
 8008668:	f7f7 fe3a 	bl	80002e0 <memchr>
 800866c:	b108      	cbz	r0, 8008672 <_printf_i+0x1f2>
 800866e:	1b40      	subs	r0, r0, r5
 8008670:	6060      	str	r0, [r4, #4]
 8008672:	6863      	ldr	r3, [r4, #4]
 8008674:	6123      	str	r3, [r4, #16]
 8008676:	2300      	movs	r3, #0
 8008678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800867c:	e7a8      	b.n	80085d0 <_printf_i+0x150>
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	462a      	mov	r2, r5
 8008682:	4649      	mov	r1, r9
 8008684:	4640      	mov	r0, r8
 8008686:	47d0      	blx	sl
 8008688:	3001      	adds	r0, #1
 800868a:	d0ab      	beq.n	80085e4 <_printf_i+0x164>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	079b      	lsls	r3, r3, #30
 8008690:	d413      	bmi.n	80086ba <_printf_i+0x23a>
 8008692:	68e0      	ldr	r0, [r4, #12]
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	4298      	cmp	r0, r3
 8008698:	bfb8      	it	lt
 800869a:	4618      	movlt	r0, r3
 800869c:	e7a4      	b.n	80085e8 <_printf_i+0x168>
 800869e:	2301      	movs	r3, #1
 80086a0:	4632      	mov	r2, r6
 80086a2:	4649      	mov	r1, r9
 80086a4:	4640      	mov	r0, r8
 80086a6:	47d0      	blx	sl
 80086a8:	3001      	adds	r0, #1
 80086aa:	d09b      	beq.n	80085e4 <_printf_i+0x164>
 80086ac:	3501      	adds	r5, #1
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	9903      	ldr	r1, [sp, #12]
 80086b2:	1a5b      	subs	r3, r3, r1
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dcf2      	bgt.n	800869e <_printf_i+0x21e>
 80086b8:	e7eb      	b.n	8008692 <_printf_i+0x212>
 80086ba:	2500      	movs	r5, #0
 80086bc:	f104 0619 	add.w	r6, r4, #25
 80086c0:	e7f5      	b.n	80086ae <_printf_i+0x22e>
 80086c2:	bf00      	nop
 80086c4:	080091e9 	.word	0x080091e9
 80086c8:	080091fa 	.word	0x080091fa

080086cc <_sbrk_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d06      	ldr	r5, [pc, #24]	; (80086e8 <_sbrk_r+0x1c>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	f7f9 ff72 	bl	80025c0 <_sbrk>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_sbrk_r+0x1a>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_sbrk_r+0x1a>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	2400103c 	.word	0x2400103c

080086ec <__sread>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	460c      	mov	r4, r1
 80086f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f4:	f000 f8a0 	bl	8008838 <_read_r>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	bfab      	itete	ge
 80086fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008700:	181b      	addge	r3, r3, r0
 8008702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008706:	bfac      	ite	ge
 8008708:	6563      	strge	r3, [r4, #84]	; 0x54
 800870a:	81a3      	strhlt	r3, [r4, #12]
 800870c:	bd10      	pop	{r4, pc}

0800870e <__swrite>:
 800870e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008712:	461f      	mov	r7, r3
 8008714:	898b      	ldrh	r3, [r1, #12]
 8008716:	05db      	lsls	r3, r3, #23
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	4616      	mov	r6, r2
 800871e:	d505      	bpl.n	800872c <__swrite+0x1e>
 8008720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008724:	2302      	movs	r3, #2
 8008726:	2200      	movs	r2, #0
 8008728:	f000 f868 	bl	80087fc <_lseek_r>
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	4632      	mov	r2, r6
 800873a:	463b      	mov	r3, r7
 800873c:	4628      	mov	r0, r5
 800873e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008742:	f000 b817 	b.w	8008774 <_write_r>

08008746 <__sseek>:
 8008746:	b510      	push	{r4, lr}
 8008748:	460c      	mov	r4, r1
 800874a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874e:	f000 f855 	bl	80087fc <_lseek_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	bf15      	itete	ne
 8008758:	6560      	strne	r0, [r4, #84]	; 0x54
 800875a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800875e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008762:	81a3      	strheq	r3, [r4, #12]
 8008764:	bf18      	it	ne
 8008766:	81a3      	strhne	r3, [r4, #12]
 8008768:	bd10      	pop	{r4, pc}

0800876a <__sclose>:
 800876a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876e:	f000 b813 	b.w	8008798 <_close_r>
	...

08008774 <_write_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	; (8008794 <_write_r+0x20>)
 8008778:	4604      	mov	r4, r0
 800877a:	4608      	mov	r0, r1
 800877c:	4611      	mov	r1, r2
 800877e:	2200      	movs	r2, #0
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f7f9 f836 	bl	80017f4 <_write>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d102      	bne.n	8008792 <_write_r+0x1e>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b103      	cbz	r3, 8008792 <_write_r+0x1e>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	2400103c 	.word	0x2400103c

08008798 <_close_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_close_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f9 fefe 	bl	80025a4 <_close>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_close_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_close_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	2400103c 	.word	0x2400103c

080087b8 <_fstat_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d07      	ldr	r5, [pc, #28]	; (80087d8 <_fstat_r+0x20>)
 80087bc:	2300      	movs	r3, #0
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	4611      	mov	r1, r2
 80087c4:	602b      	str	r3, [r5, #0]
 80087c6:	f7f9 fef1 	bl	80025ac <_fstat>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d102      	bne.n	80087d4 <_fstat_r+0x1c>
 80087ce:	682b      	ldr	r3, [r5, #0]
 80087d0:	b103      	cbz	r3, 80087d4 <_fstat_r+0x1c>
 80087d2:	6023      	str	r3, [r4, #0]
 80087d4:	bd38      	pop	{r3, r4, r5, pc}
 80087d6:	bf00      	nop
 80087d8:	2400103c 	.word	0x2400103c

080087dc <_isatty_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_isatty_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7f9 fee6 	bl	80025b8 <_isatty>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_isatty_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_isatty_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	2400103c 	.word	0x2400103c

080087fc <_lseek_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d07      	ldr	r5, [pc, #28]	; (800881c <_lseek_r+0x20>)
 8008800:	4604      	mov	r4, r0
 8008802:	4608      	mov	r0, r1
 8008804:	4611      	mov	r1, r2
 8008806:	2200      	movs	r2, #0
 8008808:	602a      	str	r2, [r5, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	f7f9 fed6 	bl	80025bc <_lseek>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d102      	bne.n	800881a <_lseek_r+0x1e>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	b103      	cbz	r3, 800881a <_lseek_r+0x1e>
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	2400103c 	.word	0x2400103c

08008820 <__malloc_lock>:
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__malloc_lock+0x8>)
 8008822:	f7ff bb1d 	b.w	8007e60 <__retarget_lock_acquire_recursive>
 8008826:	bf00      	nop
 8008828:	24001030 	.word	0x24001030

0800882c <__malloc_unlock>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__malloc_unlock+0x8>)
 800882e:	f7ff bb18 	b.w	8007e62 <__retarget_lock_release_recursive>
 8008832:	bf00      	nop
 8008834:	24001030 	.word	0x24001030

08008838 <_read_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d07      	ldr	r5, [pc, #28]	; (8008858 <_read_r+0x20>)
 800883c:	4604      	mov	r4, r0
 800883e:	4608      	mov	r0, r1
 8008840:	4611      	mov	r1, r2
 8008842:	2200      	movs	r2, #0
 8008844:	602a      	str	r2, [r5, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	f7f9 fe9e 	bl	8002588 <_read>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_read_r+0x1e>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_read_r+0x1e>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	2400103c 	.word	0x2400103c

0800885c <_init>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	bf00      	nop
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr

08008868 <_fini>:
 8008868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886a:	bf00      	nop
 800886c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886e:	bc08      	pop	{r3}
 8008870:	469e      	mov	lr, r3
 8008872:	4770      	bx	lr
